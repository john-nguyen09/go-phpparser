([]*lexer.Token) (len=630) {
  (*lexer.Token)(OpenTag 0 6),
  (*lexer.Token)(Whitespace 6 1),
  (*lexer.Token)(Namespace 7 9),
  (*lexer.Token)(Whitespace 16 1),
  (*lexer.Token)(Name 17 3),
  (*lexer.Token)(Semicolon 20 1),
  (*lexer.Token)(Whitespace 21 2),
  (*lexer.Token)(Use 23 3),
  (*lexer.Token)(Whitespace 26 1),
  (*lexer.Token)(Name 27 7),
  (*lexer.Token)(Backslash 34 1),
  (*lexer.Token)(Name 35 6),
  (*lexer.Token)(Backslash 41 1),
  (*lexer.Token)(Name 42 15),
  (*lexer.Token)(Backslash 57 1),
  (*lexer.Token)(Name 58 6),
  (*lexer.Token)(Backslash 64 1),
  (*lexer.Token)(Name 65 16),
  (*lexer.Token)(Semicolon 81 1),
  (*lexer.Token)(Whitespace 82 1),
  (*lexer.Token)(Use 83 3),
  (*lexer.Token)(Whitespace 86 1),
  (*lexer.Token)(Name 87 7),
  (*lexer.Token)(Backslash 94 1),
  (*lexer.Token)(Name 95 9),
  (*lexer.Token)(Backslash 104 1),
  (*lexer.Token)(Name 105 6),
  (*lexer.Token)(Backslash 111 1),
  (*lexer.Token)(Name 112 6),
  (*lexer.Token)(Backslash 118 1),
  (*lexer.Token)(Name 119 15),
  (*lexer.Token)(Semicolon 134 1),
  (*lexer.Token)(Whitespace 135 1),
  (*lexer.Token)(Use 136 3),
  (*lexer.Token)(Whitespace 139 1),
  (*lexer.Token)(Name 140 7),
  (*lexer.Token)(Backslash 147 1),
  (*lexer.Token)(Name 148 9),
  (*lexer.Token)(Backslash 157 1),
  (*lexer.Token)(Name 158 6),
  (*lexer.Token)(Backslash 164 1),
  (*lexer.Token)(Name 165 8),
  (*lexer.Token)(Backslash 173 1),
  (*lexer.Token)(Name 174 12),
  (*lexer.Token)(Semicolon 186 1),
  (*lexer.Token)(Whitespace 187 1),
  (*lexer.Token)(Use 188 3),
  (*lexer.Token)(Whitespace 191 1),
  (*lexer.Token)(Name 192 7),
  (*lexer.Token)(Backslash 199 1),
  (*lexer.Token)(Name 200 9),
  (*lexer.Token)(Backslash 209 1),
  (*lexer.Token)(Name 210 19),
  (*lexer.Token)(Backslash 229 1),
  (*lexer.Token)(Name 230 16),
  (*lexer.Token)(Semicolon 246 1),
  (*lexer.Token)(Whitespace 247 1),
  (*lexer.Token)(Use 248 3),
  (*lexer.Token)(Whitespace 251 1),
  (*lexer.Token)(Name 252 7),
  (*lexer.Token)(Backslash 259 1),
  (*lexer.Token)(Name 260 9),
  (*lexer.Token)(Backslash 269 1),
  (*lexer.Token)(Name 270 10),
  (*lexer.Token)(Backslash 280 1),
  (*lexer.Token)(Name 281 6),
  (*lexer.Token)(Whitespace 287 1),
  (*lexer.Token)(As 288 2),
  (*lexer.Token)(Whitespace 290 1),
  (*lexer.Token)(Name 291 10),
  (*lexer.Token)(Semicolon 301 1),
  (*lexer.Token)(Whitespace 302 1),
  (*lexer.Token)(Use 303 3),
  (*lexer.Token)(Whitespace 306 1),
  (*lexer.Token)(Name 307 7),
  (*lexer.Token)(Backslash 314 1),
  (*lexer.Token)(Name 315 9),
  (*lexer.Token)(Backslash 324 1),
  (*lexer.Token)(Name 325 7),
  (*lexer.Token)(Backslash 332 1),
  (*lexer.Token)(Name 333 22),
  (*lexer.Token)(Semicolon 355 1),
  (*lexer.Token)(Whitespace 356 1),
  (*lexer.Token)(Use 357 3),
  (*lexer.Token)(Whitespace 360 1),
  (*lexer.Token)(Name 361 7),
  (*lexer.Token)(Backslash 368 1),
  (*lexer.Token)(Name 369 9),
  (*lexer.Token)(Backslash 378 1),
  (*lexer.Token)(Name 379 14),
  (*lexer.Token)(Backslash 393 1),
  (*lexer.Token)(Name 394 7),
  (*lexer.Token)(Semicolon 401 1),
  (*lexer.Token)(Whitespace 402 1),
  (*lexer.Token)(Use 403 3),
  (*lexer.Token)(Whitespace 406 1),
  (*lexer.Token)(Name 407 7),
  (*lexer.Token)(Backslash 414 1),
  (*lexer.Token)(Name 415 9),
  (*lexer.Token)(Backslash 424 1),
  (*lexer.Token)(Name 425 14),
  (*lexer.Token)(Backslash 439 1),
  (*lexer.Token)(Name 440 8),
  (*lexer.Token)(Semicolon 448 1),
  (*lexer.Token)(Whitespace 449 1),
  (*lexer.Token)(Use 450 3),
  (*lexer.Token)(Whitespace 453 1),
  (*lexer.Token)(Name 454 7),
  (*lexer.Token)(Backslash 461 1),
  (*lexer.Token)(Name 462 9),
  (*lexer.Token)(Backslash 471 1),
  (*lexer.Token)(Name 472 10),
  (*lexer.Token)(Backslash 482 1),
  (*lexer.Token)(Name 483 9),
  (*lexer.Token)(Backslash 492 1),
  (*lexer.Token)(Name 493 21),
  (*lexer.Token)(Semicolon 514 1),
  (*lexer.Token)(Whitespace 515 1),
  (*lexer.Token)(Use 516 3),
  (*lexer.Token)(Whitespace 519 1),
  (*lexer.Token)(Name 520 7),
  (*lexer.Token)(Backslash 527 1),
  (*lexer.Token)(Name 528 9),
  (*lexer.Token)(Backslash 537 1),
  (*lexer.Token)(Name 538 10),
  (*lexer.Token)(Backslash 548 1),
  (*lexer.Token)(Name 549 9),
  (*lexer.Token)(Backslash 558 1),
  (*lexer.Token)(Name 559 13),
  (*lexer.Token)(Semicolon 572 1),
  (*lexer.Token)(Whitespace 573 2),
  (*lexer.Token)(Class 575 5),
  (*lexer.Token)(Whitespace 580 1),
  (*lexer.Token)(Name 581 6),
  (*lexer.Token)(Whitespace 587 1),
  (*lexer.Token)(Extends 588 7),
  (*lexer.Token)(Whitespace 595 1),
  (*lexer.Token)(Name 596 10),
  (*lexer.Token)(Whitespace 606 1),
  (*lexer.Token)(OpenBrace 607 1),
  (*lexer.Token)(Whitespace 608 5),
  (*lexer.Token)(Use 613 3),
  (*lexer.Token)(Whitespace 616 1),
  (*lexer.Token)(Name 617 16),
  (*lexer.Token)(Semicolon 633 1),
  (*lexer.Token)(Whitespace 634 6),
  (*lexer.Token)(Private 640 7),
  (*lexer.Token)(Whitespace 647 1),
  (*lexer.Token)(Const 648 5),
  (*lexer.Token)(Whitespace 653 1),
  (*lexer.Token)(Name 654 11),
  (*lexer.Token)(Whitespace 665 1),
  (*lexer.Token)(Equals 666 1),
  (*lexer.Token)(Whitespace 667 1),
  (*lexer.Token)(StringLiteral 668 21),
  (*lexer.Token)(Semicolon 689 1),
  (*lexer.Token)(Whitespace 690 6),
  (*lexer.Token)(Public 696 6),
  (*lexer.Token)(Whitespace 702 1),
  (*lexer.Token)(Function 703 8),
  (*lexer.Token)(Whitespace 711 1),
  (*lexer.Token)(Name 712 6),
  (*lexer.Token)(OpenParenthesis 718 1),
  (*lexer.Token)(Name 719 7),
  (*lexer.Token)(Whitespace 726 1),
  (*lexer.Token)(VariableName 727 8),
  (*lexer.Token)(Comma 735 1),
  (*lexer.Token)(Whitespace 736 1),
  (*lexer.Token)(VariableName 737 5),
  (*lexer.Token)(Whitespace 742 1),
  (*lexer.Token)(Equals 743 1),
  (*lexer.Token)(Whitespace 744 1),
  (*lexer.Token)(Name 745 4),
  (*lexer.Token)(ColonColon 749 2),
  (*lexer.Token)(Name 751 14),
  (*lexer.Token)(Comma 765 1),
  (*lexer.Token)(Whitespace 766 1),
  (*lexer.Token)(VariableName 767 6),
  (*lexer.Token)(Whitespace 773 1),
  (*lexer.Token)(Equals 774 1),
  (*lexer.Token)(Whitespace 775 1),
  (*lexer.Token)(Name 776 4),
  (*lexer.Token)(CloseParenthesis 780 1),
  (*lexer.Token)(Whitespace 781 5),
  (*lexer.Token)(OpenBrace 786 1),
  (*lexer.Token)(Whitespace 787 9),
  (*lexer.Token)(Try 796 3),
  (*lexer.Token)(Whitespace 799 1),
  (*lexer.Token)(OpenBrace 800 1),
  (*lexer.Token)(Whitespace 801 13),
  (*lexer.Token)(VariableName 814 9),
  (*lexer.Token)(Whitespace 823 1),
  (*lexer.Token)(Equals 824 1),
  (*lexer.Token)(Whitespace 825 1),
  (*lexer.Token)(Name 826 6),
  (*lexer.Token)(ColonColon 832 2),
  (*lexer.Token)(Name 834 6),
  (*lexer.Token)(OpenParenthesis 840 1),
  (*lexer.Token)(VariableName 841 8),
  (*lexer.Token)(Comma 849 1),
  (*lexer.Token)(Whitespace 850 1),
  (*lexer.Token)(VariableName 851 5),
  (*lexer.Token)(Comma 856 1),
  (*lexer.Token)(Whitespace 857 1),
  (*lexer.Token)(VariableName 858 6),
  (*lexer.Token)(CloseParenthesis 864 1),
  (*lexer.Token)(Semicolon 865 1),
  (*lexer.Token)(Whitespace 866 14),
  (*lexer.Token)(Return 880 6),
  (*lexer.Token)(Whitespace 886 1),
  (*lexer.Token)(VariableName 887 9),
  (*lexer.Token)(Semicolon 896 1),
  (*lexer.Token)(Whitespace 897 9),
  (*lexer.Token)(Comment 906 65),
  (*lexer.Token)(Whitespace 971 9),
  (*lexer.Token)(Comment 980 54),
  (*lexer.Token)(Whitespace 1034 9),
  (*lexer.Token)(CloseBrace 1043 1),
  (*lexer.Token)(Whitespace 1044 1),
  (*lexer.Token)(Catch 1045 5),
  (*lexer.Token)(Whitespace 1050 1),
  (*lexer.Token)(OpenParenthesis 1051 1),
  (*lexer.Token)(Name 1052 13),
  (*lexer.Token)(Whitespace 1065 1),
  (*lexer.Token)(VariableName 1066 2),
  (*lexer.Token)(CloseParenthesis 1068 1),
  (*lexer.Token)(Whitespace 1069 1),
  (*lexer.Token)(OpenBrace 1070 1),
  (*lexer.Token)(Whitespace 1071 13),
  (*lexer.Token)(Comment 1084 54),
  (*lexer.Token)(Whitespace 1138 13),
  (*lexer.Token)(If 1151 2),
  (*lexer.Token)(Whitespace 1153 1),
  (*lexer.Token)(OpenParenthesis 1154 1),
  (*lexer.Token)(VariableName 1155 2),
  (*lexer.Token)(Whitespace 1157 1),
  (*lexer.Token)(InstanceOf 1158 10),
  (*lexer.Token)(Whitespace 1168 1),
  (*lexer.Token)(Name 1169 21),
  (*lexer.Token)(CloseParenthesis 1190 1),
  (*lexer.Token)(Whitespace 1191 1),
  (*lexer.Token)(OpenBrace 1192 1),
  (*lexer.Token)(Whitespace 1193 17),
  (*lexer.Token)(Return 1210 6),
  (*lexer.Token)(Whitespace 1216 1),
  (*lexer.Token)(New 1217 3),
  (*lexer.Token)(Whitespace 1220 1),
  (*lexer.Token)(Name 1221 8),
  (*lexer.Token)(OpenParenthesis 1229 1),
  (*lexer.Token)(StringLiteral 1230 2),
  (*lexer.Token)(Comma 1232 1),
  (*lexer.Token)(Whitespace 1233 1),
  (*lexer.Token)(Name 1234 8),
  (*lexer.Token)(ColonColon 1242 2),
  (*lexer.Token)(Name 1244 14),
  (*lexer.Token)(CloseParenthesis 1258 1),
  (*lexer.Token)(Semicolon 1259 1),
  (*lexer.Token)(Whitespace 1260 13),
  (*lexer.Token)(CloseBrace 1273 1),
  (*lexer.Token)(Whitespace 1274 14),
  (*lexer.Token)(Return 1288 6),
  (*lexer.Token)(Whitespace 1294 1),
  (*lexer.Token)(New 1295 3),
  (*lexer.Token)(Whitespace 1298 1),
  (*lexer.Token)(Name 1299 8),
  (*lexer.Token)(OpenParenthesis 1307 1),
  (*lexer.Token)(StringLiteral 1308 2),
  (*lexer.Token)(Comma 1310 1),
  (*lexer.Token)(Whitespace 1311 1),
  (*lexer.Token)(Name 1312 8),
  (*lexer.Token)(ColonColon 1320 2),
  (*lexer.Token)(Name 1322 26),
  (*lexer.Token)(CloseParenthesis 1348 1),
  (*lexer.Token)(Semicolon 1349 1),
  (*lexer.Token)(Whitespace 1350 9),
  (*lexer.Token)(CloseBrace 1359 1),
  (*lexer.Token)(Whitespace 1360 5),
  (*lexer.Token)(CloseBrace 1365 1),
  (*lexer.Token)(Whitespace 1366 6),
  (*lexer.Token)(Public 1372 6),
  (*lexer.Token)(Whitespace 1378 1),
  (*lexer.Token)(Function 1379 8),
  (*lexer.Token)(Whitespace 1387 1),
  (*lexer.Token)(Name 1388 15),
  (*lexer.Token)(OpenParenthesis 1403 1),
  (*lexer.Token)(CloseParenthesis 1404 1),
  (*lexer.Token)(Colon 1405 1),
  (*lexer.Token)(Whitespace 1406 1),
  (*lexer.Token)(Name 1407 8),
  (*lexer.Token)(Whitespace 1415 5),
  (*lexer.Token)(OpenBrace 1420 1),
  (*lexer.Token)(Whitespace 1421 9),
  (*lexer.Token)(VariableName 1430 9),
  (*lexer.Token)(Whitespace 1439 1),
  (*lexer.Token)(Equals 1440 1),
  (*lexer.Token)(Whitespace 1441 1),
  (*lexer.Token)(Require 1442 7),
  (*lexer.Token)(Whitespace 1449 1),
  (*lexer.Token)(VariableName 1450 5),
  (*lexer.Token)(Arrow 1455 2),
  (*lexer.Token)(Name 1457 13),
  (*lexer.Token)(OpenParenthesis 1470 1),
  (*lexer.Token)(CloseParenthesis 1471 1),
  (*lexer.Token)(Dot 1472 1),
  (*lexer.Token)(StringLiteral 1473 21),
  (*lexer.Token)(Semicolon 1494 1),
  (*lexer.Token)(Whitespace 1495 9),
  (*lexer.Token)(ForEach 1504 7),
  (*lexer.Token)(Whitespace 1511 1),
  (*lexer.Token)(OpenParenthesis 1512 1),
  (*lexer.Token)(VariableName 1513 9),
  (*lexer.Token)(Whitespace 1522 1),
  (*lexer.Token)(As 1523 2),
  (*lexer.Token)(Whitespace 1525 1),
  (*lexer.Token)(VariableName 1526 6),
  (*lexer.Token)(Whitespace 1532 1),
  (*lexer.Token)(FatArrow 1533 2),
  (*lexer.Token)(Whitespace 1535 1),
  (*lexer.Token)(VariableName 1536 5),
  (*lexer.Token)(CloseParenthesis 1541 1),
  (*lexer.Token)(Whitespace 1542 1),
  (*lexer.Token)(OpenBrace 1543 1),
  (*lexer.Token)(Whitespace 1544 13),
  (*lexer.Token)(If 1557 2),
  (*lexer.Token)(Whitespace 1559 1),
  (*lexer.Token)(OpenParenthesis 1560 1),
  (*lexer.Token)(VariableName 1561 5),
  (*lexer.Token)(OpenBracket 1566 1),
  (*lexer.Token)(VariableName 1567 5),
  (*lexer.Token)(Arrow 1572 2),
  (*lexer.Token)(Name 1574 11),
  (*lexer.Token)(CloseBracket 1585 1),
  (*lexer.Token)(Whitespace 1586 1),
  (*lexer.Token)(QuestionQuestion 1587 2),
  (*lexer.Token)(Whitespace 1589 1),
  (*lexer.Token)(VariableName 1590 5),
  (*lexer.Token)(OpenBracket 1595 1),
  (*lexer.Token)(StringLiteral 1596 5),
  (*lexer.Token)(CloseBracket 1601 1),
  (*lexer.Token)(Whitespace 1602 1),
  (*lexer.Token)(QuestionQuestion 1603 2),
  (*lexer.Token)(Whitespace 1605 1),
  (*lexer.Token)(Name 1606 5),
  (*lexer.Token)(CloseParenthesis 1611 1),
  (*lexer.Token)(Whitespace 1612 1),
  (*lexer.Token)(OpenBrace 1613 1),
  (*lexer.Token)(Whitespace 1614 17),
  (*lexer.Token)(Yield 1631 5),
  (*lexer.Token)(Whitespace 1636 1),
  (*lexer.Token)(New 1637 3),
  (*lexer.Token)(Whitespace 1640 1),
  (*lexer.Token)(VariableName 1641 6),
  (*lexer.Token)(OpenParenthesis 1647 1),
  (*lexer.Token)(CloseParenthesis 1648 1),
  (*lexer.Token)(Semicolon 1649 1),
  (*lexer.Token)(Whitespace 1650 13),
  (*lexer.Token)(CloseBrace 1663 1),
  (*lexer.Token)(Whitespace 1664 9),
  (*lexer.Token)(CloseBrace 1673 1),
  (*lexer.Token)(Whitespace 1674 5),
  (*lexer.Token)(CloseBrace 1679 1),
  (*lexer.Token)(Whitespace 1680 6),
  (*lexer.Token)(Public 1686 6),
  (*lexer.Token)(Whitespace 1692 1),
  (*lexer.Token)(Function 1693 8),
  (*lexer.Token)(Whitespace 1701 1),
  (*lexer.Token)(Name 1702 13),
  (*lexer.Token)(OpenParenthesis 1715 1),
  (*lexer.Token)(CloseParenthesis 1716 1),
  (*lexer.Token)(Colon 1717 1),
  (*lexer.Token)(Whitespace 1718 1),
  (*lexer.Token)(Name 1719 6),
  (*lexer.Token)(Whitespace 1725 5),
  (*lexer.Token)(OpenBrace 1730 1),
  (*lexer.Token)(Whitespace 1731 9),
  (*lexer.Token)(Return 1740 6),
  (*lexer.Token)(Whitespace 1746 1),
  (*lexer.Token)(Backslash 1747 1),
  (*lexer.Token)(Name 1748 7),
  (*lexer.Token)(OpenParenthesis 1755 1),
  (*lexer.Token)(DirectoryConstant 1756 7),
  (*lexer.Token)(CloseParenthesis 1763 1),
  (*lexer.Token)(Semicolon 1764 1),
  (*lexer.Token)(Whitespace 1765 5),
  (*lexer.Token)(CloseBrace 1770 1),
  (*lexer.Token)(Whitespace 1771 6),
  (*lexer.Token)(Protected 1777 9),
  (*lexer.Token)(Whitespace 1786 1),
  (*lexer.Token)(Function 1787 8),
  (*lexer.Token)(Whitespace 1795 1),
  (*lexer.Token)(Name 1796 18),
  (*lexer.Token)(OpenParenthesis 1814 1),
  (*lexer.Token)(Name 1815 16),
  (*lexer.Token)(Whitespace 1831 1),
  (*lexer.Token)(VariableName 1832 10),
  (*lexer.Token)(Comma 1842 1),
  (*lexer.Token)(Whitespace 1843 1),
  (*lexer.Token)(Name 1844 15),
  (*lexer.Token)(Whitespace 1859 1),
  (*lexer.Token)(VariableName 1860 7),
  (*lexer.Token)(CloseParenthesis 1867 1),
  (*lexer.Token)(Colon 1868 1),
  (*lexer.Token)(Whitespace 1869 1),
  (*lexer.Token)(Name 1870 4),
  (*lexer.Token)(Whitespace 1874 5),
  (*lexer.Token)(OpenBrace 1879 1),
  (*lexer.Token)(Whitespace 1880 9),
  (*lexer.Token)(VariableName 1889 10),
  (*lexer.Token)(Arrow 1899 2),
  (*lexer.Token)(Name 1901 11),
  (*lexer.Token)(OpenParenthesis 1912 1),
  (*lexer.Token)(New 1913 3),
  (*lexer.Token)(Whitespace 1916 1),
  (*lexer.Token)(Name 1917 12),
  (*lexer.Token)(OpenParenthesis 1929 1),
  (*lexer.Token)(VariableName 1930 5),
  (*lexer.Token)(Arrow 1935 2),
  (*lexer.Token)(Name 1937 13),
  (*lexer.Token)(OpenParenthesis 1950 1),
  (*lexer.Token)(CloseParenthesis 1951 1),
  (*lexer.Token)(Dot 1952 1),
  (*lexer.Token)(StringLiteral 1953 21),
  (*lexer.Token)(CloseParenthesis 1974 1),
  (*lexer.Token)(CloseParenthesis 1975 1),
  (*lexer.Token)(Semicolon 1976 1),
  (*lexer.Token)(Whitespace 1977 9),
  (*lexer.Token)(VariableName 1986 10),
  (*lexer.Token)(Arrow 1996 2),
  (*lexer.Token)(Name 1998 12),
  (*lexer.Token)(OpenParenthesis 2010 1),
  (*lexer.Token)(StringLiteral 2011 38),
  (*lexer.Token)(Comma 2049 1),
  (*lexer.Token)(Whitespace 2050 1),
  (*lexer.Token)(Name 2051 4),
  (*lexer.Token)(CloseParenthesis 2055 1),
  (*lexer.Token)(Semicolon 2056 1),
  (*lexer.Token)(Whitespace 2057 9),
  (*lexer.Token)(VariableName 2066 8),
  (*lexer.Token)(Whitespace 2074 1),
  (*lexer.Token)(Equals 2075 1),
  (*lexer.Token)(Whitespace 2076 1),
  (*lexer.Token)(VariableName 2077 5),
  (*lexer.Token)(Arrow 2082 2),
  (*lexer.Token)(Name 2084 13),
  (*lexer.Token)(OpenParenthesis 2097 1),
  (*lexer.Token)(CloseParenthesis 2098 1),
  (*lexer.Token)(Dot 2099 1),
  (*lexer.Token)(StringLiteral 2100 9),
  (*lexer.Token)(Semicolon 2109 1),
  (*lexer.Token)(Whitespace 2110 10),
  (*lexer.Token)(VariableName 2120 7),
  (*lexer.Token)(Arrow 2127 2),
  (*lexer.Token)(Name 2129 4),
  (*lexer.Token)(OpenParenthesis 2133 1),
  (*lexer.Token)(VariableName 2134 8),
  (*lexer.Token)(Dot 2142 1),
  (*lexer.Token)(StringLiteral 2143 15),
  (*lexer.Token)(Dot 2158 1),
  (*lexer.Token)(Name 2159 4),
  (*lexer.Token)(ColonColon 2163 2),
  (*lexer.Token)(Name 2165 11),
  (*lexer.Token)(Comma 2176 1),
  (*lexer.Token)(Whitespace 2177 1),
  (*lexer.Token)(StringLiteral 2178 6),
  (*lexer.Token)(CloseParenthesis 2184 1),
  (*lexer.Token)(Semicolon 2185 1),
  (*lexer.Token)(Whitespace 2186 9),
  (*lexer.Token)(VariableName 2195 7),
  (*lexer.Token)(Arrow 2202 2),
  (*lexer.Token)(Name 2204 4),
  (*lexer.Token)(OpenParenthesis 2208 1),
  (*lexer.Token)(VariableName 2209 8),
  (*lexer.Token)(Dot 2217 1),
  (*lexer.Token)(StringLiteral 2218 14),
  (*lexer.Token)(Dot 2232 1),
  (*lexer.Token)(VariableName 2233 5),
  (*lexer.Token)(Arrow 2238 2),
  (*lexer.Token)(Name 2240 11),
  (*lexer.Token)(Dot 2251 1),
  (*lexer.Token)(StringLiteral 2252 7),
  (*lexer.Token)(Dot 2259 1),
  (*lexer.Token)(Name 2260 4),
  (*lexer.Token)(ColonColon 2264 2),
  (*lexer.Token)(Name 2266 11),
  (*lexer.Token)(Comma 2277 1),
  (*lexer.Token)(Whitespace 2278 1),
  (*lexer.Token)(StringLiteral 2279 6),
  (*lexer.Token)(CloseParenthesis 2285 1),
  (*lexer.Token)(Semicolon 2286 1),
  (*lexer.Token)(Whitespace 2287 9),
  (*lexer.Token)(VariableName 2296 7),
  (*lexer.Token)(Arrow 2303 2),
  (*lexer.Token)(Name 2305 4),
  (*lexer.Token)(OpenParenthesis 2309 1),
  (*lexer.Token)(VariableName 2310 8),
  (*lexer.Token)(Dot 2318 1),
  (*lexer.Token)(StringLiteral 2319 13),
  (*lexer.Token)(Dot 2332 1),
  (*lexer.Token)(Name 2333 4),
  (*lexer.Token)(ColonColon 2337 2),
  (*lexer.Token)(Name 2339 11),
  (*lexer.Token)(Comma 2350 1),
  (*lexer.Token)(Whitespace 2351 1),
  (*lexer.Token)(StringLiteral 2352 6),
  (*lexer.Token)(CloseParenthesis 2358 1),
  (*lexer.Token)(Semicolon 2359 1),
  (*lexer.Token)(Whitespace 2360 9),
  (*lexer.Token)(VariableName 2369 7),
  (*lexer.Token)(Arrow 2376 2),
  (*lexer.Token)(Name 2378 4),
  (*lexer.Token)(OpenParenthesis 2382 1),
  (*lexer.Token)(VariableName 2383 8),
  (*lexer.Token)(Dot 2391 1),
  (*lexer.Token)(StringLiteral 2392 14),
  (*lexer.Token)(Dot 2406 1),
  (*lexer.Token)(VariableName 2407 5),
  (*lexer.Token)(Arrow 2412 2),
  (*lexer.Token)(Name 2414 11),
  (*lexer.Token)(Dot 2425 1),
  (*lexer.Token)(Name 2426 4),
  (*lexer.Token)(ColonColon 2430 2),
  (*lexer.Token)(Name 2432 11),
  (*lexer.Token)(Comma 2443 1),
  (*lexer.Token)(Whitespace 2444 1),
  (*lexer.Token)(StringLiteral 2445 6),
  (*lexer.Token)(CloseParenthesis 2451 1),
  (*lexer.Token)(Semicolon 2452 1),
  (*lexer.Token)(Whitespace 2453 5),
  (*lexer.Token)(CloseBrace 2458 1),
  (*lexer.Token)(Whitespace 2459 6),
  (*lexer.Token)(Protected 2465 9),
  (*lexer.Token)(Whitespace 2474 1),
  (*lexer.Token)(Function 2475 8),
  (*lexer.Token)(Whitespace 2483 1),
  (*lexer.Token)(Name 2484 15),
  (*lexer.Token)(OpenParenthesis 2499 1),
  (*lexer.Token)(Name 2500 22),
  (*lexer.Token)(Whitespace 2522 1),
  (*lexer.Token)(VariableName 2523 7),
  (*lexer.Token)(CloseParenthesis 2530 1),
  (*lexer.Token)(Colon 2531 1),
  (*lexer.Token)(Whitespace 2532 1),
  (*lexer.Token)(Name 2533 4),
  (*lexer.Token)(Whitespace 2537 5),
  (*lexer.Token)(OpenBrace 2542 1),
  (*lexer.Token)(Whitespace 2543 9),
  (*lexer.Token)(VariableName 2552 8),
  (*lexer.Token)(Whitespace 2560 1),
  (*lexer.Token)(Equals 2561 1),
  (*lexer.Token)(Whitespace 2562 1),
  (*lexer.Token)(VariableName 2563 5),
  (*lexer.Token)(Arrow 2568 2),
  (*lexer.Token)(Name 2570 13),
  (*lexer.Token)(OpenParenthesis 2583 1),
  (*lexer.Token)(CloseParenthesis 2584 1),
  (*lexer.Token)(Dot 2585 1),
  (*lexer.Token)(StringLiteral 2586 9),
  (*lexer.Token)(Semicolon 2595 1),
  (*lexer.Token)(Whitespace 2596 10),
  (*lexer.Token)(VariableName 2606 7),
  (*lexer.Token)(Arrow 2613 2),
  (*lexer.Token)(Name 2615 6),
  (*lexer.Token)(OpenParenthesis 2621 1),
  (*lexer.Token)(VariableName 2622 8),
  (*lexer.Token)(Dot 2630 1),
  (*lexer.Token)(StringLiteral 2631 12),
  (*lexer.Token)(Dot 2643 1),
  (*lexer.Token)(VariableName 2644 5),
  (*lexer.Token)(Arrow 2649 2),
  (*lexer.Token)(Name 2651 11),
  (*lexer.Token)(Dot 2662 1),
  (*lexer.Token)(StringLiteral 2663 7),
  (*lexer.Token)(Dot 2670 1),
  (*lexer.Token)(Name 2671 4),
  (*lexer.Token)(ColonColon 2675 2),
  (*lexer.Token)(Name 2677 11),
  (*lexer.Token)(Comma 2688 1),
  (*lexer.Token)(Whitespace 2689 1),
  (*lexer.Token)(StringLiteral 2690 3),
  (*lexer.Token)(Comma 2693 1),
  (*lexer.Token)(Whitespace 2694 1),
  (*lexer.Token)(StringLiteral 2695 6),
  (*lexer.Token)(CloseParenthesis 2701 1),
  (*lexer.Token)(Semicolon 2702 1),
  (*lexer.Token)(Whitespace 2703 9),
  (*lexer.Token)(VariableName 2712 7),
  (*lexer.Token)(Arrow 2719 2),
  (*lexer.Token)(Name 2721 6),
  (*lexer.Token)(OpenParenthesis 2727 1),
  (*lexer.Token)(VariableName 2728 8),
  (*lexer.Token)(Dot 2736 1),
  (*lexer.Token)(StringLiteral 2737 13),
  (*lexer.Token)(Dot 2750 1),
  (*lexer.Token)(Name 2751 4),
  (*lexer.Token)(ColonColon 2755 2),
  (*lexer.Token)(Name 2757 11),
  (*lexer.Token)(Comma 2768 1),
  (*lexer.Token)(Whitespace 2769 1),
  (*lexer.Token)(StringLiteral 2770 3),
  (*lexer.Token)(Comma 2773 1),
  (*lexer.Token)(Whitespace 2774 1),
  (*lexer.Token)(StringLiteral 2775 6),
  (*lexer.Token)(CloseParenthesis 2781 1),
  (*lexer.Token)(Semicolon 2782 1),
  (*lexer.Token)(Whitespace 2783 9),
  (*lexer.Token)(VariableName 2792 7),
  (*lexer.Token)(Arrow 2799 2),
  (*lexer.Token)(Name 2801 6),
  (*lexer.Token)(OpenParenthesis 2807 1),
  (*lexer.Token)(VariableName 2808 8),
  (*lexer.Token)(Dot 2816 1),
  (*lexer.Token)(StringLiteral 2817 11),
  (*lexer.Token)(Dot 2828 1),
  (*lexer.Token)(Name 2829 4),
  (*lexer.Token)(ColonColon 2833 2),
  (*lexer.Token)(Name 2835 11),
  (*lexer.Token)(Comma 2846 1),
  (*lexer.Token)(Whitespace 2847 1),
  (*lexer.Token)(StringLiteral 2848 3),
  (*lexer.Token)(Comma 2851 1),
  (*lexer.Token)(Whitespace 2852 1),
  (*lexer.Token)(StringLiteral 2853 6),
  (*lexer.Token)(CloseParenthesis 2859 1),
  (*lexer.Token)(Semicolon 2860 1),
  (*lexer.Token)(Whitespace 2861 5),
  (*lexer.Token)(CloseBrace 2866 1),
  (*lexer.Token)(Whitespace 2867 1),
  (*lexer.Token)(CloseBrace 2868 1),
  (*lexer.Token)(Whitespace 2869 1),
  (*lexer.Token)(EndOfFile 2870 0)
}
(*phrase.Phrase)({
  Type: (phrase.PhraseType) StatementList,
  Children: ([]phrase.AstNode) (len=26) {
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) InlineText,
      Children: ([]phrase.AstNode) (len=1) {
        (*lexer.Token)(OpenTag 0 6)
      }
    }),
    (*lexer.Token)(Whitespace 6 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceDefinition,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Namespace 7 9),
        (*lexer.Token)(Whitespace 16 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceName,
          Children: ([]phrase.AstNode) (len=1) {
            (*lexer.Token)(Name 17 3)
          }
        }),
        (*lexer.Token)(Semicolon 20 1)
      }
    }),
    (*lexer.Token)(Whitespace 21 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 23 3),
        (*lexer.Token)(Whitespace 26 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=9) {
                    (*lexer.Token)(Name 27 7),
                    (*lexer.Token)(Backslash 34 1),
                    (*lexer.Token)(Name 35 6),
                    (*lexer.Token)(Backslash 41 1),
                    (*lexer.Token)(Name 42 15),
                    (*lexer.Token)(Backslash 57 1),
                    (*lexer.Token)(Name 58 6),
                    (*lexer.Token)(Backslash 64 1),
                    (*lexer.Token)(Name 65 16)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 81 1)
      }
    }),
    (*lexer.Token)(Whitespace 82 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 83 3),
        (*lexer.Token)(Whitespace 86 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=9) {
                    (*lexer.Token)(Name 87 7),
                    (*lexer.Token)(Backslash 94 1),
                    (*lexer.Token)(Name 95 9),
                    (*lexer.Token)(Backslash 104 1),
                    (*lexer.Token)(Name 105 6),
                    (*lexer.Token)(Backslash 111 1),
                    (*lexer.Token)(Name 112 6),
                    (*lexer.Token)(Backslash 118 1),
                    (*lexer.Token)(Name 119 15)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 134 1)
      }
    }),
    (*lexer.Token)(Whitespace 135 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 136 3),
        (*lexer.Token)(Whitespace 139 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=9) {
                    (*lexer.Token)(Name 140 7),
                    (*lexer.Token)(Backslash 147 1),
                    (*lexer.Token)(Name 148 9),
                    (*lexer.Token)(Backslash 157 1),
                    (*lexer.Token)(Name 158 6),
                    (*lexer.Token)(Backslash 164 1),
                    (*lexer.Token)(Name 165 8),
                    (*lexer.Token)(Backslash 173 1),
                    (*lexer.Token)(Name 174 12)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 186 1)
      }
    }),
    (*lexer.Token)(Whitespace 187 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 188 3),
        (*lexer.Token)(Whitespace 191 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=7) {
                    (*lexer.Token)(Name 192 7),
                    (*lexer.Token)(Backslash 199 1),
                    (*lexer.Token)(Name 200 9),
                    (*lexer.Token)(Backslash 209 1),
                    (*lexer.Token)(Name 210 19),
                    (*lexer.Token)(Backslash 229 1),
                    (*lexer.Token)(Name 230 16)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 246 1)
      }
    }),
    (*lexer.Token)(Whitespace 247 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 248 3),
        (*lexer.Token)(Whitespace 251 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=3) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=7) {
                    (*lexer.Token)(Name 252 7),
                    (*lexer.Token)(Backslash 259 1),
                    (*lexer.Token)(Name 260 9),
                    (*lexer.Token)(Backslash 269 1),
                    (*lexer.Token)(Name 270 10),
                    (*lexer.Token)(Backslash 280 1),
                    (*lexer.Token)(Name 281 6)
                  }
                }),
                (*lexer.Token)(Whitespace 287 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceAliasingClause,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*lexer.Token)(As 288 2),
                    (*lexer.Token)(Whitespace 290 1),
                    (*lexer.Token)(Name 291 10)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 301 1)
      }
    }),
    (*lexer.Token)(Whitespace 302 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 303 3),
        (*lexer.Token)(Whitespace 306 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=7) {
                    (*lexer.Token)(Name 307 7),
                    (*lexer.Token)(Backslash 314 1),
                    (*lexer.Token)(Name 315 9),
                    (*lexer.Token)(Backslash 324 1),
                    (*lexer.Token)(Name 325 7),
                    (*lexer.Token)(Backslash 332 1),
                    (*lexer.Token)(Name 333 22)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 355 1)
      }
    }),
    (*lexer.Token)(Whitespace 356 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 357 3),
        (*lexer.Token)(Whitespace 360 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=7) {
                    (*lexer.Token)(Name 361 7),
                    (*lexer.Token)(Backslash 368 1),
                    (*lexer.Token)(Name 369 9),
                    (*lexer.Token)(Backslash 378 1),
                    (*lexer.Token)(Name 379 14),
                    (*lexer.Token)(Backslash 393 1),
                    (*lexer.Token)(Name 394 7)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 401 1)
      }
    }),
    (*lexer.Token)(Whitespace 402 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 403 3),
        (*lexer.Token)(Whitespace 406 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=7) {
                    (*lexer.Token)(Name 407 7),
                    (*lexer.Token)(Backslash 414 1),
                    (*lexer.Token)(Name 415 9),
                    (*lexer.Token)(Backslash 424 1),
                    (*lexer.Token)(Name 425 14),
                    (*lexer.Token)(Backslash 439 1),
                    (*lexer.Token)(Name 440 8)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 448 1)
      }
    }),
    (*lexer.Token)(Whitespace 449 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 450 3),
        (*lexer.Token)(Whitespace 453 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=9) {
                    (*lexer.Token)(Name 454 7),
                    (*lexer.Token)(Backslash 461 1),
                    (*lexer.Token)(Name 462 9),
                    (*lexer.Token)(Backslash 471 1),
                    (*lexer.Token)(Name 472 10),
                    (*lexer.Token)(Backslash 482 1),
                    (*lexer.Token)(Name 483 9),
                    (*lexer.Token)(Backslash 492 1),
                    (*lexer.Token)(Name 493 21)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 514 1)
      }
    }),
    (*lexer.Token)(Whitespace 515 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 516 3),
        (*lexer.Token)(Whitespace 519 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=9) {
                    (*lexer.Token)(Name 520 7),
                    (*lexer.Token)(Backslash 527 1),
                    (*lexer.Token)(Name 528 9),
                    (*lexer.Token)(Backslash 537 1),
                    (*lexer.Token)(Name 538 10),
                    (*lexer.Token)(Backslash 548 1),
                    (*lexer.Token)(Name 549 9),
                    (*lexer.Token)(Backslash 558 1),
                    (*lexer.Token)(Name 559 13)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 572 1)
      }
    }),
    (*lexer.Token)(Whitespace 573 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ClassDeclaration,
      Children: ([]phrase.AstNode) (len=3) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ClassDeclarationHeader,
          Children: ([]phrase.AstNode) (len=5) {
            (*lexer.Token)(Class 575 5),
            (*lexer.Token)(Whitespace 580 1),
            (*lexer.Token)(Name 581 6),
            (*lexer.Token)(Whitespace 587 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ClassBaseClause,
              Children: ([]phrase.AstNode) (len=3) {
                (*lexer.Token)(Extends 588 7),
                (*lexer.Token)(Whitespace 595 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) QualifiedName,
                  Children: ([]phrase.AstNode) (len=1) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) NamespaceName,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(Name 596 10)
                      }
                    })
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Whitespace 606 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ClassDeclarationBody,
          Children: ([]phrase.AstNode) (len=5) {
            (*lexer.Token)(OpenBrace 607 1),
            (*lexer.Token)(Whitespace 608 5),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ClassMemberDeclarationList,
              Children: ([]phrase.AstNode) (len=13) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) TraitUseClause,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*lexer.Token)(Use 613 3),
                    (*lexer.Token)(Whitespace 616 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) QualifiedNameList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) QualifiedName,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) NamespaceName,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Name 617 16)
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) TraitUseSpecification,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(Semicolon 633 1)
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 634 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ClassConstDeclaration,
                  Children: ([]phrase.AstNode) (len=6) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MemberModifierList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(Private 640 7)
                      }
                    }),
                    (*lexer.Token)(Whitespace 647 1),
                    (*lexer.Token)(Const 648 5),
                    (*lexer.Token)(Whitespace 653 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ClassConstElementList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ClassConstElement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) Identifier,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Name 654 11)
                              }
                            }),
                            (*lexer.Token)(Whitespace 665 1),
                            (*lexer.Token)(Equals 666 1),
                            (*lexer.Token)(Whitespace 667 1),
                            (*lexer.Token)(StringLiteral 668 21)
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Semicolon 689 1)
                  }
                }),
                (*lexer.Token)(Whitespace 690 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=8) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Public 696 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 702 1),
                        (*lexer.Token)(Function 703 8),
                        (*lexer.Token)(Whitespace 711 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 712 6)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 718 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclarationList,
                          Children: ([]phrase.AstNode) (len=7) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 719 7)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 726 1),
                                (*lexer.Token)(VariableName 727 8)
                              }
                            }),
                            (*lexer.Token)(Comma 735 1),
                            (*lexer.Token)(Whitespace 736 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=5) {
                                (*lexer.Token)(VariableName 737 5),
                                (*lexer.Token)(Whitespace 742 1),
                                (*lexer.Token)(Equals 743 1),
                                (*lexer.Token)(Whitespace 744 1),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                  Children: ([]phrase.AstNode) (len=3) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 745 4)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(ColonColon 749 2),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ScopedMemberName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) Identifier,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 751 14)
                                          }
                                        })
                                      }
                                    })
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Comma 765 1),
                            (*lexer.Token)(Whitespace 766 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=5) {
                                (*lexer.Token)(VariableName 767 6),
                                (*lexer.Token)(Whitespace 773 1),
                                (*lexer.Token)(Equals 774 1),
                                (*lexer.Token)(Whitespace 775 1),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ConstantAccessExpression,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 776 4)
                                          }
                                        })
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(CloseParenthesis 780 1)
                      }
                    }),
                    (*lexer.Token)(Whitespace 781 5),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 786 1),
                            (*lexer.Token)(Whitespace 787 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TryStatement,
                                  Children: ([]phrase.AstNode) (len=5) {
                                    (*lexer.Token)(Try 796 3),
                                    (*lexer.Token)(Whitespace 799 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=9) {
                                        (*lexer.Token)(OpenBrace 800 1),
                                        (*lexer.Token)(Whitespace 801 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=3) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ExpressionStatement,
                                              Children: ([]phrase.AstNode) (len=2) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 814 9)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 823 1),
                                                    (*lexer.Token)(Equals 824 1),
                                                    (*lexer.Token)(Whitespace 825 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedCallExpression,
                                                      Children: ([]phrase.AstNode) (len=6) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) QualifiedName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) NamespaceName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 826 6)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(ColonColon 832 2),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ScopedMemberName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) Identifier,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 834 6)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenParenthesis 840 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                          Children: ([]phrase.AstNode) (len=7) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 841 8)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Comma 849 1),
                                                            (*lexer.Token)(Whitespace 850 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 851 5)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Comma 856 1),
                                                            (*lexer.Token)(Whitespace 857 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 858 6)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseParenthesis 864 1)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 865 1)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 866 14),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ReturnStatement,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*lexer.Token)(Return 880 6),
                                                (*lexer.Token)(Whitespace 886 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(VariableName 887 9)
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 896 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 897 9),
                                        (*lexer.Token)(Comment 906 65),
                                        (*lexer.Token)(Whitespace 971 9),
                                        (*lexer.Token)(Comment 980 54),
                                        (*lexer.Token)(Whitespace 1034 9),
                                        (*lexer.Token)(CloseBrace 1043 1)
                                      }
                                    }),
                                    (*lexer.Token)(Whitespace 1044 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CatchClauseList,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) CatchClause,
                                          Children: ([]phrase.AstNode) (len=9) {
                                            (*lexer.Token)(Catch 1045 5),
                                            (*lexer.Token)(Whitespace 1050 1),
                                            (*lexer.Token)(OpenParenthesis 1051 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) CatchNameList,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) QualifiedName,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) NamespaceName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(Name 1052 13)
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 1065 1),
                                            (*lexer.Token)(VariableName 1066 2),
                                            (*lexer.Token)(CloseParenthesis 1068 1),
                                            (*lexer.Token)(Whitespace 1069 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) CompoundStatement,
                                              Children: ([]phrase.AstNode) (len=7) {
                                                (*lexer.Token)(OpenBrace 1070 1),
                                                (*lexer.Token)(Whitespace 1071 13),
                                                (*lexer.Token)(Comment 1084 54),
                                                (*lexer.Token)(Whitespace 1138 13),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) StatementList,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) IfStatement,
                                                      Children: ([]phrase.AstNode) (len=7) {
                                                        (*lexer.Token)(If 1151 2),
                                                        (*lexer.Token)(Whitespace 1153 1),
                                                        (*lexer.Token)(OpenParenthesis 1154 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) InstanceOfExpression,
                                                          Children: ([]phrase.AstNode) (len=5) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 1155 2)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Whitespace 1157 1),
                                                            (*lexer.Token)(InstanceOf 1158 10),
                                                            (*lexer.Token)(Whitespace 1168 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) InstanceofTypeDesignator,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(Name 1169 21)
                                                                      }
                                                                    })
                                                                  }
                                                                })
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseParenthesis 1190 1),
                                                        (*lexer.Token)(Whitespace 1191 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) CompoundStatement,
                                                          Children: ([]phrase.AstNode) (len=5) {
                                                            (*lexer.Token)(OpenBrace 1192 1),
                                                            (*lexer.Token)(Whitespace 1193 17),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) StatementList,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ReturnStatement,
                                                                  Children: ([]phrase.AstNode) (len=4) {
                                                                    (*lexer.Token)(Return 1210 6),
                                                                    (*lexer.Token)(Whitespace 1216 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ObjectCreationExpression,
                                                                      Children: ([]phrase.AstNode) (len=6) {
                                                                        (*lexer.Token)(New 1217 3),
                                                                        (*lexer.Token)(Whitespace 1220 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) ClassTypeDesignator,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) QualifiedName,
                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*lexer.Token)(Name 1221 8)
                                                                                  }
                                                                                })
                                                                              }
                                                                            })
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(OpenParenthesis 1229 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                          Children: ([]phrase.AstNode) (len=4) {
                                                                            (*lexer.Token)(StringLiteral 1230 2),
                                                                            (*lexer.Token)(Comma 1232 1),
                                                                            (*lexer.Token)(Whitespace 1233 1),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*lexer.Token)(Name 1234 8)
                                                                                      }
                                                                                    })
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(ColonColon 1242 2),
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) ScopedMemberName,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) Identifier,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*lexer.Token)(Name 1244 14)
                                                                                      }
                                                                                    })
                                                                                  }
                                                                                })
                                                                              }
                                                                            })
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(CloseParenthesis 1258 1)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Semicolon 1259 1)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(Whitespace 1260 13),
                                                            (*lexer.Token)(CloseBrace 1273 1)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 1274 14),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ReturnStatement,
                                                      Children: ([]phrase.AstNode) (len=4) {
                                                        (*lexer.Token)(Return 1288 6),
                                                        (*lexer.Token)(Whitespace 1294 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ObjectCreationExpression,
                                                          Children: ([]phrase.AstNode) (len=6) {
                                                            (*lexer.Token)(New 1295 3),
                                                            (*lexer.Token)(Whitespace 1298 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ClassTypeDesignator,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(Name 1299 8)
                                                                      }
                                                                    })
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(OpenParenthesis 1307 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ArgumentExpressionList,
                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                (*lexer.Token)(StringLiteral 1308 2),
                                                                (*lexer.Token)(Comma 1310 1),
                                                                (*lexer.Token)(Whitespace 1311 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) QualifiedName,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) NamespaceName,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(Name 1312 8)
                                                                          }
                                                                        })
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(ColonColon 1320 2),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) Identifier,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(Name 1322 26)
                                                                          }
                                                                        })
                                                                      }
                                                                    })
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseParenthesis 1348 1)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Semicolon 1349 1)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Whitespace 1350 9),
                                                (*lexer.Token)(CloseBrace 1359 1)
                                              }
                                            })
                                          }
                                        })
                                      }
                                    })
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 1360 5),
                            (*lexer.Token)(CloseBrace 1365 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 1366 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=8) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Public 1372 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 1378 1),
                        (*lexer.Token)(Function 1379 8),
                        (*lexer.Token)(Whitespace 1387 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 1388 15)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 1403 1),
                        (*lexer.Token)(CloseParenthesis 1404 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 1405 1),
                            (*lexer.Token)(Whitespace 1406 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 1407 8)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 1415 5),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 1420 1),
                            (*lexer.Token)(Whitespace 1421 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 1430 9)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 1439 1),
                                        (*lexer.Token)(Equals 1440 1),
                                        (*lexer.Token)(Whitespace 1441 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) RequireExpression,
                                          Children: ([]phrase.AstNode) (len=3) {
                                            (*lexer.Token)(Require 1442 7),
                                            (*lexer.Token)(Whitespace 1449 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) MethodCallExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 1450 5)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Arrow 1455 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) MemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(Name 1457 13)
                                                      }
                                                    }),
                                                    (*lexer.Token)(OpenParenthesis 1470 1),
                                                    (*lexer.Token)(CloseParenthesis 1471 1)
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 1472 1),
                                                (*lexer.Token)(StringLiteral 1473 21)
                                              }
                                            })
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 1494 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1495 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ForeachStatement,
                                  Children: ([]phrase.AstNode) (len=13) {
                                    (*lexer.Token)(ForEach 1504 7),
                                    (*lexer.Token)(Whitespace 1511 1),
                                    (*lexer.Token)(OpenParenthesis 1512 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ForeachCollection,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 1513 9)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(Whitespace 1522 1),
                                    (*lexer.Token)(As 1523 2),
                                    (*lexer.Token)(Whitespace 1525 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ForeachKey,
                                      Children: ([]phrase.AstNode) (len=3) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 1526 6)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 1532 1),
                                        (*lexer.Token)(FatArrow 1533 2)
                                      }
                                    }),
                                    (*lexer.Token)(Whitespace 1535 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ForeachValue,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 1536 5)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 1541 1),
                                    (*lexer.Token)(Whitespace 1542 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 1543 1),
                                        (*lexer.Token)(Whitespace 1544 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) IfStatement,
                                              Children: ([]phrase.AstNode) (len=7) {
                                                (*lexer.Token)(If 1557 2),
                                                (*lexer.Token)(Whitespace 1559 1),
                                                (*lexer.Token)(OpenParenthesis 1560 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) CoalesceExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SubscriptExpression,
                                                      Children: ([]phrase.AstNode) (len=4) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(VariableName 1561 5)
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenBracket 1566 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) PropertyAccessExpression,
                                                          Children: ([]phrase.AstNode) (len=3) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 1567 5)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Arrow 1572 2),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) MemberName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 1574 11)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseBracket 1585 1)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 1586 1),
                                                    (*lexer.Token)(QuestionQuestion 1587 2),
                                                    (*lexer.Token)(Whitespace 1589 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) CoalesceExpression,
                                                      Children: ([]phrase.AstNode) (len=5) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) SubscriptExpression,
                                                          Children: ([]phrase.AstNode) (len=4) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 1590 5)
                                                              }
                                                            }),
                                                            (*lexer.Token)(OpenBracket 1595 1),
                                                            (*lexer.Token)(StringLiteral 1596 5),
                                                            (*lexer.Token)(CloseBracket 1601 1)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Whitespace 1602 1),
                                                        (*lexer.Token)(QuestionQuestion 1603 2),
                                                        (*lexer.Token)(Whitespace 1605 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ConstantAccessExpression,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) QualifiedName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(Name 1606 5)
                                                                  }
                                                                })
                                                              }
                                                            })
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(CloseParenthesis 1611 1),
                                                (*lexer.Token)(Whitespace 1612 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) CompoundStatement,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*lexer.Token)(OpenBrace 1613 1),
                                                    (*lexer.Token)(Whitespace 1614 17),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) StatementList,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ExpressionStatement,
                                                          Children: ([]phrase.AstNode) (len=2) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) YieldExpression,
                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                (*lexer.Token)(Yield 1631 5),
                                                                (*lexer.Token)(Whitespace 1636 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ObjectCreationExpression,
                                                                  Children: ([]phrase.AstNode) (len=5) {
                                                                    (*lexer.Token)(New 1637 3),
                                                                    (*lexer.Token)(Whitespace 1640 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ClassTypeDesignator,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(VariableName 1641 6)
                                                                          }
                                                                        })
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(OpenParenthesis 1647 1),
                                                                    (*lexer.Token)(CloseParenthesis 1648 1)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(Semicolon 1649 1)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 1650 13),
                                                    (*lexer.Token)(CloseBrace 1663 1)
                                                  }
                                                })
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 1664 9),
                                        (*lexer.Token)(CloseBrace 1673 1)
                                      }
                                    })
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 1674 5),
                            (*lexer.Token)(CloseBrace 1679 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 1680 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=8) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Public 1686 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 1692 1),
                        (*lexer.Token)(Function 1693 8),
                        (*lexer.Token)(Whitespace 1701 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 1702 13)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 1715 1),
                        (*lexer.Token)(CloseParenthesis 1716 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 1717 1),
                            (*lexer.Token)(Whitespace 1718 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 1719 6)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 1725 5),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 1730 1),
                            (*lexer.Token)(Whitespace 1731 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ReturnStatement,
                                  Children: ([]phrase.AstNode) (len=4) {
                                    (*lexer.Token)(Return 1740 6),
                                    (*lexer.Token)(Whitespace 1746 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                      Children: ([]phrase.AstNode) (len=4) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) FullyQualifiedName,
                                          Children: ([]phrase.AstNode) (len=2) {
                                            (*lexer.Token)(Backslash 1747 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) NamespaceName,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(Name 1748 7)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 1755 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(DirectoryConstant 1756 7)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 1763 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 1764 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 1765 5),
                            (*lexer.Token)(CloseBrace 1770 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 1771 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=9) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Protected 1777 9)
                          }
                        }),
                        (*lexer.Token)(Whitespace 1786 1),
                        (*lexer.Token)(Function 1787 8),
                        (*lexer.Token)(Whitespace 1795 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 1796 18)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 1814 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclarationList,
                          Children: ([]phrase.AstNode) (len=4) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 1815 16)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1831 1),
                                (*lexer.Token)(VariableName 1832 10)
                              }
                            }),
                            (*lexer.Token)(Comma 1842 1),
                            (*lexer.Token)(Whitespace 1843 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 1844 15)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1859 1),
                                (*lexer.Token)(VariableName 1860 7)
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(CloseParenthesis 1867 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 1868 1),
                            (*lexer.Token)(Whitespace 1869 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 1870 4)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 1874 5),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 1879 1),
                            (*lexer.Token)(Whitespace 1880 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=13) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 1889 10)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 1899 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 1901 11)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 1912 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ObjectCreationExpression,
                                              Children: ([]phrase.AstNode) (len=6) {
                                                (*lexer.Token)(New 1913 3),
                                                (*lexer.Token)(Whitespace 1916 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassTypeDesignator,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 1917 12)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(OpenParenthesis 1929 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ArgumentExpressionList,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                      Children: ([]phrase.AstNode) (len=3) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) MethodCallExpression,
                                                          Children: ([]phrase.AstNode) (len=5) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 1930 5)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Arrow 1935 2),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) MemberName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 1937 13)
                                                              }
                                                            }),
                                                            (*lexer.Token)(OpenParenthesis 1950 1),
                                                            (*lexer.Token)(CloseParenthesis 1951 1)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Dot 1952 1),
                                                        (*lexer.Token)(StringLiteral 1953 21)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(CloseParenthesis 1974 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 1975 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 1976 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1977 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 1986 10)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 1996 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 1998 12)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2010 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=4) {
                                            (*lexer.Token)(StringLiteral 2011 38),
                                            (*lexer.Token)(Comma 2049 1),
                                            (*lexer.Token)(Whitespace 2050 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ConstantAccessExpression,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) QualifiedName,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) NamespaceName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(Name 2051 4)
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2055 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2056 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2057 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2066 8)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 2074 1),
                                        (*lexer.Token)(Equals 2075 1),
                                        (*lexer.Token)(Whitespace 2076 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) AdditiveExpression,
                                          Children: ([]phrase.AstNode) (len=3) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) MethodCallExpression,
                                              Children: ([]phrase.AstNode) (len=5) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(VariableName 2077 5)
                                                  }
                                                }),
                                                (*lexer.Token)(Arrow 2082 2),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) MemberName,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(Name 2084 13)
                                                  }
                                                }),
                                                (*lexer.Token)(OpenParenthesis 2097 1),
                                                (*lexer.Token)(CloseParenthesis 2098 1)
                                              }
                                            }),
                                            (*lexer.Token)(Dot 2099 1),
                                            (*lexer.Token)(StringLiteral 2100 9)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2109 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2110 10),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2120 7)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 2127 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2129 4)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2133 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=4) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 2134 8)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Dot 2142 1),
                                                    (*lexer.Token)(StringLiteral 2143 15)
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 2158 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2159 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(ColonColon 2163 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) Identifier,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2165 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2176 1),
                                            (*lexer.Token)(Whitespace 2177 1),
                                            (*lexer.Token)(StringLiteral 2178 6)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2184 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2185 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2186 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2195 7)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 2202 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2204 4)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2208 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=4) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                      Children: ([]phrase.AstNode) (len=3) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) AdditiveExpression,
                                                          Children: ([]phrase.AstNode) (len=3) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 2209 8)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Dot 2217 1),
                                                            (*lexer.Token)(StringLiteral 2218 14)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Dot 2232 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) PropertyAccessExpression,
                                                          Children: ([]phrase.AstNode) (len=3) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 2233 5)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Arrow 2238 2),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) MemberName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 2240 11)
                                                              }
                                                            })
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Dot 2251 1),
                                                    (*lexer.Token)(StringLiteral 2252 7)
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 2259 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2260 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(ColonColon 2264 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) Identifier,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2266 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2277 1),
                                            (*lexer.Token)(Whitespace 2278 1),
                                            (*lexer.Token)(StringLiteral 2279 6)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2285 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2286 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2287 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2296 7)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 2303 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2305 4)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2309 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=4) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 2310 8)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Dot 2318 1),
                                                    (*lexer.Token)(StringLiteral 2319 13)
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 2332 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2333 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(ColonColon 2337 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) Identifier,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2339 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2350 1),
                                            (*lexer.Token)(Whitespace 2351 1),
                                            (*lexer.Token)(StringLiteral 2352 6)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2358 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2359 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2360 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2369 7)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 2376 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2378 4)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2382 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=4) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                      Children: ([]phrase.AstNode) (len=3) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(VariableName 2383 8)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Dot 2391 1),
                                                        (*lexer.Token)(StringLiteral 2392 14)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Dot 2406 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) PropertyAccessExpression,
                                                      Children: ([]phrase.AstNode) (len=3) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(VariableName 2407 5)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Arrow 2412 2),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) MemberName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2414 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 2425 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2426 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(ColonColon 2430 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) Identifier,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2432 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2443 1),
                                            (*lexer.Token)(Whitespace 2444 1),
                                            (*lexer.Token)(StringLiteral 2445 6)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2451 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2452 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 2453 5),
                            (*lexer.Token)(CloseBrace 2458 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 2459 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=9) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Protected 2465 9)
                          }
                        }),
                        (*lexer.Token)(Whitespace 2474 1),
                        (*lexer.Token)(Function 2475 8),
                        (*lexer.Token)(Whitespace 2483 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 2484 15)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 2499 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclarationList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2500 22)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2522 1),
                                (*lexer.Token)(VariableName 2523 7)
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(CloseParenthesis 2530 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 2531 1),
                            (*lexer.Token)(Whitespace 2532 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 2533 4)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 2537 5),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 2542 1),
                            (*lexer.Token)(Whitespace 2543 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=7) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2552 8)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 2560 1),
                                        (*lexer.Token)(Equals 2561 1),
                                        (*lexer.Token)(Whitespace 2562 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) AdditiveExpression,
                                          Children: ([]phrase.AstNode) (len=3) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) MethodCallExpression,
                                              Children: ([]phrase.AstNode) (len=5) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(VariableName 2563 5)
                                                  }
                                                }),
                                                (*lexer.Token)(Arrow 2568 2),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) MemberName,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(Name 2570 13)
                                                  }
                                                }),
                                                (*lexer.Token)(OpenParenthesis 2583 1),
                                                (*lexer.Token)(CloseParenthesis 2584 1)
                                              }
                                            }),
                                            (*lexer.Token)(Dot 2585 1),
                                            (*lexer.Token)(StringLiteral 2586 9)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2595 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2596 10),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2606 7)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 2613 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2615 6)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2621 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=7) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                      Children: ([]phrase.AstNode) (len=3) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) AdditiveExpression,
                                                          Children: ([]phrase.AstNode) (len=3) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 2622 8)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Dot 2630 1),
                                                            (*lexer.Token)(StringLiteral 2631 12)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Dot 2643 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) PropertyAccessExpression,
                                                          Children: ([]phrase.AstNode) (len=3) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 2644 5)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Arrow 2649 2),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) MemberName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 2651 11)
                                                              }
                                                            })
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Dot 2662 1),
                                                    (*lexer.Token)(StringLiteral 2663 7)
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 2670 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2671 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(ColonColon 2675 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) Identifier,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2677 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2688 1),
                                            (*lexer.Token)(Whitespace 2689 1),
                                            (*lexer.Token)(StringLiteral 2690 3),
                                            (*lexer.Token)(Comma 2693 1),
                                            (*lexer.Token)(Whitespace 2694 1),
                                            (*lexer.Token)(StringLiteral 2695 6)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2701 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2702 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2703 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2712 7)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 2719 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2721 6)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2727 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=7) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 2728 8)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Dot 2736 1),
                                                    (*lexer.Token)(StringLiteral 2737 13)
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 2750 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2751 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(ColonColon 2755 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) Identifier,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2757 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2768 1),
                                            (*lexer.Token)(Whitespace 2769 1),
                                            (*lexer.Token)(StringLiteral 2770 3),
                                            (*lexer.Token)(Comma 2773 1),
                                            (*lexer.Token)(Whitespace 2774 1),
                                            (*lexer.Token)(StringLiteral 2775 6)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2781 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2782 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2783 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) MethodCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2792 7)
                                          }
                                        }),
                                        (*lexer.Token)(Arrow 2799 2),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) MemberName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2801 6)
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2807 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=7) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 2808 8)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Dot 2816 1),
                                                    (*lexer.Token)(StringLiteral 2817 11)
                                                  }
                                                }),
                                                (*lexer.Token)(Dot 2828 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ClassConstantAccessExpression,
                                                  Children: ([]phrase.AstNode) (len=3) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2829 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(ColonColon 2833 2),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) Identifier,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 2835 11)
                                                          }
                                                        })
                                                      }
                                                    })
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2846 1),
                                            (*lexer.Token)(Whitespace 2847 1),
                                            (*lexer.Token)(StringLiteral 2848 3),
                                            (*lexer.Token)(Comma 2851 1),
                                            (*lexer.Token)(Whitespace 2852 1),
                                            (*lexer.Token)(StringLiteral 2853 6)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 2859 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2860 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 2861 5),
                            (*lexer.Token)(CloseBrace 2866 1)
                          }
                        })
                      }
                    })
                  }
                })
              }
            }),
            (*lexer.Token)(Whitespace 2867 1),
            (*lexer.Token)(CloseBrace 2868 1)
          }
        })
      }
    }),
    (*lexer.Token)(Whitespace 2869 1)
  }
})
