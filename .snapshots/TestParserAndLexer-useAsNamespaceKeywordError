([]struct { Type parser.TokenType; Offset int; Length int }) (len=11) {
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 6,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Use,
    Offset: (int) 10,
    Length: (int) 3
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 13,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 14,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 20,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) As,
    Offset: (int) 21,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 23,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Namespace,
    Offset: (int) 24,
    Length: (int) 9
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 33,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) EndOfFile,
    Offset: (int) 34,
    Length: (int) 0
  }
}
(*parser.Phrase)({
  Type: (parser.PhraseType) StatementList,
  Children: ([]parser.AstNode) (len=3) {
    (*parser.Phrase)({
      Type: (parser.PhraseType) InlineText,
      Children: ([]parser.AstNode) (len=1) {
        (*parser.Token)(OpenTag 0 6 ModeInitial)
      }
    }),
    (*parser.Token)(Whitespace 6 4 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) NamespaceUseDeclaration,
      Children: ([]parser.AstNode) (len=4) {
        (*parser.Token)(Use 10 3 ModeScripting),
        (*parser.Token)(Whitespace 13 1 ModeScripting),
        (*parser.Phrase)({
          Type: (parser.PhraseType) NamespaceUseClauseList,
          Children: ([]parser.AstNode) (len=1) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) NamespaceUseClause,
              Children: ([]parser.AstNode) (len=3) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 14 6 ModeScripting)
                  }
                }),
                (*parser.Token)(Whitespace 20 1 ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceAliasingClause,
                  Children: ([]parser.AstNode) (len=2) {
                    (*parser.Token)(As 21 2 ModeScripting),
                    (*parser.ParseError)({
                      Phrase: (parser.Phrase) {
                        Type: (parser.PhraseType) Error,
                        Children: ([]parser.AstNode) (len=2) {
                          (*parser.Token)(Whitespace 23 1 ModeScripting),
                          (*parser.Token)(Namespace 24 9 ModeScripting)
                        }
                      },
                      Unexpected: (*parser.Token)(Namespace 24 9 ModeScripting),
                      Expected: (parser.TokenType) Name
                    })
                  }
                })
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 33 1 ModeScripting)
      }
    })
  }
})
