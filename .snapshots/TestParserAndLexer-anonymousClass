([]struct { Type parser.TokenType; Offset int; Length int }) (len=13) {
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) VariableName,
    Offset: (int) 6,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 8,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Equals,
    Offset: (int) 9,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 10,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) New,
    Offset: (int) 11,
    Length: (int) 3
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 14,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Class,
    Offset: (int) 15,
    Length: (int) 5
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 20,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenBrace,
    Offset: (int) 21,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseBrace,
    Offset: (int) 22,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 23,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) EndOfFile,
    Offset: (int) 24,
    Length: (int) 0
  }
}
(*parser.Phrase)({
  Type: (parser.PhraseType) StatementList,
  Children: ([]parser.AstNode) (len=2) {
    (*parser.Phrase)({
      Type: (parser.PhraseType) InlineText,
      Children: ([]parser.AstNode) (len=1) {
        (*parser.Token)(OpenTag 0 6 ModeInitial)
      }
    }),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) SimpleAssignmentExpression,
          Children: ([]parser.AstNode) (len=5) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) SimpleVariable,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(VariableName 6 2 ModeScripting)
              }
            }),
            (*parser.Token)(Whitespace 8 1 ModeScripting),
            (*parser.Token)(Equals 9 1 ModeScripting),
            (*parser.Token)(Whitespace 10 1 ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) ObjectCreationExpression,
              Children: ([]parser.AstNode) (len=3) {
                (*parser.Token)(New 11 3 ModeScripting),
                (*parser.Token)(Whitespace 14 1 ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) AnonymousClassDeclaration,
                  Children: ([]parser.AstNode) (len=3) {
                    (*parser.Phrase)({
                      Type: (parser.PhraseType) AnonymousClassDeclarationHeader,
                      Children: ([]parser.AstNode) (len=1) {
                        (*parser.Token)(Class 15 5 ModeScripting)
                      }
                    }),
                    (*parser.Token)(Whitespace 20 1 ModeScripting),
                    (*parser.Phrase)({
                      Type: (parser.PhraseType) ClassDeclarationBody,
                      Children: ([]parser.AstNode) (len=2) {
                        (*parser.Token)(OpenBrace 21 1 ModeScripting),
                        (*parser.Token)(CloseBrace 22 1 ModeScripting ModeScripting)
                      }
                    })
                  }
                })
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 23 1 ModeScripting)
      }
    })
  }
})
