([]struct { Type lexer.TokenType; Offset int; Length int }) (len=97) {
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 7
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 7,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Fn,
    Offset: (int) 9,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenParenthesis,
    Offset: (int) 11,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 12,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 16,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 17,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseParenthesis,
    Offset: (int) 19,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 20,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) FatArrow,
    Offset: (int) 21,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 23,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 24,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 26,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 27,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Fn,
    Offset: (int) 29,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenParenthesis,
    Offset: (int) 31,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 32,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 34,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Equals,
    Offset: (int) 35,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 36,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) IntegerLiteral,
    Offset: (int) 37,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseParenthesis,
    Offset: (int) 39,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 40,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) FatArrow,
    Offset: (int) 41,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 43,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 44,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 46,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 47,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Static,
    Offset: (int) 49,
    Length: (int) 6
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 55,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Fn,
    Offset: (int) 56,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenParenthesis,
    Offset: (int) 58,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Ampersand,
    Offset: (int) 59,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 60,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseParenthesis,
    Offset: (int) 62,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 63,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) FatArrow,
    Offset: (int) 64,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 66,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 67,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 69,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 70,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Fn,
    Offset: (int) 72,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Ampersand,
    Offset: (int) 74,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenParenthesis,
    Offset: (int) 75,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 76,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseParenthesis,
    Offset: (int) 78,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 79,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) FatArrow,
    Offset: (int) 80,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 82,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 83,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 85,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 86,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Fn,
    Offset: (int) 88,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenParenthesis,
    Offset: (int) 90,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 91,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Comma,
    Offset: (int) 93,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 94,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Ellipsis,
    Offset: (int) 95,
    Length: (int) 3
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 98,
    Length: (int) 5
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseParenthesis,
    Offset: (int) 103,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 104,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) FatArrow,
    Offset: (int) 105,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 107,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 108,
    Length: (int) 5
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 113,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 114,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Fn,
    Offset: (int) 116,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenParenthesis,
    Offset: (int) 118,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseParenthesis,
    Offset: (int) 119,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Colon,
    Offset: (int) 120,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 121,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 122,
    Length: (int) 3
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 125,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) FatArrow,
    Offset: (int) 126,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 128,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 129,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 131,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 132,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 136,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 140,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Equals,
    Offset: (int) 141,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 142,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Fn,
    Offset: (int) 143,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenParenthesis,
    Offset: (int) 145,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 146,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseParenthesis,
    Offset: (int) 148,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 149,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) FatArrow,
    Offset: (int) 150,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 152,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 153,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 155,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Plus,
    Offset: (int) 156,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 157,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 158,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 160,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 161,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EndOfFile,
    Offset: (int) 163,
    Length: (int) 0
  }
}
(*phrase.Phrase)({
  Type: (phrase.PhraseType) StatementList,
  Children: ([]phrase.AstNode) (len=16) {
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) InlineText,
      Children: ([]phrase.AstNode) (len=1) {
        (*lexer.Token)(OpenTag 0 7)
      }
    }),
    (*lexer.Token)(Whitespace 7 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ArrowFunctionCreationExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ArrowFunctionHeader,
              Children: ([]phrase.AstNode) (len=4) {
                (*lexer.Token)(Fn 9 2),
                (*lexer.Token)(OpenParenthesis 11 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ParameterDeclarationList,
                  Children: ([]phrase.AstNode) (len=1) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ParameterDeclaration,
                      Children: ([]phrase.AstNode) (len=3) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) TypeDeclaration,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) QualifiedName,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) NamespaceName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*lexer.Token)(Name 12 4)
                                  }
                                })
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(Whitespace 16 1),
                        (*lexer.Token)(VariableName 17 2)
                      }
                    })
                  }
                }),
                (*lexer.Token)(CloseParenthesis 19 1)
              }
            }),
            (*lexer.Token)(Whitespace 20 1),
            (*lexer.Token)(FatArrow 21 2),
            (*lexer.Token)(Whitespace 23 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 24 2)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 26 1)
      }
    }),
    (*lexer.Token)(Whitespace 27 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ArrowFunctionCreationExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ArrowFunctionHeader,
              Children: ([]phrase.AstNode) (len=4) {
                (*lexer.Token)(Fn 29 2),
                (*lexer.Token)(OpenParenthesis 31 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ParameterDeclarationList,
                  Children: ([]phrase.AstNode) (len=1) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ParameterDeclaration,
                      Children: ([]phrase.AstNode) (len=5) {
                        (*lexer.Token)(VariableName 32 2),
                        (*lexer.Token)(Whitespace 34 1),
                        (*lexer.Token)(Equals 35 1),
                        (*lexer.Token)(Whitespace 36 1),
                        (*lexer.Token)(IntegerLiteral 37 2)
                      }
                    })
                  }
                }),
                (*lexer.Token)(CloseParenthesis 39 1)
              }
            }),
            (*lexer.Token)(Whitespace 40 1),
            (*lexer.Token)(FatArrow 41 2),
            (*lexer.Token)(Whitespace 43 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 44 2)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 46 1)
      }
    }),
    (*lexer.Token)(Whitespace 47 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ArrowFunctionCreationExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ArrowFunctionHeader,
              Children: ([]phrase.AstNode) (len=6) {
                (*lexer.Token)(Static 49 6),
                (*lexer.Token)(Whitespace 55 1),
                (*lexer.Token)(Fn 56 2),
                (*lexer.Token)(OpenParenthesis 58 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ParameterDeclarationList,
                  Children: ([]phrase.AstNode) (len=1) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ParameterDeclaration,
                      Children: ([]phrase.AstNode) (len=2) {
                        (*lexer.Token)(Ampersand 59 1),
                        (*lexer.Token)(VariableName 60 2)
                      }
                    })
                  }
                }),
                (*lexer.Token)(CloseParenthesis 62 1)
              }
            }),
            (*lexer.Token)(Whitespace 63 1),
            (*lexer.Token)(FatArrow 64 2),
            (*lexer.Token)(Whitespace 66 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 67 2)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 69 1)
      }
    }),
    (*lexer.Token)(Whitespace 70 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ArrowFunctionCreationExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ArrowFunctionHeader,
              Children: ([]phrase.AstNode) (len=5) {
                (*lexer.Token)(Fn 72 2),
                (*lexer.Token)(Ampersand 74 1),
                (*lexer.Token)(OpenParenthesis 75 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ParameterDeclarationList,
                  Children: ([]phrase.AstNode) (len=1) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ParameterDeclaration,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(VariableName 76 2)
                      }
                    })
                  }
                }),
                (*lexer.Token)(CloseParenthesis 78 1)
              }
            }),
            (*lexer.Token)(Whitespace 79 1),
            (*lexer.Token)(FatArrow 80 2),
            (*lexer.Token)(Whitespace 82 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 83 2)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 85 1)
      }
    }),
    (*lexer.Token)(Whitespace 86 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ArrowFunctionCreationExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ArrowFunctionHeader,
              Children: ([]phrase.AstNode) (len=4) {
                (*lexer.Token)(Fn 88 2),
                (*lexer.Token)(OpenParenthesis 90 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ParameterDeclarationList,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ParameterDeclaration,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(VariableName 91 2)
                      }
                    }),
                    (*lexer.Token)(Comma 93 1),
                    (*lexer.Token)(Whitespace 94 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ParameterDeclaration,
                      Children: ([]phrase.AstNode) (len=2) {
                        (*lexer.Token)(Ellipsis 95 3),
                        (*lexer.Token)(VariableName 98 5)
                      }
                    })
                  }
                }),
                (*lexer.Token)(CloseParenthesis 103 1)
              }
            }),
            (*lexer.Token)(Whitespace 104 1),
            (*lexer.Token)(FatArrow 105 2),
            (*lexer.Token)(Whitespace 107 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 108 5)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 113 1)
      }
    }),
    (*lexer.Token)(Whitespace 114 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ArrowFunctionCreationExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ArrowFunctionHeader,
              Children: ([]phrase.AstNode) (len=4) {
                (*lexer.Token)(Fn 116 2),
                (*lexer.Token)(OpenParenthesis 118 1),
                (*lexer.Token)(CloseParenthesis 119 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ReturnType,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*lexer.Token)(Colon 120 1),
                    (*lexer.Token)(Whitespace 121 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) TypeDeclaration,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) QualifiedName,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) NamespaceName,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Name 122 3)
                              }
                            })
                          }
                        })
                      }
                    })
                  }
                })
              }
            }),
            (*lexer.Token)(Whitespace 125 1),
            (*lexer.Token)(FatArrow 126 2),
            (*lexer.Token)(Whitespace 128 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 129 2)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 131 1)
      }
    }),
    (*lexer.Token)(Whitespace 132 4),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) SimpleAssignmentExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 136 4)
              }
            }),
            (*lexer.Token)(Whitespace 140 1),
            (*lexer.Token)(Equals 141 1),
            (*lexer.Token)(Whitespace 142 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ArrowFunctionCreationExpression,
              Children: ([]phrase.AstNode) (len=5) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ArrowFunctionHeader,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*lexer.Token)(Fn 143 2),
                    (*lexer.Token)(OpenParenthesis 145 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ParameterDeclarationList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclaration,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(VariableName 146 2)
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(CloseParenthesis 148 1)
                  }
                }),
                (*lexer.Token)(Whitespace 149 1),
                (*lexer.Token)(FatArrow 150 2),
                (*lexer.Token)(Whitespace 152 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) AdditiveExpression,
                  Children: ([]phrase.AstNode) (len=5) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) SimpleVariable,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(VariableName 153 2)
                      }
                    }),
                    (*lexer.Token)(Whitespace 155 1),
                    (*lexer.Token)(Plus 156 1),
                    (*lexer.Token)(Whitespace 157 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) SimpleVariable,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(VariableName 158 2)
                      }
                    })
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 160 1)
      }
    }),
    (*lexer.Token)(Whitespace 161 2)
  }
})
