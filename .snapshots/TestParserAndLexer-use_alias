([]struct { Type lexer.TokenType; Offset int; Length int }) (len=31) {
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 6
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 6,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Use,
    Offset: (int) 7,
    Length: (int) 3
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 10,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 11,
    Length: (int) 5
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Backslash,
    Offset: (int) 16,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 17,
    Length: (int) 7
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Backslash,
    Offset: (int) 24,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 25,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Backslash,
    Offset: (int) 29,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 30,
    Length: (int) 9
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 39,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) As,
    Offset: (int) 40,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 42,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 43,
    Length: (int) 9
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Comma,
    Offset: (int) 52,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 53,
    Length: (int) 5
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 58,
    Length: (int) 5
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Backslash,
    Offset: (int) 63,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 64,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Backslash,
    Offset: (int) 68,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 69,
    Length: (int) 9
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Backslash,
    Offset: (int) 78,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 79,
    Length: (int) 24
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 103,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) As,
    Offset: (int) 104,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 106,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Name,
    Offset: (int) 107,
    Length: (int) 24
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 131,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 132,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EndOfFile,
    Offset: (int) 133,
    Length: (int) 0
  }
}
(*phrase.Phrase)({
  Type: (phrase.PhraseType) StatementList,
  Children: ([]phrase.AstNode) (len=4) {
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) InlineText,
      Children: ([]phrase.AstNode) (len=1) {
        (*lexer.Token)(OpenTag 0 6 ModeInitial)
      }
    }),
    (*lexer.Token)(Whitespace 6 1 ModeScripting),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 7 3 ModeScripting),
        (*lexer.Token)(Whitespace 10 1 ModeScripting),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=4) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=3) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=7) {
                    (*lexer.Token)(Name 11 5 ModeScripting),
                    (*lexer.Token)(Backslash 16 1 ModeScripting),
                    (*lexer.Token)(Name 17 7 ModeScripting),
                    (*lexer.Token)(Backslash 24 1 ModeScripting),
                    (*lexer.Token)(Name 25 4 ModeScripting),
                    (*lexer.Token)(Backslash 29 1 ModeScripting),
                    (*lexer.Token)(Name 30 9 ModeScripting)
                  }
                }),
                (*lexer.Token)(Whitespace 39 1 ModeScripting),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceAliasingClause,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*lexer.Token)(As 40 2 ModeScripting),
                    (*lexer.Token)(Whitespace 42 1 ModeScripting),
                    (*lexer.Token)(Name 43 9 ModeScripting)
                  }
                })
              }
            }),
            (*lexer.Token)(Comma 52 1 ModeScripting),
            (*lexer.Token)(Whitespace 53 5 ModeScripting),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=3) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=7) {
                    (*lexer.Token)(Name 58 5 ModeScripting),
                    (*lexer.Token)(Backslash 63 1 ModeScripting),
                    (*lexer.Token)(Name 64 4 ModeScripting),
                    (*lexer.Token)(Backslash 68 1 ModeScripting),
                    (*lexer.Token)(Name 69 9 ModeScripting),
                    (*lexer.Token)(Backslash 78 1 ModeScripting),
                    (*lexer.Token)(Name 79 24 ModeScripting)
                  }
                }),
                (*lexer.Token)(Whitespace 103 1 ModeScripting),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceAliasingClause,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*lexer.Token)(As 104 2 ModeScripting),
                    (*lexer.Token)(Whitespace 106 1 ModeScripting),
                    (*lexer.Token)(Name 107 24 ModeScripting)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 131 1 ModeScripting)
      }
    }),
    (*lexer.Token)(Whitespace 132 1 ModeScripting)
  }
})
