([]struct { Type parser.TokenType; Offset int; Length int }) (len=100) {
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 7
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 7,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Namespace,
    Offset: (int) 9,
    Length: (int) 9
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 18,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 19,
    Length: (int) 14
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 33,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 34,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Use,
    Offset: (int) 38,
    Length: (int) 3
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 41,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 42,
    Length: (int) 9
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 51,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) As,
    Offset: (int) 52,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 54,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 55,
    Length: (int) 13
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 68,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 69,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Use,
    Offset: (int) 71,
    Length: (int) 3
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 74,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Function,
    Offset: (int) 75,
    Length: (int) 8
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 83,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 84,
    Length: (int) 14
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Backslash,
    Offset: (int) 98,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 99,
    Length: (int) 17
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Backslash,
    Offset: (int) 116,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenBrace,
    Offset: (int) 117,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 118,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 124,
    Length: (int) 13
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Comma,
    Offset: (int) 137,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 138,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 144,
    Length: (int) 13
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 157,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) As,
    Offset: (int) 158,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 160,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 161,
    Length: (int) 8
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 169,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseBrace,
    Offset: (int) 171,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 172,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 173,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) VariableName,
    Offset: (int) 177,
    Length: (int) 10
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 187,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Equals,
    Offset: (int) 188,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 189,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) New,
    Offset: (int) 190,
    Length: (int) 3
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 193,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 194,
    Length: (int) 9
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 203,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 204,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 205,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 206,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) VariableName,
    Offset: (int) 208,
    Length: (int) 10
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Arrow,
    Offset: (int) 218,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 220,
    Length: (int) 10
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 230,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 231,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 232,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 233,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) VariableName,
    Offset: (int) 237,
    Length: (int) 10
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 247,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Equals,
    Offset: (int) 248,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 249,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) New,
    Offset: (int) 250,
    Length: (int) 3
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 253,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 254,
    Length: (int) 13
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 267,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 268,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 269,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 270,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) VariableName,
    Offset: (int) 272,
    Length: (int) 10
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Arrow,
    Offset: (int) 282,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 284,
    Length: (int) 7
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 291,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 292,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 293,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 294,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 298,
    Length: (int) 12
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 310,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 311,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 312,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 313,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Backslash,
    Offset: (int) 315,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 316,
    Length: (int) 12
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 328,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 329,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 330,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 331,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 335,
    Length: (int) 13
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 348,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 349,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Arrow,
    Offset: (int) 350,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 352,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 353,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 355,
    Length: (int) 13
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenParenthesis,
    Offset: (int) 368,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) CloseParenthesis,
    Offset: (int) 369,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 370,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 371,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Name,
    Offset: (int) 375,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 381,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 382,
    Length: (int) 2
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) EndOfFile,
    Offset: (int) 384,
    Length: (int) 0
  }
}
(*parser.Phrase)({
  Type: (parser.PhraseType) StatementList,
  Children: ([]parser.AstNode) (len=26) {
    (*parser.Phrase)({
      Type: (parser.PhraseType) InlineText,
      Children: ([]parser.AstNode) (len=1) {
        (*parser.Token)(OpenTag 0 7 ModeInitial)
      }
    }),
    (*parser.Token)(Whitespace 7 2 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) NamespaceDefinition,
      Children: ([]parser.AstNode) (len=4) {
        (*parser.Token)(Namespace 9 9 ModeScripting),
        (*parser.Token)(Whitespace 18 1 ModeScripting),
        (*parser.Phrase)({
          Type: (parser.PhraseType) NamespaceName,
          Children: ([]parser.AstNode) (len=1) {
            (*parser.Token)(Name 19 14 ModeScripting)
          }
        }),
        (*parser.Token)(Semicolon 33 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 34 4 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) NamespaceUseDeclaration,
      Children: ([]parser.AstNode) (len=4) {
        (*parser.Token)(Use 38 3 ModeScripting),
        (*parser.Token)(Whitespace 41 1 ModeScripting),
        (*parser.Phrase)({
          Type: (parser.PhraseType) NamespaceUseClauseList,
          Children: ([]parser.AstNode) (len=1) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) NamespaceUseClause,
              Children: ([]parser.AstNode) (len=3) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 42 9 ModeScripting)
                  }
                }),
                (*parser.Token)(Whitespace 51 1 ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceAliasingClause,
                  Children: ([]parser.AstNode) (len=3) {
                    (*parser.Token)(As 52 2 ModeScripting),
                    (*parser.Token)(Whitespace 54 1 ModeScripting),
                    (*parser.Token)(Name 55 13 ModeScripting)
                  }
                })
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 68 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 69 2 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) NamespaceUseDeclaration,
      Children: ([]parser.AstNode) (len=12) {
        (*parser.Token)(Use 71 3 ModeScripting),
        (*parser.Token)(Whitespace 74 1 ModeScripting),
        (*parser.Token)(Function 75 8 ModeScripting),
        (*parser.Token)(Whitespace 83 1 ModeScripting),
        (*parser.Phrase)({
          Type: (parser.PhraseType) NamespaceName,
          Children: ([]parser.AstNode) (len=3) {
            (*parser.Token)(Name 84 14 ModeScripting),
            (*parser.Token)(Backslash 98 1 ModeScripting),
            (*parser.Token)(Name 99 17 ModeScripting)
          }
        }),
        (*parser.Token)(Backslash 116 1 ModeScripting),
        (*parser.Token)(OpenBrace 117 1 ModeScripting),
        (*parser.Token)(Whitespace 118 6 ModeScripting ModeScripting),
        (*parser.Phrase)({
          Type: (parser.PhraseType) NamespaceUseGroupClauseList,
          Children: ([]parser.AstNode) (len=4) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) NamespaceUseGroupClause,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 124 13 ModeScripting ModeScripting)
                  }
                })
              }
            }),
            (*parser.Token)(Comma 137 1 ModeScripting ModeScripting),
            (*parser.Token)(Whitespace 138 6 ModeScripting ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) NamespaceUseGroupClause,
              Children: ([]parser.AstNode) (len=3) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 144 13 ModeScripting ModeScripting)
                  }
                }),
                (*parser.Token)(Whitespace 157 1 ModeScripting ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceAliasingClause,
                  Children: ([]parser.AstNode) (len=3) {
                    (*parser.Token)(As 158 2 ModeScripting ModeScripting),
                    (*parser.Token)(Whitespace 160 1 ModeScripting ModeScripting),
                    (*parser.Token)(Name 161 8 ModeScripting ModeScripting)
                  }
                })
              }
            })
          }
        }),
        (*parser.Token)(Whitespace 169 2 ModeScripting ModeScripting),
        (*parser.Token)(CloseBrace 171 1 ModeScripting ModeScripting),
        (*parser.Token)(Semicolon 172 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 173 4 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) SimpleAssignmentExpression,
          Children: ([]parser.AstNode) (len=5) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) SimpleVariable,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(VariableName 177 10 ModeScripting)
              }
            }),
            (*parser.Token)(Whitespace 187 1 ModeScripting),
            (*parser.Token)(Equals 188 1 ModeScripting),
            (*parser.Token)(Whitespace 189 1 ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) ObjectCreationExpression,
              Children: ([]parser.AstNode) (len=5) {
                (*parser.Token)(New 190 3 ModeScripting),
                (*parser.Token)(Whitespace 193 1 ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) ClassTypeDesignator,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Phrase)({
                      Type: (parser.PhraseType) QualifiedName,
                      Children: ([]parser.AstNode) (len=1) {
                        (*parser.Phrase)({
                          Type: (parser.PhraseType) NamespaceName,
                          Children: ([]parser.AstNode) (len=1) {
                            (*parser.Token)(Name 194 9 ModeScripting)
                          }
                        })
                      }
                    })
                  }
                }),
                (*parser.Token)(OpenParenthesis 203 1 ModeScripting),
                (*parser.Token)(CloseParenthesis 204 1 ModeScripting)
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 205 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 206 2 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) MethodCallExpression,
          Children: ([]parser.AstNode) (len=5) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) SimpleVariable,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(VariableName 208 10 ModeScripting)
              }
            }),
            (*parser.Token)(Arrow 218 2 ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) MemberName,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(Name 220 10 ModeScripting ModeLookingForProperty)
              }
            }),
            (*parser.Token)(OpenParenthesis 230 1 ModeScripting),
            (*parser.Token)(CloseParenthesis 231 1 ModeScripting)
          }
        }),
        (*parser.Token)(Semicolon 232 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 233 4 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) SimpleAssignmentExpression,
          Children: ([]parser.AstNode) (len=5) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) SimpleVariable,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(VariableName 237 10 ModeScripting)
              }
            }),
            (*parser.Token)(Whitespace 247 1 ModeScripting),
            (*parser.Token)(Equals 248 1 ModeScripting),
            (*parser.Token)(Whitespace 249 1 ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) ObjectCreationExpression,
              Children: ([]parser.AstNode) (len=5) {
                (*parser.Token)(New 250 3 ModeScripting),
                (*parser.Token)(Whitespace 253 1 ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) ClassTypeDesignator,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Phrase)({
                      Type: (parser.PhraseType) QualifiedName,
                      Children: ([]parser.AstNode) (len=1) {
                        (*parser.Phrase)({
                          Type: (parser.PhraseType) NamespaceName,
                          Children: ([]parser.AstNode) (len=1) {
                            (*parser.Token)(Name 254 13 ModeScripting)
                          }
                        })
                      }
                    })
                  }
                }),
                (*parser.Token)(OpenParenthesis 267 1 ModeScripting),
                (*parser.Token)(CloseParenthesis 268 1 ModeScripting)
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 269 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 270 2 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) MethodCallExpression,
          Children: ([]parser.AstNode) (len=5) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) SimpleVariable,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(VariableName 272 10 ModeScripting)
              }
            }),
            (*parser.Token)(Arrow 282 2 ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) MemberName,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(Name 284 7 ModeScripting ModeLookingForProperty)
              }
            }),
            (*parser.Token)(OpenParenthesis 291 1 ModeScripting),
            (*parser.Token)(CloseParenthesis 292 1 ModeScripting)
          }
        }),
        (*parser.Token)(Semicolon 293 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 294 4 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) FunctionCallExpression,
          Children: ([]parser.AstNode) (len=3) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) QualifiedName,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 298 12 ModeScripting)
                  }
                })
              }
            }),
            (*parser.Token)(OpenParenthesis 310 1 ModeScripting),
            (*parser.Token)(CloseParenthesis 311 1 ModeScripting)
          }
        }),
        (*parser.Token)(Semicolon 312 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 313 2 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) FunctionCallExpression,
          Children: ([]parser.AstNode) (len=3) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) FullyQualifiedName,
              Children: ([]parser.AstNode) (len=2) {
                (*parser.Token)(Backslash 315 1 ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 316 12 ModeScripting)
                  }
                })
              }
            }),
            (*parser.Token)(OpenParenthesis 328 1 ModeScripting),
            (*parser.Token)(CloseParenthesis 329 1 ModeScripting)
          }
        }),
        (*parser.Token)(Semicolon 330 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 331 4 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) PropertyAccessExpression,
          Children: ([]parser.AstNode) (len=3) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) FunctionCallExpression,
              Children: ([]parser.AstNode) (len=3) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) QualifiedName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Phrase)({
                      Type: (parser.PhraseType) NamespaceName,
                      Children: ([]parser.AstNode) (len=1) {
                        (*parser.Token)(Name 335 13 ModeScripting)
                      }
                    })
                  }
                }),
                (*parser.Token)(OpenParenthesis 348 1 ModeScripting),
                (*parser.Token)(CloseParenthesis 349 1 ModeScripting)
              }
            }),
            (*parser.Token)(Arrow 350 2 ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) MemberName,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.ParseError)({
                  Phrase: (parser.Phrase) {
                    Type: (parser.PhraseType) Error,
                    Children: ([]parser.AstNode) {
                    }
                  },
                  Unexpected: (*parser.Token)(Semicolon 352 1 ModeScripting),
                  Expected: (parser.TokenType) 
                })
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 352 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 353 2 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) FunctionCallExpression,
          Children: ([]parser.AstNode) (len=3) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) QualifiedName,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 355 13 ModeScripting)
                  }
                })
              }
            }),
            (*parser.Token)(OpenParenthesis 368 1 ModeScripting),
            (*parser.Token)(CloseParenthesis 369 1 ModeScripting)
          }
        }),
        (*parser.Token)(Semicolon 370 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 371 4 ModeScripting),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) ConstantAccessExpression,
          Children: ([]parser.AstNode) (len=1) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) QualifiedName,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Phrase)({
                  Type: (parser.PhraseType) NamespaceName,
                  Children: ([]parser.AstNode) (len=1) {
                    (*parser.Token)(Name 375 6 ModeScripting)
                  }
                })
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 381 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 382 2 ModeScripting)
  }
})
