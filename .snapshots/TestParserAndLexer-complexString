([]struct { Type lexer.TokenType; Offset int; Length int }) (len=17) {
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 6
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 6,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 10,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 14,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Equals,
    Offset: (int) 15,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 16,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) DoubleQuote,
    Offset: (int) 17,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EncapsulatedAndWhitespace,
    Offset: (int) 18,
    Length: (int) 6
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) DollarCurlyOpen,
    Offset: (int) 24,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) DoubleQuote,
    Offset: (int) 26,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EncapsulatedAndWhitespace,
    Offset: (int) 27,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 31,
    Length: (int) 2
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) DoubleQuote,
    Offset: (int) 33,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) CloseBrace,
    Offset: (int) 34,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) DoubleQuote,
    Offset: (int) 35,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 36,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EndOfFile,
    Offset: (int) 37,
    Length: (int) 0
  }
}
(*phrase.Phrase)({
  Type: (phrase.PhraseType) StatementList,
  Children: ([]phrase.AstNode) (len=3) {
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) InlineText,
      Children: ([]phrase.AstNode) (len=1) {
        (*lexer.Token)(OpenTag 0 6)
      }
    }),
    (*lexer.Token)(Whitespace 6 4),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) SimpleAssignmentExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 10 4)
              }
            }),
            (*lexer.Token)(Whitespace 14 1),
            (*lexer.Token)(Equals 15 1),
            (*lexer.Token)(Whitespace 16 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) DoubleQuotedStringLiteral,
              Children: ([]phrase.AstNode) (len=3) {
                (*lexer.Token)(DoubleQuote 17 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) EncapsulatedVariableList,
                  Children: ([]phrase.AstNode) (len=2) {
                    (*lexer.Token)(EncapsulatedAndWhitespace 18 6),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) EncapsulatedVariable,
                      Children: ([]phrase.AstNode) (len=3) {
                        (*lexer.Token)(DollarCurlyOpen 24 2),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) DoubleQuotedStringLiteral,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(DoubleQuote 26 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) EncapsulatedVariableList,
                              Children: ([]phrase.AstNode) (len=2) {
                                (*lexer.Token)(EncapsulatedAndWhitespace 27 4),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) SimpleVariable,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*lexer.Token)(VariableName 31 2)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(DoubleQuote 33 1)
                          }
                        }),
                        (*lexer.Token)(CloseBrace 34 1)
                      }
                    })
                  }
                }),
                (*lexer.Token)(DoubleQuote 35 1)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 36 1)
      }
    })
  }
})
