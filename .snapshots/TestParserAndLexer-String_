([]*lexer.Token) (len=917) {
  (*lexer.Token)(OpenTag 0 6),
  (*lexer.Token)(Declare 6 7),
  (*lexer.Token)(OpenParenthesis 13 1),
  (*lexer.Token)(Name 14 12),
  (*lexer.Token)(Equals 26 1),
  (*lexer.Token)(IntegerLiteral 27 1),
  (*lexer.Token)(CloseParenthesis 28 1),
  (*lexer.Token)(Semicolon 29 1),
  (*lexer.Token)(Whitespace 30 2),
  (*lexer.Token)(Namespace 32 9),
  (*lexer.Token)(Whitespace 41 1),
  (*lexer.Token)(Name 42 9),
  (*lexer.Token)(Backslash 51 1),
  (*lexer.Token)(Name 52 4),
  (*lexer.Token)(Backslash 56 1),
  (*lexer.Token)(Name 57 6),
  (*lexer.Token)(Semicolon 63 1),
  (*lexer.Token)(Whitespace 64 2),
  (*lexer.Token)(Use 66 3),
  (*lexer.Token)(Whitespace 69 1),
  (*lexer.Token)(Name 70 9),
  (*lexer.Token)(Backslash 79 1),
  (*lexer.Token)(Name 80 5),
  (*lexer.Token)(Semicolon 85 1),
  (*lexer.Token)(Whitespace 86 1),
  (*lexer.Token)(Use 87 3),
  (*lexer.Token)(Whitespace 90 1),
  (*lexer.Token)(Name 91 9),
  (*lexer.Token)(Backslash 100 1),
  (*lexer.Token)(Name 101 4),
  (*lexer.Token)(Backslash 105 1),
  (*lexer.Token)(Name 106 6),
  (*lexer.Token)(Semicolon 112 1),
  (*lexer.Token)(Whitespace 113 2),
  (*lexer.Token)(Class 115 5),
  (*lexer.Token)(Whitespace 120 1),
  (*lexer.Token)(Name 121 7),
  (*lexer.Token)(Whitespace 128 1),
  (*lexer.Token)(Extends 129 7),
  (*lexer.Token)(Whitespace 136 1),
  (*lexer.Token)(Name 137 6),
  (*lexer.Token)(Whitespace 143 1),
  (*lexer.Token)(OpenBrace 144 1),
  (*lexer.Token)(Whitespace 145 5),
  (*lexer.Token)(Comment 150 33),
  (*lexer.Token)(Whitespace 183 5),
  (*lexer.Token)(Const 188 5),
  (*lexer.Token)(Whitespace 193 1),
  (*lexer.Token)(Name 194 18),
  (*lexer.Token)(Whitespace 212 1),
  (*lexer.Token)(Equals 213 1),
  (*lexer.Token)(Whitespace 214 1),
  (*lexer.Token)(IntegerLiteral 215 1),
  (*lexer.Token)(Semicolon 216 1),
  (*lexer.Token)(Whitespace 217 5),
  (*lexer.Token)(Const 222 5),
  (*lexer.Token)(Whitespace 227 1),
  (*lexer.Token)(Name 228 18),
  (*lexer.Token)(Whitespace 246 1),
  (*lexer.Token)(Equals 247 1),
  (*lexer.Token)(Whitespace 248 1),
  (*lexer.Token)(IntegerLiteral 249 1),
  (*lexer.Token)(Semicolon 250 1),
  (*lexer.Token)(Whitespace 251 5),
  (*lexer.Token)(Const 256 5),
  (*lexer.Token)(Whitespace 261 1),
  (*lexer.Token)(Name 262 12),
  (*lexer.Token)(Whitespace 274 1),
  (*lexer.Token)(Equals 275 1),
  (*lexer.Token)(Whitespace 276 1),
  (*lexer.Token)(IntegerLiteral 277 1),
  (*lexer.Token)(Semicolon 278 1),
  (*lexer.Token)(Whitespace 279 5),
  (*lexer.Token)(Const 284 5),
  (*lexer.Token)(Whitespace 289 1),
  (*lexer.Token)(Name 290 11),
  (*lexer.Token)(Whitespace 301 1),
  (*lexer.Token)(Equals 302 1),
  (*lexer.Token)(Whitespace 303 1),
  (*lexer.Token)(IntegerLiteral 304 1),
  (*lexer.Token)(Semicolon 305 1),
  (*lexer.Token)(Whitespace 306 6),
  (*lexer.Token)(DocumentComment 312 31),
  (*lexer.Token)(Whitespace 343 5),
  (*lexer.Token)(Public 348 6),
  (*lexer.Token)(Whitespace 354 1),
  (*lexer.Token)(VariableName 355 6),
  (*lexer.Token)(Semicolon 361 1),
  (*lexer.Token)(Whitespace 362 6),
  (*lexer.Token)(Protected 368 9),
  (*lexer.Token)(Whitespace 377 1),
  (*lexer.Token)(Static 378 6),
  (*lexer.Token)(Whitespace 384 1),
  (*lexer.Token)(VariableName 385 13),
  (*lexer.Token)(Whitespace 398 1),
  (*lexer.Token)(Equals 399 1),
  (*lexer.Token)(Whitespace 400 1),
  (*lexer.Token)(OpenBracket 401 1),
  (*lexer.Token)(Whitespace 402 9),
  (*lexer.Token)(StringLiteral 411 4),
  (*lexer.Token)(Whitespace 415 1),
  (*lexer.Token)(FatArrow 416 2),
  (*lexer.Token)(Whitespace 418 1),
  (*lexer.Token)(StringLiteral 419 4),
  (*lexer.Token)(Comma 423 1),
  (*lexer.Token)(Whitespace 424 9),
  (*lexer.Token)(StringLiteral 433 3),
  (*lexer.Token)(Whitespace 436 2),
  (*lexer.Token)(FatArrow 438 2),
  (*lexer.Token)(Whitespace 440 2),
  (*lexer.Token)(StringLiteral 442 3),
  (*lexer.Token)(Comma 445 1),
  (*lexer.Token)(Whitespace 446 9),
  (*lexer.Token)(StringLiteral 455 3),
  (*lexer.Token)(Whitespace 458 2),
  (*lexer.Token)(FatArrow 460 2),
  (*lexer.Token)(Whitespace 462 1),
  (*lexer.Token)(StringLiteral 463 4),
  (*lexer.Token)(Comma 467 1),
  (*lexer.Token)(Whitespace 468 9),
  (*lexer.Token)(StringLiteral 477 3),
  (*lexer.Token)(Whitespace 480 2),
  (*lexer.Token)(FatArrow 482 2),
  (*lexer.Token)(Whitespace 484 1),
  (*lexer.Token)(StringLiteral 485 4),
  (*lexer.Token)(Comma 489 1),
  (*lexer.Token)(Whitespace 490 9),
  (*lexer.Token)(StringLiteral 499 3),
  (*lexer.Token)(Whitespace 502 2),
  (*lexer.Token)(FatArrow 504 2),
  (*lexer.Token)(Whitespace 506 1),
  (*lexer.Token)(StringLiteral 507 4),
  (*lexer.Token)(Comma 511 1),
  (*lexer.Token)(Whitespace 512 9),
  (*lexer.Token)(StringLiteral 521 3),
  (*lexer.Token)(Whitespace 524 2),
  (*lexer.Token)(FatArrow 526 2),
  (*lexer.Token)(Whitespace 528 1),
  (*lexer.Token)(StringLiteral 529 4),
  (*lexer.Token)(Comma 533 1),
  (*lexer.Token)(Whitespace 534 9),
  (*lexer.Token)(StringLiteral 543 3),
  (*lexer.Token)(Whitespace 546 2),
  (*lexer.Token)(FatArrow 548 2),
  (*lexer.Token)(Whitespace 550 1),
  (*lexer.Token)(StringLiteral 551 4),
  (*lexer.Token)(Comma 555 1),
  (*lexer.Token)(Whitespace 556 9),
  (*lexer.Token)(StringLiteral 565 3),
  (*lexer.Token)(Whitespace 568 2),
  (*lexer.Token)(FatArrow 570 2),
  (*lexer.Token)(Whitespace 572 1),
  (*lexer.Token)(StringLiteral 573 6),
  (*lexer.Token)(Comma 579 1),
  (*lexer.Token)(Whitespace 580 5),
  (*lexer.Token)(CloseBracket 585 1),
  (*lexer.Token)(Semicolon 586 1),
  (*lexer.Token)(Whitespace 587 6),
  (*lexer.Token)(DocumentComment 593 166),
  (*lexer.Token)(Whitespace 759 5),
  (*lexer.Token)(Public 764 6),
  (*lexer.Token)(Whitespace 770 1),
  (*lexer.Token)(Function 771 8),
  (*lexer.Token)(Whitespace 779 1),
  (*lexer.Token)(Name 780 11),
  (*lexer.Token)(OpenParenthesis 791 1),
  (*lexer.Token)(Name 792 6),
  (*lexer.Token)(Whitespace 798 1),
  (*lexer.Token)(VariableName 799 6),
  (*lexer.Token)(Comma 805 1),
  (*lexer.Token)(Whitespace 806 1),
  (*lexer.Token)(Array 807 5),
  (*lexer.Token)(Whitespace 812 1),
  (*lexer.Token)(VariableName 813 11),
  (*lexer.Token)(Whitespace 824 1),
  (*lexer.Token)(Equals 825 1),
  (*lexer.Token)(Whitespace 826 1),
  (*lexer.Token)(OpenBracket 827 1),
  (*lexer.Token)(CloseBracket 828 1),
  (*lexer.Token)(CloseParenthesis 829 1),
  (*lexer.Token)(Whitespace 830 1),
  (*lexer.Token)(OpenBrace 831 1),
  (*lexer.Token)(Whitespace 832 9),
  (*lexer.Token)(VariableName 841 5),
  (*lexer.Token)(Arrow 846 2),
  (*lexer.Token)(Name 848 10),
  (*lexer.Token)(Whitespace 858 1),
  (*lexer.Token)(Equals 859 1),
  (*lexer.Token)(Whitespace 860 1),
  (*lexer.Token)(VariableName 861 11),
  (*lexer.Token)(Semicolon 872 1),
  (*lexer.Token)(Whitespace 873 9),
  (*lexer.Token)(VariableName 882 5),
  (*lexer.Token)(Arrow 887 2),
  (*lexer.Token)(Name 889 5),
  (*lexer.Token)(Whitespace 894 1),
  (*lexer.Token)(Equals 895 1),
  (*lexer.Token)(Whitespace 896 1),
  (*lexer.Token)(VariableName 897 6),
  (*lexer.Token)(Semicolon 903 1),
  (*lexer.Token)(Whitespace 904 5),
  (*lexer.Token)(CloseBrace 909 1),
  (*lexer.Token)(Whitespace 910 6),
  (*lexer.Token)(Public 916 6),
  (*lexer.Token)(Whitespace 922 1),
  (*lexer.Token)(Function 923 8),
  (*lexer.Token)(Whitespace 931 1),
  (*lexer.Token)(Name 932 15),
  (*lexer.Token)(OpenParenthesis 947 1),
  (*lexer.Token)(CloseParenthesis 948 1),
  (*lexer.Token)(Whitespace 949 1),
  (*lexer.Token)(Colon 950 1),
  (*lexer.Token)(Whitespace 951 1),
  (*lexer.Token)(Array 952 5),
  (*lexer.Token)(Whitespace 957 1),
  (*lexer.Token)(OpenBrace 958 1),
  (*lexer.Token)(Whitespace 959 9),
  (*lexer.Token)(Return 968 6),
  (*lexer.Token)(Whitespace 974 1),
  (*lexer.Token)(OpenBracket 975 1),
  (*lexer.Token)(StringLiteral 976 7),
  (*lexer.Token)(CloseBracket 983 1),
  (*lexer.Token)(Semicolon 984 1),
  (*lexer.Token)(Whitespace 985 5),
  (*lexer.Token)(CloseBrace 990 1),
  (*lexer.Token)(Whitespace 991 6),
  (*lexer.Token)(DocumentComment 997 239),
  (*lexer.Token)(Whitespace 1236 5),
  (*lexer.Token)(Public 1241 6),
  (*lexer.Token)(Whitespace 1247 1),
  (*lexer.Token)(Static 1248 6),
  (*lexer.Token)(Whitespace 1254 1),
  (*lexer.Token)(Function 1255 8),
  (*lexer.Token)(Whitespace 1263 1),
  (*lexer.Token)(Name 1264 5),
  (*lexer.Token)(OpenParenthesis 1269 1),
  (*lexer.Token)(Name 1270 6),
  (*lexer.Token)(Whitespace 1276 1),
  (*lexer.Token)(VariableName 1277 4),
  (*lexer.Token)(Comma 1281 1),
  (*lexer.Token)(Whitespace 1282 1),
  (*lexer.Token)(Name 1283 4),
  (*lexer.Token)(Whitespace 1287 1),
  (*lexer.Token)(VariableName 1288 19),
  (*lexer.Token)(Whitespace 1307 1),
  (*lexer.Token)(Equals 1308 1),
  (*lexer.Token)(Whitespace 1309 1),
  (*lexer.Token)(Name 1310 4),
  (*lexer.Token)(CloseParenthesis 1314 1),
  (*lexer.Token)(Whitespace 1315 1),
  (*lexer.Token)(Colon 1316 1),
  (*lexer.Token)(Whitespace 1317 1),
  (*lexer.Token)(Name 1318 6),
  (*lexer.Token)(Whitespace 1324 1),
  (*lexer.Token)(OpenBrace 1325 1),
  (*lexer.Token)(Whitespace 1326 9),
  (*lexer.Token)(VariableName 1335 8),
  (*lexer.Token)(Whitespace 1343 1),
  (*lexer.Token)(Equals 1344 1),
  (*lexer.Token)(Whitespace 1345 1),
  (*lexer.Token)(IntegerLiteral 1346 1),
  (*lexer.Token)(Semicolon 1347 1),
  (*lexer.Token)(Whitespace 1348 9),
  (*lexer.Token)(If 1357 2),
  (*lexer.Token)(Whitespace 1359 1),
  (*lexer.Token)(OpenParenthesis 1360 1),
  (*lexer.Token)(StringLiteral 1361 3),
  (*lexer.Token)(Whitespace 1364 1),
  (*lexer.Token)(EqualsEqualsEquals 1365 3),
  (*lexer.Token)(Whitespace 1368 1),
  (*lexer.Token)(VariableName 1369 4),
  (*lexer.Token)(OpenBracket 1373 1),
  (*lexer.Token)(IntegerLiteral 1374 1),
  (*lexer.Token)(CloseBracket 1375 1),
  (*lexer.Token)(Whitespace 1376 1),
  (*lexer.Token)(BarBar 1377 2),
  (*lexer.Token)(Whitespace 1379 1),
  (*lexer.Token)(StringLiteral 1380 3),
  (*lexer.Token)(Whitespace 1383 1),
  (*lexer.Token)(EqualsEqualsEquals 1384 3),
  (*lexer.Token)(Whitespace 1387 1),
  (*lexer.Token)(VariableName 1388 4),
  (*lexer.Token)(OpenBracket 1392 1),
  (*lexer.Token)(IntegerLiteral 1393 1),
  (*lexer.Token)(CloseBracket 1394 1),
  (*lexer.Token)(CloseParenthesis 1395 1),
  (*lexer.Token)(Whitespace 1396 1),
  (*lexer.Token)(OpenBrace 1397 1),
  (*lexer.Token)(Whitespace 1398 13),
  (*lexer.Token)(VariableName 1411 8),
  (*lexer.Token)(Whitespace 1419 1),
  (*lexer.Token)(Equals 1420 1),
  (*lexer.Token)(Whitespace 1421 1),
  (*lexer.Token)(IntegerLiteral 1422 1),
  (*lexer.Token)(Semicolon 1423 1),
  (*lexer.Token)(Whitespace 1424 9),
  (*lexer.Token)(CloseBrace 1433 1),
  (*lexer.Token)(Whitespace 1434 10),
  (*lexer.Token)(If 1444 2),
  (*lexer.Token)(Whitespace 1446 1),
  (*lexer.Token)(OpenParenthesis 1447 1),
  (*lexer.Token)(StringLiteral 1448 4),
  (*lexer.Token)(Whitespace 1452 1),
  (*lexer.Token)(EqualsEqualsEquals 1453 3),
  (*lexer.Token)(Whitespace 1456 1),
  (*lexer.Token)(VariableName 1457 4),
  (*lexer.Token)(OpenBracket 1461 1),
  (*lexer.Token)(VariableName 1462 8),
  (*lexer.Token)(CloseBracket 1470 1),
  (*lexer.Token)(CloseParenthesis 1471 1),
  (*lexer.Token)(Whitespace 1472 1),
  (*lexer.Token)(OpenBrace 1473 1),
  (*lexer.Token)(Whitespace 1474 13),
  (*lexer.Token)(Return 1487 6),
  (*lexer.Token)(Whitespace 1493 1),
  (*lexer.Token)(Name 1494 11),
  (*lexer.Token)(OpenParenthesis 1505 1),
  (*lexer.Token)(Whitespace 1506 17),
  (*lexer.Token)(OpenBracket 1523 1),
  (*lexer.Token)(StringLiteral 1524 6),
  (*lexer.Token)(Comma 1530 1),
  (*lexer.Token)(Whitespace 1531 1),
  (*lexer.Token)(StringLiteral 1532 6),
  (*lexer.Token)(CloseBracket 1538 1),
  (*lexer.Token)(Comma 1539 1),
  (*lexer.Token)(Whitespace 1540 17),
  (*lexer.Token)(OpenBracket 1557 1),
  (*lexer.Token)(StringLiteral 1558 4),
  (*lexer.Token)(Comma 1562 1),
  (*lexer.Token)(Whitespace 1563 1),
  (*lexer.Token)(StringLiteral 1564 4),
  (*lexer.Token)(CloseBracket 1568 1),
  (*lexer.Token)(Comma 1569 1),
  (*lexer.Token)(Whitespace 1570 17),
  (*lexer.Token)(Name 1587 6),
  (*lexer.Token)(OpenParenthesis 1593 1),
  (*lexer.Token)(VariableName 1594 4),
  (*lexer.Token)(Comma 1598 1),
  (*lexer.Token)(Whitespace 1599 1),
  (*lexer.Token)(VariableName 1600 8),
  (*lexer.Token)(Whitespace 1608 1),
  (*lexer.Token)(Plus 1609 1),
  (*lexer.Token)(Whitespace 1610 1),
  (*lexer.Token)(IntegerLiteral 1611 1),
  (*lexer.Token)(Comma 1612 1),
  (*lexer.Token)(Whitespace 1613 1),
  (*lexer.Token)(Minus 1614 1),
  (*lexer.Token)(IntegerLiteral 1615 1),
  (*lexer.Token)(CloseParenthesis 1616 1),
  (*lexer.Token)(Whitespace 1617 13),
  (*lexer.Token)(CloseParenthesis 1630 1),
  (*lexer.Token)(Semicolon 1631 1),
  (*lexer.Token)(Whitespace 1632 9),
  (*lexer.Token)(CloseBrace 1641 1),
  (*lexer.Token)(Whitespace 1642 1),
  (*lexer.Token)(Else 1643 4),
  (*lexer.Token)(Whitespace 1647 1),
  (*lexer.Token)(OpenBrace 1648 1),
  (*lexer.Token)(Whitespace 1649 13),
  (*lexer.Token)(Return 1662 6),
  (*lexer.Token)(Whitespace 1668 1),
  (*lexer.Token)(Name 1669 4),
  (*lexer.Token)(ColonColon 1673 2),
  (*lexer.Token)(Name 1675 20),
  (*lexer.Token)(OpenParenthesis 1695 1),
  (*lexer.Token)(Whitespace 1696 17),
  (*lexer.Token)(Name 1713 6),
  (*lexer.Token)(OpenParenthesis 1719 1),
  (*lexer.Token)(VariableName 1720 4),
  (*lexer.Token)(Comma 1724 1),
  (*lexer.Token)(Whitespace 1725 1),
  (*lexer.Token)(VariableName 1726 8),
  (*lexer.Token)(Whitespace 1734 1),
  (*lexer.Token)(Plus 1735 1),
  (*lexer.Token)(Whitespace 1736 1),
  (*lexer.Token)(IntegerLiteral 1737 1),
  (*lexer.Token)(Comma 1738 1),
  (*lexer.Token)(Whitespace 1739 1),
  (*lexer.Token)(Minus 1740 1),
  (*lexer.Token)(IntegerLiteral 1741 1),
  (*lexer.Token)(CloseParenthesis 1742 1),
  (*lexer.Token)(Comma 1743 1),
  (*lexer.Token)(Whitespace 1744 1),
  (*lexer.Token)(StringLiteral 1745 3),
  (*lexer.Token)(Comma 1748 1),
  (*lexer.Token)(Whitespace 1749 1),
  (*lexer.Token)(VariableName 1750 19),
  (*lexer.Token)(Whitespace 1769 13),
  (*lexer.Token)(CloseParenthesis 1782 1),
  (*lexer.Token)(Semicolon 1783 1),
  (*lexer.Token)(Whitespace 1784 9),
  (*lexer.Token)(CloseBrace 1793 1),
  (*lexer.Token)(Whitespace 1794 5),
  (*lexer.Token)(CloseBrace 1799 1),
  (*lexer.Token)(Whitespace 1800 6),
  (*lexer.Token)(DocumentComment 1806 366),
  (*lexer.Token)(Whitespace 2172 5),
  (*lexer.Token)(Public 2177 6),
  (*lexer.Token)(Whitespace 2183 1),
  (*lexer.Token)(Static 2184 6),
  (*lexer.Token)(Whitespace 2190 1),
  (*lexer.Token)(Function 2191 8),
  (*lexer.Token)(Whitespace 2199 1),
  (*lexer.Token)(Name 2200 20),
  (*lexer.Token)(OpenParenthesis 2220 1),
  (*lexer.Token)(Name 2221 6),
  (*lexer.Token)(Whitespace 2227 1),
  (*lexer.Token)(VariableName 2228 4),
  (*lexer.Token)(Comma 2232 1),
  (*lexer.Token)(Whitespace 2233 1),
  (*lexer.Token)(VariableName 2234 6),
  (*lexer.Token)(Comma 2240 1),
  (*lexer.Token)(Whitespace 2241 1),
  (*lexer.Token)(Name 2242 4),
  (*lexer.Token)(Whitespace 2246 1),
  (*lexer.Token)(VariableName 2247 19),
  (*lexer.Token)(Whitespace 2266 1),
  (*lexer.Token)(Equals 2267 1),
  (*lexer.Token)(Whitespace 2268 1),
  (*lexer.Token)(Name 2269 4),
  (*lexer.Token)(CloseParenthesis 2273 1),
  (*lexer.Token)(Whitespace 2274 1),
  (*lexer.Token)(Colon 2275 1),
  (*lexer.Token)(Whitespace 2276 1),
  (*lexer.Token)(Name 2277 6),
  (*lexer.Token)(Whitespace 2283 1),
  (*lexer.Token)(OpenBrace 2284 1),
  (*lexer.Token)(Whitespace 2285 9),
  (*lexer.Token)(If 2294 2),
  (*lexer.Token)(Whitespace 2296 1),
  (*lexer.Token)(OpenParenthesis 2297 1),
  (*lexer.Token)(Name 2298 4),
  (*lexer.Token)(Whitespace 2302 1),
  (*lexer.Token)(ExclamationEqualsEquals 2303 3),
  (*lexer.Token)(Whitespace 2306 1),
  (*lexer.Token)(VariableName 2307 6),
  (*lexer.Token)(CloseParenthesis 2313 1),
  (*lexer.Token)(Whitespace 2314 1),
  (*lexer.Token)(OpenBrace 2315 1),
  (*lexer.Token)(Whitespace 2316 13),
  (*lexer.Token)(VariableName 2329 4),
  (*lexer.Token)(Whitespace 2333 1),
  (*lexer.Token)(Equals 2334 1),
  (*lexer.Token)(Whitespace 2335 1),
  (*lexer.Token)(Name 2336 11),
  (*lexer.Token)(OpenParenthesis 2347 1),
  (*lexer.Token)(StringLiteral 2348 4),
  (*lexer.Token)(Whitespace 2352 1),
  (*lexer.Token)(Dot 2353 1),
  (*lexer.Token)(Whitespace 2354 1),
  (*lexer.Token)(VariableName 2355 6),
  (*lexer.Token)(Comma 2361 1),
  (*lexer.Token)(Whitespace 2362 1),
  (*lexer.Token)(VariableName 2363 6),
  (*lexer.Token)(Comma 2369 1),
  (*lexer.Token)(Whitespace 2370 1),
  (*lexer.Token)(VariableName 2371 4),
  (*lexer.Token)(CloseParenthesis 2375 1),
  (*lexer.Token)(Semicolon 2376 1),
  (*lexer.Token)(Whitespace 2377 9),
  (*lexer.Token)(CloseBrace 2386 1),
  (*lexer.Token)(Whitespace 2387 10),
  (*lexer.Token)(VariableName 2397 6),
  (*lexer.Token)(Whitespace 2403 1),
  (*lexer.Token)(Equals 2404 1),
  (*lexer.Token)(Whitespace 2405 1),
  (*lexer.Token)(StringLiteral 2406 2),
  (*lexer.Token)(Semicolon 2408 1),
  (*lexer.Token)(Whitespace 2409 9),
  (*lexer.Token)(If 2418 2),
  (*lexer.Token)(Whitespace 2420 1),
  (*lexer.Token)(OpenParenthesis 2421 1),
  (*lexer.Token)(VariableName 2422 19),
  (*lexer.Token)(CloseParenthesis 2441 1),
  (*lexer.Token)(Whitespace 2442 1),
  (*lexer.Token)(OpenBrace 2443 1),
  (*lexer.Token)(Whitespace 2444 13),
  (*lexer.Token)(VariableName 2457 6),
  (*lexer.Token)(Whitespace 2463 1),
  (*lexer.Token)(Equals 2464 1),
  (*lexer.Token)(Whitespace 2465 1),
  (*lexer.Token)(StringLiteral 2466 22),
  (*lexer.Token)(Semicolon 2488 1),
  (*lexer.Token)(Whitespace 2489 9),
  (*lexer.Token)(CloseBrace 2498 1),
  (*lexer.Token)(Whitespace 2499 10),
  (*lexer.Token)(Return 2509 6),
  (*lexer.Token)(Whitespace 2515 1),
  (*lexer.Token)(Name 2516 21),
  (*lexer.Token)(OpenParenthesis 2537 1),
  (*lexer.Token)(Whitespace 2538 13),
  (*lexer.Token)(StringLiteral 2551 53),
  (*lexer.Token)(Whitespace 2604 1),
  (*lexer.Token)(Dot 2605 1),
  (*lexer.Token)(Whitespace 2606 1),
  (*lexer.Token)(VariableName 2607 6),
  (*lexer.Token)(Whitespace 2613 1),
  (*lexer.Token)(Dot 2614 1),
  (*lexer.Token)(Whitespace 2615 1),
  (*lexer.Token)(StringLiteral 2616 4),
  (*lexer.Token)(Comma 2620 1),
  (*lexer.Token)(Whitespace 2621 13),
  (*lexer.Token)(Function 2634 8),
  (*lexer.Token)(OpenParenthesis 2642 1),
  (*lexer.Token)(VariableName 2643 8),
  (*lexer.Token)(CloseParenthesis 2651 1),
  (*lexer.Token)(Whitespace 2652 1),
  (*lexer.Token)(OpenBrace 2653 1),
  (*lexer.Token)(Whitespace 2654 17),
  (*lexer.Token)(VariableName 2671 4),
  (*lexer.Token)(Whitespace 2675 1),
  (*lexer.Token)(Equals 2676 1),
  (*lexer.Token)(Whitespace 2677 1),
  (*lexer.Token)(VariableName 2678 8),
  (*lexer.Token)(OpenBracket 2686 1),
  (*lexer.Token)(IntegerLiteral 2687 1),
  (*lexer.Token)(CloseBracket 2688 1),
  (*lexer.Token)(Semicolon 2689 1),
  (*lexer.Token)(Whitespace 2690 18),
  (*lexer.Token)(If 2708 2),
  (*lexer.Token)(Whitespace 2710 1),
  (*lexer.Token)(OpenParenthesis 2711 1),
  (*lexer.Token)(Isset 2712 5),
  (*lexer.Token)(OpenParenthesis 2717 1),
  (*lexer.Token)(Name 2718 4),
  (*lexer.Token)(ColonColon 2722 2),
  (*lexer.Token)(VariableName 2724 13),
  (*lexer.Token)(OpenBracket 2737 1),
  (*lexer.Token)(VariableName 2738 4),
  (*lexer.Token)(CloseBracket 2742 1),
  (*lexer.Token)(CloseParenthesis 2743 1),
  (*lexer.Token)(CloseParenthesis 2744 1),
  (*lexer.Token)(Whitespace 2745 1),
  (*lexer.Token)(OpenBrace 2746 1),
  (*lexer.Token)(Whitespace 2747 21),
  (*lexer.Token)(Return 2768 6),
  (*lexer.Token)(Whitespace 2774 1),
  (*lexer.Token)(Name 2775 4),
  (*lexer.Token)(ColonColon 2779 2),
  (*lexer.Token)(VariableName 2781 13),
  (*lexer.Token)(OpenBracket 2794 1),
  (*lexer.Token)(VariableName 2795 4),
  (*lexer.Token)(CloseBracket 2799 1),
  (*lexer.Token)(Semicolon 2800 1),
  (*lexer.Token)(Whitespace 2801 17),
  (*lexer.Token)(CloseBrace 2818 1),
  (*lexer.Token)(Whitespace 2819 1),
  (*lexer.Token)(ElseIf 2820 6),
  (*lexer.Token)(Whitespace 2826 1),
  (*lexer.Token)(OpenParenthesis 2827 1),
  (*lexer.Token)(StringLiteral 2828 3),
  (*lexer.Token)(Whitespace 2831 1),
  (*lexer.Token)(EqualsEqualsEquals 2832 3),
  (*lexer.Token)(Whitespace 2835 1),
  (*lexer.Token)(VariableName 2836 4),
  (*lexer.Token)(OpenBracket 2840 1),
  (*lexer.Token)(IntegerLiteral 2841 1),
  (*lexer.Token)(CloseBracket 2842 1),
  (*lexer.Token)(Whitespace 2843 1),
  (*lexer.Token)(BarBar 2844 2),
  (*lexer.Token)(Whitespace 2846 1),
  (*lexer.Token)(StringLiteral 2847 3),
  (*lexer.Token)(Whitespace 2850 1),
  (*lexer.Token)(EqualsEqualsEquals 2851 3),
  (*lexer.Token)(Whitespace 2854 1),
  (*lexer.Token)(VariableName 2855 4),
  (*lexer.Token)(OpenBracket 2859 1),
  (*lexer.Token)(IntegerLiteral 2860 1),
  (*lexer.Token)(CloseBracket 2861 1),
  (*lexer.Token)(CloseParenthesis 2862 1),
  (*lexer.Token)(Whitespace 2863 1),
  (*lexer.Token)(OpenBrace 2864 1),
  (*lexer.Token)(Whitespace 2865 21),
  (*lexer.Token)(Return 2886 6),
  (*lexer.Token)(Whitespace 2892 1),
  (*lexer.Token)(Name 2893 3),
  (*lexer.Token)(OpenParenthesis 2896 1),
  (*lexer.Token)(Name 2897 6),
  (*lexer.Token)(OpenParenthesis 2903 1),
  (*lexer.Token)(VariableName 2904 4),
  (*lexer.Token)(CloseParenthesis 2908 1),
  (*lexer.Token)(CloseParenthesis 2909 1),
  (*lexer.Token)(Semicolon 2910 1),
  (*lexer.Token)(Whitespace 2911 17),
  (*lexer.Token)(CloseBrace 2928 1),
  (*lexer.Token)(Whitespace 2929 1),
  (*lexer.Token)(ElseIf 2930 6),
  (*lexer.Token)(Whitespace 2936 1),
  (*lexer.Token)(OpenParenthesis 2937 1),
  (*lexer.Token)(StringLiteral 2938 3),
  (*lexer.Token)(Whitespace 2941 1),
  (*lexer.Token)(EqualsEqualsEquals 2942 3),
  (*lexer.Token)(Whitespace 2945 1),
  (*lexer.Token)(VariableName 2946 4),
  (*lexer.Token)(OpenBracket 2950 1),
  (*lexer.Token)(IntegerLiteral 2951 1),
  (*lexer.Token)(CloseBracket 2952 1),
  (*lexer.Token)(CloseParenthesis 2953 1),
  (*lexer.Token)(Whitespace 2954 1),
  (*lexer.Token)(OpenBrace 2955 1),
  (*lexer.Token)(Whitespace 2956 21),
  (*lexer.Token)(Return 2977 6),
  (*lexer.Token)(Whitespace 2983 1),
  (*lexer.Token)(Name 2984 4),
  (*lexer.Token)(ColonColon 2988 2),
  (*lexer.Token)(Name 2990 15),
  (*lexer.Token)(OpenParenthesis 3005 1),
  (*lexer.Token)(Name 3006 6),
  (*lexer.Token)(OpenParenthesis 3012 1),
  (*lexer.Token)(VariableName 3013 8),
  (*lexer.Token)(OpenBracket 3021 1),
  (*lexer.Token)(IntegerLiteral 3022 1),
  (*lexer.Token)(CloseBracket 3023 1),
  (*lexer.Token)(CloseParenthesis 3024 1),
  (*lexer.Token)(CloseParenthesis 3025 1),
  (*lexer.Token)(Semicolon 3026 1),
  (*lexer.Token)(Whitespace 3027 17),
  (*lexer.Token)(CloseBrace 3044 1),
  (*lexer.Token)(Whitespace 3045 1),
  (*lexer.Token)(Else 3046 4),
  (*lexer.Token)(Whitespace 3050 1),
  (*lexer.Token)(OpenBrace 3051 1),
  (*lexer.Token)(Whitespace 3052 21),
  (*lexer.Token)(Return 3073 6),
  (*lexer.Token)(Whitespace 3079 1),
  (*lexer.Token)(Name 3080 3),
  (*lexer.Token)(OpenParenthesis 3083 1),
  (*lexer.Token)(Name 3084 6),
  (*lexer.Token)(OpenParenthesis 3090 1),
  (*lexer.Token)(VariableName 3091 4),
  (*lexer.Token)(CloseParenthesis 3095 1),
  (*lexer.Token)(CloseParenthesis 3096 1),
  (*lexer.Token)(Semicolon 3097 1),
  (*lexer.Token)(Whitespace 3098 17),
  (*lexer.Token)(CloseBrace 3115 1),
  (*lexer.Token)(Whitespace 3116 13),
  (*lexer.Token)(CloseBrace 3129 1),
  (*lexer.Token)(Comma 3130 1),
  (*lexer.Token)(Whitespace 3131 13),
  (*lexer.Token)(VariableName 3144 4),
  (*lexer.Token)(Whitespace 3148 9),
  (*lexer.Token)(CloseParenthesis 3157 1),
  (*lexer.Token)(Semicolon 3158 1),
  (*lexer.Token)(Whitespace 3159 5),
  (*lexer.Token)(CloseBrace 3164 1),
  (*lexer.Token)(Whitespace 3165 6),
  (*lexer.Token)(DocumentComment 3171 190),
  (*lexer.Token)(Whitespace 3361 5),
  (*lexer.Token)(Private 3366 7),
  (*lexer.Token)(Whitespace 3373 1),
  (*lexer.Token)(Static 3374 6),
  (*lexer.Token)(Whitespace 3380 1),
  (*lexer.Token)(Function 3381 8),
  (*lexer.Token)(Whitespace 3389 1),
  (*lexer.Token)(Name 3390 15),
  (*lexer.Token)(OpenParenthesis 3405 1),
  (*lexer.Token)(Name 3406 3),
  (*lexer.Token)(Whitespace 3409 1),
  (*lexer.Token)(VariableName 3410 4),
  (*lexer.Token)(CloseParenthesis 3414 1),
  (*lexer.Token)(Whitespace 3415 1),
  (*lexer.Token)(Colon 3416 1),
  (*lexer.Token)(Whitespace 3417 1),
  (*lexer.Token)(Name 3418 6),
  (*lexer.Token)(Whitespace 3424 1),
  (*lexer.Token)(OpenBrace 3425 1),
  (*lexer.Token)(Whitespace 3426 9),
  (*lexer.Token)(If 3435 2),
  (*lexer.Token)(Whitespace 3437 1),
  (*lexer.Token)(OpenParenthesis 3438 1),
  (*lexer.Token)(VariableName 3439 4),
  (*lexer.Token)(Whitespace 3443 1),
  (*lexer.Token)(LessThanEquals 3444 2),
  (*lexer.Token)(Whitespace 3446 1),
  (*lexer.Token)(IntegerLiteral 3447 4),
  (*lexer.Token)(CloseParenthesis 3451 1),
  (*lexer.Token)(Whitespace 3452 1),
  (*lexer.Token)(OpenBrace 3453 1),
  (*lexer.Token)(Whitespace 3454 13),
  (*lexer.Token)(Return 3467 6),
  (*lexer.Token)(Whitespace 3473 1),
  (*lexer.Token)(Name 3474 3),
  (*lexer.Token)(OpenParenthesis 3477 1),
  (*lexer.Token)(VariableName 3478 4),
  (*lexer.Token)(CloseParenthesis 3482 1),
  (*lexer.Token)(Semicolon 3483 1),
  (*lexer.Token)(Whitespace 3484 9),
  (*lexer.Token)(CloseBrace 3493 1),
  (*lexer.Token)(Whitespace 3494 9),
  (*lexer.Token)(If 3503 2),
  (*lexer.Token)(Whitespace 3505 1),
  (*lexer.Token)(OpenParenthesis 3506 1),
  (*lexer.Token)(VariableName 3507 4),
  (*lexer.Token)(Whitespace 3511 1),
  (*lexer.Token)(LessThanEquals 3512 2),
  (*lexer.Token)(Whitespace 3514 1),
  (*lexer.Token)(IntegerLiteral 3515 5),
  (*lexer.Token)(CloseParenthesis 3520 1),
  (*lexer.Token)(Whitespace 3521 1),
  (*lexer.Token)(OpenBrace 3522 1),
  (*lexer.Token)(Whitespace 3523 13),
  (*lexer.Token)(Return 3536 6),
  (*lexer.Token)(Whitespace 3542 1),
  (*lexer.Token)(Name 3543 3),
  (*lexer.Token)(OpenParenthesis 3546 1),
  (*lexer.Token)(OpenParenthesis 3547 1),
  (*lexer.Token)(VariableName 3548 4),
  (*lexer.Token)(GreaterThanGreaterThan 3552 2),
  (*lexer.Token)(IntegerLiteral 3554 1),
  (*lexer.Token)(CloseParenthesis 3555 1),
  (*lexer.Token)(Whitespace 3556 1),
  (*lexer.Token)(Plus 3557 1),
  (*lexer.Token)(Whitespace 3558 1),
  (*lexer.Token)(IntegerLiteral 3559 4),
  (*lexer.Token)(CloseParenthesis 3563 1),
  (*lexer.Token)(Whitespace 3564 1),
  (*lexer.Token)(Dot 3565 1),
  (*lexer.Token)(Whitespace 3566 1),
  (*lexer.Token)(Name 3567 3),
  (*lexer.Token)(OpenParenthesis 3570 1),
  (*lexer.Token)(OpenParenthesis 3571 1),
  (*lexer.Token)(VariableName 3572 4),
  (*lexer.Token)(Ampersand 3576 1),
  (*lexer.Token)(IntegerLiteral 3577 4),
  (*lexer.Token)(CloseParenthesis 3581 1),
  (*lexer.Token)(Whitespace 3582 1),
  (*lexer.Token)(Plus 3583 1),
  (*lexer.Token)(Whitespace 3584 1),
  (*lexer.Token)(IntegerLiteral 3585 4),
  (*lexer.Token)(CloseParenthesis 3589 1),
  (*lexer.Token)(Semicolon 3590 1),
  (*lexer.Token)(Whitespace 3591 9),
  (*lexer.Token)(CloseBrace 3600 1),
  (*lexer.Token)(Whitespace 3601 9),
  (*lexer.Token)(If 3610 2),
  (*lexer.Token)(Whitespace 3612 1),
  (*lexer.Token)(OpenParenthesis 3613 1),
  (*lexer.Token)(VariableName 3614 4),
  (*lexer.Token)(Whitespace 3618 1),
  (*lexer.Token)(LessThanEquals 3619 2),
  (*lexer.Token)(Whitespace 3621 1),
  (*lexer.Token)(IntegerLiteral 3622 6),
  (*lexer.Token)(CloseParenthesis 3628 1),
  (*lexer.Token)(Whitespace 3629 1),
  (*lexer.Token)(OpenBrace 3630 1),
  (*lexer.Token)(Whitespace 3631 13),
  (*lexer.Token)(Return 3644 6),
  (*lexer.Token)(Whitespace 3650 1),
  (*lexer.Token)(Name 3651 3),
  (*lexer.Token)(OpenParenthesis 3654 1),
  (*lexer.Token)(OpenParenthesis 3655 1),
  (*lexer.Token)(VariableName 3656 4),
  (*lexer.Token)(GreaterThanGreaterThan 3660 2),
  (*lexer.Token)(IntegerLiteral 3662 2),
  (*lexer.Token)(CloseParenthesis 3664 1),
  (*lexer.Token)(Whitespace 3665 1),
  (*lexer.Token)(Plus 3666 1),
  (*lexer.Token)(Whitespace 3667 1),
  (*lexer.Token)(IntegerLiteral 3668 4),
  (*lexer.Token)(CloseParenthesis 3672 1),
  (*lexer.Token)(Whitespace 3673 1),
  (*lexer.Token)(Dot 3674 1),
  (*lexer.Token)(Whitespace 3675 1),
  (*lexer.Token)(Name 3676 3),
  (*lexer.Token)(OpenParenthesis 3679 1),
  (*lexer.Token)(OpenParenthesis 3680 1),
  (*lexer.Token)(OpenParenthesis 3681 1),
  (*lexer.Token)(VariableName 3682 4),
  (*lexer.Token)(GreaterThanGreaterThan 3686 2),
  (*lexer.Token)(IntegerLiteral 3688 1),
  (*lexer.Token)(CloseParenthesis 3689 1),
  (*lexer.Token)(Ampersand 3690 1),
  (*lexer.Token)(IntegerLiteral 3691 4),
  (*lexer.Token)(CloseParenthesis 3695 1),
  (*lexer.Token)(Whitespace 3696 1),
  (*lexer.Token)(Plus 3697 1),
  (*lexer.Token)(Whitespace 3698 1),
  (*lexer.Token)(IntegerLiteral 3699 4),
  (*lexer.Token)(CloseParenthesis 3703 1),
  (*lexer.Token)(Whitespace 3704 1),
  (*lexer.Token)(Dot 3705 1),
  (*lexer.Token)(Whitespace 3706 1),
  (*lexer.Token)(Name 3707 3),
  (*lexer.Token)(OpenParenthesis 3710 1),
  (*lexer.Token)(OpenParenthesis 3711 1),
  (*lexer.Token)(VariableName 3712 4),
  (*lexer.Token)(Ampersand 3716 1),
  (*lexer.Token)(IntegerLiteral 3717 4),
  (*lexer.Token)(CloseParenthesis 3721 1),
  (*lexer.Token)(Whitespace 3722 1),
  (*lexer.Token)(Plus 3723 1),
  (*lexer.Token)(Whitespace 3724 1),
  (*lexer.Token)(IntegerLiteral 3725 4),
  (*lexer.Token)(CloseParenthesis 3729 1),
  (*lexer.Token)(Semicolon 3730 1),
  (*lexer.Token)(Whitespace 3731 9),
  (*lexer.Token)(CloseBrace 3740 1),
  (*lexer.Token)(Whitespace 3741 9),
  (*lexer.Token)(If 3750 2),
  (*lexer.Token)(Whitespace 3752 1),
  (*lexer.Token)(OpenParenthesis 3753 1),
  (*lexer.Token)(VariableName 3754 4),
  (*lexer.Token)(Whitespace 3758 1),
  (*lexer.Token)(LessThanEquals 3759 2),
  (*lexer.Token)(Whitespace 3761 1),
  (*lexer.Token)(IntegerLiteral 3762 8),
  (*lexer.Token)(CloseParenthesis 3770 1),
  (*lexer.Token)(Whitespace 3771 1),
  (*lexer.Token)(OpenBrace 3772 1),
  (*lexer.Token)(Whitespace 3773 13),
  (*lexer.Token)(Return 3786 6),
  (*lexer.Token)(Whitespace 3792 1),
  (*lexer.Token)(Name 3793 3),
  (*lexer.Token)(OpenParenthesis 3796 1),
  (*lexer.Token)(OpenParenthesis 3797 1),
  (*lexer.Token)(VariableName 3798 4),
  (*lexer.Token)(GreaterThanGreaterThan 3802 2),
  (*lexer.Token)(IntegerLiteral 3804 2),
  (*lexer.Token)(CloseParenthesis 3806 1),
  (*lexer.Token)(Whitespace 3807 1),
  (*lexer.Token)(Plus 3808 1),
  (*lexer.Token)(Whitespace 3809 1),
  (*lexer.Token)(IntegerLiteral 3810 4),
  (*lexer.Token)(CloseParenthesis 3814 1),
  (*lexer.Token)(Whitespace 3815 1),
  (*lexer.Token)(Dot 3816 1),
  (*lexer.Token)(Whitespace 3817 1),
  (*lexer.Token)(Name 3818 3),
  (*lexer.Token)(OpenParenthesis 3821 1),
  (*lexer.Token)(OpenParenthesis 3822 1),
  (*lexer.Token)(OpenParenthesis 3823 1),
  (*lexer.Token)(VariableName 3824 4),
  (*lexer.Token)(GreaterThanGreaterThan 3828 2),
  (*lexer.Token)(IntegerLiteral 3830 2),
  (*lexer.Token)(CloseParenthesis 3832 1),
  (*lexer.Token)(Ampersand 3833 1),
  (*lexer.Token)(IntegerLiteral 3834 4),
  (*lexer.Token)(CloseParenthesis 3838 1),
  (*lexer.Token)(Whitespace 3839 1),
  (*lexer.Token)(Plus 3840 1),
  (*lexer.Token)(Whitespace 3841 1),
  (*lexer.Token)(IntegerLiteral 3842 4),
  (*lexer.Token)(CloseParenthesis 3846 1),
  (*lexer.Token)(Whitespace 3847 18),
  (*lexer.Token)(Dot 3865 1),
  (*lexer.Token)(Whitespace 3866 1),
  (*lexer.Token)(Name 3867 3),
  (*lexer.Token)(OpenParenthesis 3870 1),
  (*lexer.Token)(OpenParenthesis 3871 1),
  (*lexer.Token)(OpenParenthesis 3872 1),
  (*lexer.Token)(VariableName 3873 4),
  (*lexer.Token)(GreaterThanGreaterThan 3877 2),
  (*lexer.Token)(IntegerLiteral 3879 1),
  (*lexer.Token)(CloseParenthesis 3880 1),
  (*lexer.Token)(Ampersand 3881 1),
  (*lexer.Token)(IntegerLiteral 3882 4),
  (*lexer.Token)(CloseParenthesis 3886 1),
  (*lexer.Token)(Whitespace 3887 1),
  (*lexer.Token)(Plus 3888 1),
  (*lexer.Token)(Whitespace 3889 1),
  (*lexer.Token)(IntegerLiteral 3890 4),
  (*lexer.Token)(CloseParenthesis 3894 1),
  (*lexer.Token)(Whitespace 3895 1),
  (*lexer.Token)(Dot 3896 1),
  (*lexer.Token)(Whitespace 3897 1),
  (*lexer.Token)(Name 3898 3),
  (*lexer.Token)(OpenParenthesis 3901 1),
  (*lexer.Token)(OpenParenthesis 3902 1),
  (*lexer.Token)(VariableName 3903 4),
  (*lexer.Token)(Ampersand 3907 1),
  (*lexer.Token)(IntegerLiteral 3908 4),
  (*lexer.Token)(CloseParenthesis 3912 1),
  (*lexer.Token)(Whitespace 3913 1),
  (*lexer.Token)(Plus 3914 1),
  (*lexer.Token)(Whitespace 3915 1),
  (*lexer.Token)(IntegerLiteral 3916 4),
  (*lexer.Token)(CloseParenthesis 3920 1),
  (*lexer.Token)(Semicolon 3921 1),
  (*lexer.Token)(Whitespace 3922 9),
  (*lexer.Token)(CloseBrace 3931 1),
  (*lexer.Token)(Whitespace 3932 9),
  (*lexer.Token)(Throw 3941 5),
  (*lexer.Token)(Whitespace 3946 1),
  (*lexer.Token)(New 3947 3),
  (*lexer.Token)(Whitespace 3950 1),
  (*lexer.Token)(Name 3951 5),
  (*lexer.Token)(OpenParenthesis 3956 1),
  (*lexer.Token)(StringLiteral 3957 62),
  (*lexer.Token)(CloseParenthesis 4019 1),
  (*lexer.Token)(Semicolon 4020 1),
  (*lexer.Token)(Whitespace 4021 5),
  (*lexer.Token)(CloseBrace 4026 1),
  (*lexer.Token)(Whitespace 4027 10),
  (*lexer.Token)(Public 4037 6),
  (*lexer.Token)(Whitespace 4043 1),
  (*lexer.Token)(Function 4044 8),
  (*lexer.Token)(Whitespace 4052 1),
  (*lexer.Token)(Name 4053 7),
  (*lexer.Token)(OpenParenthesis 4060 1),
  (*lexer.Token)(CloseParenthesis 4061 1),
  (*lexer.Token)(Whitespace 4062 1),
  (*lexer.Token)(Colon 4063 1),
  (*lexer.Token)(Whitespace 4064 1),
  (*lexer.Token)(Name 4065 6),
  (*lexer.Token)(Whitespace 4071 1),
  (*lexer.Token)(OpenBrace 4072 1),
  (*lexer.Token)(Whitespace 4073 9),
  (*lexer.Token)(Return 4082 6),
  (*lexer.Token)(Whitespace 4088 1),
  (*lexer.Token)(StringLiteral 4089 15),
  (*lexer.Token)(Semicolon 4104 1),
  (*lexer.Token)(Whitespace 4105 5),
  (*lexer.Token)(CloseBrace 4110 1),
  (*lexer.Token)(Whitespace 4111 1),
  (*lexer.Token)(CloseBrace 4112 1),
  (*lexer.Token)(Whitespace 4113 1),
  (*lexer.Token)(EndOfFile 4114 0)
}
(*phrase.Phrase)({
  Type: (phrase.PhraseType) StatementList,
  Children: ([]phrase.AstNode) (len=11) {
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) InlineText,
      Children: ([]phrase.AstNode) (len=1) {
        (*lexer.Token)(OpenTag 0 6)
      }
    }),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) DeclareStatement,
      Children: ([]phrase.AstNode) (len=5) {
        (*lexer.Token)(Declare 6 7),
        (*lexer.Token)(OpenParenthesis 13 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) DeclareDirective,
          Children: ([]phrase.AstNode) (len=3) {
            (*lexer.Token)(Name 14 12),
            (*lexer.Token)(Equals 26 1),
            (*lexer.Token)(IntegerLiteral 27 1)
          }
        }),
        (*lexer.Token)(CloseParenthesis 28 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NullStatement,
          Children: ([]phrase.AstNode) (len=1) {
            (*lexer.Token)(Semicolon 29 1)
          }
        })
      }
    }),
    (*lexer.Token)(Whitespace 30 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceDefinition,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Namespace 32 9),
        (*lexer.Token)(Whitespace 41 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceName,
          Children: ([]phrase.AstNode) (len=5) {
            (*lexer.Token)(Name 42 9),
            (*lexer.Token)(Backslash 51 1),
            (*lexer.Token)(Name 52 4),
            (*lexer.Token)(Backslash 56 1),
            (*lexer.Token)(Name 57 6)
          }
        }),
        (*lexer.Token)(Semicolon 63 1)
      }
    }),
    (*lexer.Token)(Whitespace 64 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 66 3),
        (*lexer.Token)(Whitespace 69 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*lexer.Token)(Name 70 9),
                    (*lexer.Token)(Backslash 79 1),
                    (*lexer.Token)(Name 80 5)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 85 1)
      }
    }),
    (*lexer.Token)(Whitespace 86 1),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) NamespaceUseDeclaration,
      Children: ([]phrase.AstNode) (len=4) {
        (*lexer.Token)(Use 87 3),
        (*lexer.Token)(Whitespace 90 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) NamespaceUseClauseList,
          Children: ([]phrase.AstNode) (len=1) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) NamespaceUseClause,
              Children: ([]phrase.AstNode) (len=1) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) NamespaceName,
                  Children: ([]phrase.AstNode) (len=5) {
                    (*lexer.Token)(Name 91 9),
                    (*lexer.Token)(Backslash 100 1),
                    (*lexer.Token)(Name 101 4),
                    (*lexer.Token)(Backslash 105 1),
                    (*lexer.Token)(Name 106 6)
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 112 1)
      }
    }),
    (*lexer.Token)(Whitespace 113 2),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ClassDeclaration,
      Children: ([]phrase.AstNode) (len=3) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ClassDeclarationHeader,
          Children: ([]phrase.AstNode) (len=5) {
            (*lexer.Token)(Class 115 5),
            (*lexer.Token)(Whitespace 120 1),
            (*lexer.Token)(Name 121 7),
            (*lexer.Token)(Whitespace 128 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ClassBaseClause,
              Children: ([]phrase.AstNode) (len=3) {
                (*lexer.Token)(Extends 129 7),
                (*lexer.Token)(Whitespace 136 1),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) QualifiedName,
                  Children: ([]phrase.AstNode) (len=1) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) NamespaceName,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(Name 137 6)
                      }
                    })
                  }
                })
              }
            })
          }
        }),
        (*lexer.Token)(Whitespace 143 1),
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) ClassDeclarationBody,
          Children: ([]phrase.AstNode) (len=7) {
            (*lexer.Token)(OpenBrace 144 1),
            (*lexer.Token)(Whitespace 145 5),
            (*lexer.Token)(Comment 150 33),
            (*lexer.Token)(Whitespace 183 5),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) ClassMemberDeclarationList,
              Children: ([]phrase.AstNode) (len=33) {
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ClassConstDeclaration,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*lexer.Token)(Const 188 5),
                    (*lexer.Token)(Whitespace 193 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ClassConstElementList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ClassConstElement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) Identifier,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Name 194 18)
                              }
                            }),
                            (*lexer.Token)(Whitespace 212 1),
                            (*lexer.Token)(Equals 213 1),
                            (*lexer.Token)(Whitespace 214 1),
                            (*lexer.Token)(IntegerLiteral 215 1)
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Semicolon 216 1)
                  }
                }),
                (*lexer.Token)(Whitespace 217 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ClassConstDeclaration,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*lexer.Token)(Const 222 5),
                    (*lexer.Token)(Whitespace 227 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ClassConstElementList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ClassConstElement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) Identifier,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Name 228 18)
                              }
                            }),
                            (*lexer.Token)(Whitespace 246 1),
                            (*lexer.Token)(Equals 247 1),
                            (*lexer.Token)(Whitespace 248 1),
                            (*lexer.Token)(IntegerLiteral 249 1)
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Semicolon 250 1)
                  }
                }),
                (*lexer.Token)(Whitespace 251 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ClassConstDeclaration,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*lexer.Token)(Const 256 5),
                    (*lexer.Token)(Whitespace 261 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ClassConstElementList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ClassConstElement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) Identifier,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Name 262 12)
                              }
                            }),
                            (*lexer.Token)(Whitespace 274 1),
                            (*lexer.Token)(Equals 275 1),
                            (*lexer.Token)(Whitespace 276 1),
                            (*lexer.Token)(IntegerLiteral 277 1)
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Semicolon 278 1)
                  }
                }),
                (*lexer.Token)(Whitespace 279 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) ClassConstDeclaration,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*lexer.Token)(Const 284 5),
                    (*lexer.Token)(Whitespace 289 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) ClassConstElementList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ClassConstElement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) Identifier,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Name 290 11)
                              }
                            }),
                            (*lexer.Token)(Whitespace 301 1),
                            (*lexer.Token)(Equals 302 1),
                            (*lexer.Token)(Whitespace 303 1),
                            (*lexer.Token)(IntegerLiteral 304 1)
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Semicolon 305 1)
                  }
                }),
                (*lexer.Token)(Whitespace 306 6),
                (*lexer.Token)(DocumentComment 312 31),
                (*lexer.Token)(Whitespace 343 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) PropertyDeclaration,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MemberModifierList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(Public 348 6)
                      }
                    }),
                    (*lexer.Token)(Whitespace 354 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) PropertyElementList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) PropertyElement,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(VariableName 355 6)
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Semicolon 361 1)
                  }
                }),
                (*lexer.Token)(Whitespace 362 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) PropertyDeclaration,
                  Children: ([]phrase.AstNode) (len=4) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MemberModifierList,
                      Children: ([]phrase.AstNode) (len=3) {
                        (*lexer.Token)(Protected 368 9),
                        (*lexer.Token)(Whitespace 377 1),
                        (*lexer.Token)(Static 378 6)
                      }
                    }),
                    (*lexer.Token)(Whitespace 384 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) PropertyElementList,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) PropertyElement,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(VariableName 385 13),
                            (*lexer.Token)(Whitespace 398 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) PropertyInitialiser,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*lexer.Token)(Equals 399 1),
                                (*lexer.Token)(Whitespace 400 1),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ArrayCreationExpression,
                                  Children: ([]phrase.AstNode) (len=5) {
                                    (*lexer.Token)(OpenBracket 401 1),
                                    (*lexer.Token)(Whitespace 402 9),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ArrayInitialiserList,
                                      Children: ([]phrase.AstNode) (len=23) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 411 4)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 415 1),
                                            (*lexer.Token)(FatArrow 416 2),
                                            (*lexer.Token)(Whitespace 418 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 419 4)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 423 1),
                                        (*lexer.Token)(Whitespace 424 9),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 433 3)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 436 2),
                                            (*lexer.Token)(FatArrow 438 2),
                                            (*lexer.Token)(Whitespace 440 2),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 442 3)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 445 1),
                                        (*lexer.Token)(Whitespace 446 9),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 455 3)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 458 2),
                                            (*lexer.Token)(FatArrow 460 2),
                                            (*lexer.Token)(Whitespace 462 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 463 4)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 467 1),
                                        (*lexer.Token)(Whitespace 468 9),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 477 3)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 480 2),
                                            (*lexer.Token)(FatArrow 482 2),
                                            (*lexer.Token)(Whitespace 484 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 485 4)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 489 1),
                                        (*lexer.Token)(Whitespace 490 9),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 499 3)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 502 2),
                                            (*lexer.Token)(FatArrow 504 2),
                                            (*lexer.Token)(Whitespace 506 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 507 4)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 511 1),
                                        (*lexer.Token)(Whitespace 512 9),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 521 3)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 524 2),
                                            (*lexer.Token)(FatArrow 526 2),
                                            (*lexer.Token)(Whitespace 528 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 529 4)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 533 1),
                                        (*lexer.Token)(Whitespace 534 9),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 543 3)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 546 2),
                                            (*lexer.Token)(FatArrow 548 2),
                                            (*lexer.Token)(Whitespace 550 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 551 4)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 555 1),
                                        (*lexer.Token)(Whitespace 556 9),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayElement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayKey,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 565 3)
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 568 2),
                                            (*lexer.Token)(FatArrow 570 2),
                                            (*lexer.Token)(Whitespace 572 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayValue,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(StringLiteral 573 6)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Comma 579 1)
                                      }
                                    }),
                                    (*lexer.Token)(Whitespace 580 5),
                                    (*lexer.Token)(CloseBracket 585 1)
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Semicolon 586 1)
                  }
                }),
                (*lexer.Token)(Whitespace 587 6),
                (*lexer.Token)(DocumentComment 593 166),
                (*lexer.Token)(Whitespace 759 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=8) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Public 764 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 770 1),
                        (*lexer.Token)(Function 771 8),
                        (*lexer.Token)(Whitespace 779 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 780 11)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 791 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclarationList,
                          Children: ([]phrase.AstNode) (len=4) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 792 6)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 798 1),
                                (*lexer.Token)(VariableName 799 6)
                              }
                            }),
                            (*lexer.Token)(Comma 805 1),
                            (*lexer.Token)(Whitespace 806 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=7) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*lexer.Token)(Array 807 5)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 812 1),
                                (*lexer.Token)(VariableName 813 11),
                                (*lexer.Token)(Whitespace 824 1),
                                (*lexer.Token)(Equals 825 1),
                                (*lexer.Token)(Whitespace 826 1),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ArrayCreationExpression,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*lexer.Token)(OpenBracket 827 1),
                                    (*lexer.Token)(CloseBracket 828 1)
                                  }
                                })
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(CloseParenthesis 829 1)
                      }
                    }),
                    (*lexer.Token)(Whitespace 830 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 831 1),
                            (*lexer.Token)(Whitespace 832 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) PropertyAccessExpression,
                                          Children: ([]phrase.AstNode) (len=3) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) SimpleVariable,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(VariableName 841 5)
                                              }
                                            }),
                                            (*lexer.Token)(Arrow 846 2),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) MemberName,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(Name 848 10)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 858 1),
                                        (*lexer.Token)(Equals 859 1),
                                        (*lexer.Token)(Whitespace 860 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 861 11)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 872 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 873 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) PropertyAccessExpression,
                                          Children: ([]phrase.AstNode) (len=3) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) SimpleVariable,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(VariableName 882 5)
                                              }
                                            }),
                                            (*lexer.Token)(Arrow 887 2),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) MemberName,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(Name 889 5)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 894 1),
                                        (*lexer.Token)(Equals 895 1),
                                        (*lexer.Token)(Whitespace 896 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 897 6)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 903 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 904 5),
                            (*lexer.Token)(CloseBrace 909 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 910 6),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=9) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Public 916 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 922 1),
                        (*lexer.Token)(Function 923 8),
                        (*lexer.Token)(Whitespace 931 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 932 15)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 947 1),
                        (*lexer.Token)(CloseParenthesis 948 1),
                        (*lexer.Token)(Whitespace 949 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 950 1),
                            (*lexer.Token)(Whitespace 951 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(Array 952 5)
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 957 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 958 1),
                            (*lexer.Token)(Whitespace 959 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ReturnStatement,
                                  Children: ([]phrase.AstNode) (len=4) {
                                    (*lexer.Token)(Return 968 6),
                                    (*lexer.Token)(Whitespace 974 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ArrayCreationExpression,
                                      Children: ([]phrase.AstNode) (len=3) {
                                        (*lexer.Token)(OpenBracket 975 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArrayInitialiserList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ArrayElement,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ArrayValue,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(StringLiteral 976 7)
                                                  }
                                                })
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(CloseBracket 983 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 984 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 985 5),
                            (*lexer.Token)(CloseBrace 990 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 991 6),
                (*lexer.Token)(DocumentComment 997 239),
                (*lexer.Token)(Whitespace 1236 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=10) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Public 1241 6),
                            (*lexer.Token)(Whitespace 1247 1),
                            (*lexer.Token)(Static 1248 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 1254 1),
                        (*lexer.Token)(Function 1255 8),
                        (*lexer.Token)(Whitespace 1263 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 1264 5)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 1269 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclarationList,
                          Children: ([]phrase.AstNode) (len=4) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 1270 6)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1276 1),
                                (*lexer.Token)(VariableName 1277 4)
                              }
                            }),
                            (*lexer.Token)(Comma 1281 1),
                            (*lexer.Token)(Whitespace 1282 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=7) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 1283 4)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1287 1),
                                (*lexer.Token)(VariableName 1288 19),
                                (*lexer.Token)(Whitespace 1307 1),
                                (*lexer.Token)(Equals 1308 1),
                                (*lexer.Token)(Whitespace 1309 1),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ConstantAccessExpression,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 1310 4)
                                          }
                                        })
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(CloseParenthesis 1314 1),
                        (*lexer.Token)(Whitespace 1315 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 1316 1),
                            (*lexer.Token)(Whitespace 1317 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 1318 6)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 1324 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 1325 1),
                            (*lexer.Token)(Whitespace 1326 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=5) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 1335 8)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 1343 1),
                                        (*lexer.Token)(Equals 1344 1),
                                        (*lexer.Token)(Whitespace 1345 1),
                                        (*lexer.Token)(IntegerLiteral 1346 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 1347 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1348 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=7) {
                                    (*lexer.Token)(If 1357 2),
                                    (*lexer.Token)(Whitespace 1359 1),
                                    (*lexer.Token)(OpenParenthesis 1360 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) LogicalExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) EqualityExpression,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*lexer.Token)(StringLiteral 1361 3),
                                            (*lexer.Token)(Whitespace 1364 1),
                                            (*lexer.Token)(EqualsEqualsEquals 1365 3),
                                            (*lexer.Token)(Whitespace 1368 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) SubscriptExpression,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(VariableName 1369 4)
                                                  }
                                                }),
                                                (*lexer.Token)(OpenBracket 1373 1),
                                                (*lexer.Token)(IntegerLiteral 1374 1),
                                                (*lexer.Token)(CloseBracket 1375 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 1376 1),
                                        (*lexer.Token)(BarBar 1377 2),
                                        (*lexer.Token)(Whitespace 1379 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) EqualityExpression,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*lexer.Token)(StringLiteral 1380 3),
                                            (*lexer.Token)(Whitespace 1383 1),
                                            (*lexer.Token)(EqualsEqualsEquals 1384 3),
                                            (*lexer.Token)(Whitespace 1387 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) SubscriptExpression,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(VariableName 1388 4)
                                                  }
                                                }),
                                                (*lexer.Token)(OpenBracket 1392 1),
                                                (*lexer.Token)(IntegerLiteral 1393 1),
                                                (*lexer.Token)(CloseBracket 1394 1)
                                              }
                                            })
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 1395 1),
                                    (*lexer.Token)(Whitespace 1396 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 1397 1),
                                        (*lexer.Token)(Whitespace 1398 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ExpressionStatement,
                                              Children: ([]phrase.AstNode) (len=2) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 1411 8)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 1419 1),
                                                    (*lexer.Token)(Equals 1420 1),
                                                    (*lexer.Token)(Whitespace 1421 1),
                                                    (*lexer.Token)(IntegerLiteral 1422 1)
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 1423 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 1424 9),
                                        (*lexer.Token)(CloseBrace 1433 1)
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 1434 10),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=9) {
                                    (*lexer.Token)(If 1444 2),
                                    (*lexer.Token)(Whitespace 1446 1),
                                    (*lexer.Token)(OpenParenthesis 1447 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) EqualityExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(StringLiteral 1448 4),
                                        (*lexer.Token)(Whitespace 1452 1),
                                        (*lexer.Token)(EqualsEqualsEquals 1453 3),
                                        (*lexer.Token)(Whitespace 1456 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SubscriptExpression,
                                          Children: ([]phrase.AstNode) (len=4) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) SimpleVariable,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(VariableName 1457 4)
                                              }
                                            }),
                                            (*lexer.Token)(OpenBracket 1461 1),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) SimpleVariable,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(VariableName 1462 8)
                                              }
                                            }),
                                            (*lexer.Token)(CloseBracket 1470 1)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 1471 1),
                                    (*lexer.Token)(Whitespace 1472 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 1473 1),
                                        (*lexer.Token)(Whitespace 1474 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ReturnStatement,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*lexer.Token)(Return 1487 6),
                                                (*lexer.Token)(Whitespace 1493 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) FunctionCallExpression,
                                                  Children: ([]phrase.AstNode) (len=6) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 1494 11)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(OpenParenthesis 1505 1),
                                                    (*lexer.Token)(Whitespace 1506 17),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ArgumentExpressionList,
                                                      Children: ([]phrase.AstNode) (len=7) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArrayCreationExpression,
                                                          Children: ([]phrase.AstNode) (len=3) {
                                                            (*lexer.Token)(OpenBracket 1523 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ArrayInitialiserList,
                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ArrayElement,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ArrayValue,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(StringLiteral 1524 6)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Comma 1530 1),
                                                                (*lexer.Token)(Whitespace 1531 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ArrayElement,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ArrayValue,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(StringLiteral 1532 6)
                                                                      }
                                                                    })
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseBracket 1538 1)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Comma 1539 1),
                                                        (*lexer.Token)(Whitespace 1540 17),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArrayCreationExpression,
                                                          Children: ([]phrase.AstNode) (len=3) {
                                                            (*lexer.Token)(OpenBracket 1557 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ArrayInitialiserList,
                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ArrayElement,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ArrayValue,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(StringLiteral 1558 4)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Comma 1562 1),
                                                                (*lexer.Token)(Whitespace 1563 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ArrayElement,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ArrayValue,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(StringLiteral 1564 4)
                                                                      }
                                                                    })
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseBracket 1568 1)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Comma 1569 1),
                                                        (*lexer.Token)(Whitespace 1570 17),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) FunctionCallExpression,
                                                          Children: ([]phrase.AstNode) (len=4) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) QualifiedName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(Name 1587 6)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(OpenParenthesis 1593 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ArgumentExpressionList,
                                                              Children: ([]phrase.AstNode) (len=7) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(VariableName 1594 4)
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Comma 1598 1),
                                                                (*lexer.Token)(Whitespace 1599 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                                  Children: ([]phrase.AstNode) (len=5) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(VariableName 1600 8)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Whitespace 1608 1),
                                                                    (*lexer.Token)(Plus 1609 1),
                                                                    (*lexer.Token)(Whitespace 1610 1),
                                                                    (*lexer.Token)(IntegerLiteral 1611 1)
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Comma 1612 1),
                                                                (*lexer.Token)(Whitespace 1613 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) UnaryOpExpression,
                                                                  Children: ([]phrase.AstNode) (len=2) {
                                                                    (*lexer.Token)(Minus 1614 1),
                                                                    (*lexer.Token)(IntegerLiteral 1615 1)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseParenthesis 1616 1)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 1617 13),
                                                    (*lexer.Token)(CloseParenthesis 1630 1)
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 1631 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 1632 9),
                                        (*lexer.Token)(CloseBrace 1641 1)
                                      }
                                    }),
                                    (*lexer.Token)(Whitespace 1642 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ElseClause,
                                      Children: ([]phrase.AstNode) (len=3) {
                                        (*lexer.Token)(Else 1643 4),
                                        (*lexer.Token)(Whitespace 1647 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) CompoundStatement,
                                          Children: ([]phrase.AstNode) (len=5) {
                                            (*lexer.Token)(OpenBrace 1648 1),
                                            (*lexer.Token)(Whitespace 1649 13),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) StatementList,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) ReturnStatement,
                                                  Children: ([]phrase.AstNode) (len=4) {
                                                    (*lexer.Token)(Return 1662 6),
                                                    (*lexer.Token)(Whitespace 1668 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ScopedCallExpression,
                                                      Children: ([]phrase.AstNode) (len=8) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) QualifiedName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) NamespaceName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 1669 4)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(ColonColon 1673 2),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ScopedMemberName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) Identifier,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 1675 20)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenParenthesis 1695 1),
                                                        (*lexer.Token)(Whitespace 1696 17),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                          Children: ([]phrase.AstNode) (len=7) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) FunctionCallExpression,
                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(Name 1713 6)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(OpenParenthesis 1719 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                  Children: ([]phrase.AstNode) (len=7) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(VariableName 1720 4)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Comma 1724 1),
                                                                    (*lexer.Token)(Whitespace 1725 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                                      Children: ([]phrase.AstNode) (len=5) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(VariableName 1726 8)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Whitespace 1734 1),
                                                                        (*lexer.Token)(Plus 1735 1),
                                                                        (*lexer.Token)(Whitespace 1736 1),
                                                                        (*lexer.Token)(IntegerLiteral 1737 1)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Comma 1738 1),
                                                                    (*lexer.Token)(Whitespace 1739 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) UnaryOpExpression,
                                                                      Children: ([]phrase.AstNode) (len=2) {
                                                                        (*lexer.Token)(Minus 1740 1),
                                                                        (*lexer.Token)(IntegerLiteral 1741 1)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(CloseParenthesis 1742 1)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Comma 1743 1),
                                                            (*lexer.Token)(Whitespace 1744 1),
                                                            (*lexer.Token)(StringLiteral 1745 3),
                                                            (*lexer.Token)(Comma 1748 1),
                                                            (*lexer.Token)(Whitespace 1749 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 1750 19)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(Whitespace 1769 13),
                                                        (*lexer.Token)(CloseParenthesis 1782 1)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Semicolon 1783 1)
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Whitespace 1784 9),
                                            (*lexer.Token)(CloseBrace 1793 1)
                                          }
                                        })
                                      }
                                    })
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 1794 5),
                            (*lexer.Token)(CloseBrace 1799 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 1800 6),
                (*lexer.Token)(DocumentComment 1806 366),
                (*lexer.Token)(Whitespace 2172 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=10) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Public 2177 6),
                            (*lexer.Token)(Whitespace 2183 1),
                            (*lexer.Token)(Static 2184 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 2190 1),
                        (*lexer.Token)(Function 2191 8),
                        (*lexer.Token)(Whitespace 2199 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 2200 20)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 2220 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclarationList,
                          Children: ([]phrase.AstNode) (len=7) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2221 6)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2227 1),
                                (*lexer.Token)(VariableName 2228 4)
                              }
                            }),
                            (*lexer.Token)(Comma 2232 1),
                            (*lexer.Token)(Whitespace 2233 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*lexer.Token)(VariableName 2234 6)
                              }
                            }),
                            (*lexer.Token)(Comma 2240 1),
                            (*lexer.Token)(Whitespace 2241 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=7) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2242 4)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2246 1),
                                (*lexer.Token)(VariableName 2247 19),
                                (*lexer.Token)(Whitespace 2266 1),
                                (*lexer.Token)(Equals 2267 1),
                                (*lexer.Token)(Whitespace 2268 1),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ConstantAccessExpression,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 2269 4)
                                          }
                                        })
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(CloseParenthesis 2273 1),
                        (*lexer.Token)(Whitespace 2274 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 2275 1),
                            (*lexer.Token)(Whitespace 2276 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 2277 6)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 2283 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 2284 1),
                            (*lexer.Token)(Whitespace 2285 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=7) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=7) {
                                    (*lexer.Token)(If 2294 2),
                                    (*lexer.Token)(Whitespace 2296 1),
                                    (*lexer.Token)(OpenParenthesis 2297 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) EqualityExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ConstantAccessExpression,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) QualifiedName,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) NamespaceName,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(Name 2298 4)
                                                  }
                                                })
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 2302 1),
                                        (*lexer.Token)(ExclamationEqualsEquals 2303 3),
                                        (*lexer.Token)(Whitespace 2306 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2307 6)
                                          }
                                        })
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 2313 1),
                                    (*lexer.Token)(Whitespace 2314 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 2315 1),
                                        (*lexer.Token)(Whitespace 2316 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ExpressionStatement,
                                              Children: ([]phrase.AstNode) (len=2) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 2329 4)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 2333 1),
                                                    (*lexer.Token)(Equals 2334 1),
                                                    (*lexer.Token)(Whitespace 2335 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                                      Children: ([]phrase.AstNode) (len=4) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) QualifiedName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) NamespaceName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 2336 11)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenParenthesis 2347 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                          Children: ([]phrase.AstNode) (len=7) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) AdditiveExpression,
                                                              Children: ([]phrase.AstNode) (len=5) {
                                                                (*lexer.Token)(StringLiteral 2348 4),
                                                                (*lexer.Token)(Whitespace 2352 1),
                                                                (*lexer.Token)(Dot 2353 1),
                                                                (*lexer.Token)(Whitespace 2354 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(VariableName 2355 6)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(Comma 2361 1),
                                                            (*lexer.Token)(Whitespace 2362 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 2363 6)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Comma 2369 1),
                                                            (*lexer.Token)(Whitespace 2370 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(VariableName 2371 4)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseParenthesis 2375 1)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 2376 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 2377 9),
                                        (*lexer.Token)(CloseBrace 2386 1)
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2387 10),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ExpressionStatement,
                                  Children: ([]phrase.AstNode) (len=2) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 2397 6)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 2403 1),
                                        (*lexer.Token)(Equals 2404 1),
                                        (*lexer.Token)(Whitespace 2405 1),
                                        (*lexer.Token)(StringLiteral 2406 2)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 2408 1)
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2409 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=7) {
                                    (*lexer.Token)(If 2418 2),
                                    (*lexer.Token)(Whitespace 2420 1),
                                    (*lexer.Token)(OpenParenthesis 2421 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) SimpleVariable,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(VariableName 2422 19)
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 2441 1),
                                    (*lexer.Token)(Whitespace 2442 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 2443 1),
                                        (*lexer.Token)(Whitespace 2444 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ExpressionStatement,
                                              Children: ([]phrase.AstNode) (len=2) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 2457 6)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 2463 1),
                                                    (*lexer.Token)(Equals 2464 1),
                                                    (*lexer.Token)(Whitespace 2465 1),
                                                    (*lexer.Token)(StringLiteral 2466 22)
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 2488 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 2489 9),
                                        (*lexer.Token)(CloseBrace 2498 1)
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 2499 10),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ReturnStatement,
                                  Children: ([]phrase.AstNode) (len=4) {
                                    (*lexer.Token)(Return 2509 6),
                                    (*lexer.Token)(Whitespace 2515 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) QualifiedName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) NamespaceName,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(Name 2516 21)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 2537 1),
                                        (*lexer.Token)(Whitespace 2538 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=7) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AdditiveExpression,
                                              Children: ([]phrase.AstNode) (len=5) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*lexer.Token)(StringLiteral 2551 53),
                                                    (*lexer.Token)(Whitespace 2604 1),
                                                    (*lexer.Token)(Dot 2605 1),
                                                    (*lexer.Token)(Whitespace 2606 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*lexer.Token)(VariableName 2607 6)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Whitespace 2613 1),
                                                (*lexer.Token)(Dot 2614 1),
                                                (*lexer.Token)(Whitespace 2615 1),
                                                (*lexer.Token)(StringLiteral 2616 4)
                                              }
                                            }),
                                            (*lexer.Token)(Comma 2620 1),
                                            (*lexer.Token)(Whitespace 2621 13),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) AnonymousFunctionCreationExpression,
                                              Children: ([]phrase.AstNode) (len=3) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AnonymousFunctionHeader,
                                                  Children: ([]phrase.AstNode) (len=4) {
                                                    (*lexer.Token)(Function 2634 8),
                                                    (*lexer.Token)(OpenParenthesis 2642 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ParameterDeclarationList,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ParameterDeclaration,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(VariableName 2643 8)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(CloseParenthesis 2651 1)
                                                  }
                                                }),
                                                (*lexer.Token)(Whitespace 2652 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) FunctionDeclarationBody,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*lexer.Token)(OpenBrace 2653 1),
                                                    (*lexer.Token)(Whitespace 2654 17),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) StatementList,
                                                      Children: ([]phrase.AstNode) (len=3) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ExpressionStatement,
                                                          Children: ([]phrase.AstNode) (len=2) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) SimpleAssignmentExpression,
                                                              Children: ([]phrase.AstNode) (len=5) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(VariableName 2671 4)
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Whitespace 2675 1),
                                                                (*lexer.Token)(Equals 2676 1),
                                                                (*lexer.Token)(Whitespace 2677 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) SubscriptExpression,
                                                                  Children: ([]phrase.AstNode) (len=4) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(VariableName 2678 8)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(OpenBracket 2686 1),
                                                                    (*lexer.Token)(IntegerLiteral 2687 1),
                                                                    (*lexer.Token)(CloseBracket 2688 1)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(Semicolon 2689 1)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Whitespace 2690 18),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) IfStatement,
                                                          Children: ([]phrase.AstNode) (len=11) {
                                                            (*lexer.Token)(If 2708 2),
                                                            (*lexer.Token)(Whitespace 2710 1),
                                                            (*lexer.Token)(OpenParenthesis 2711 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) IssetIntrinsic,
                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                (*lexer.Token)(Isset 2712 5),
                                                                (*lexer.Token)(OpenParenthesis 2717 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) VariableList,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) SubscriptExpression,
                                                                      Children: ([]phrase.AstNode) (len=4) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) ScopedPropertyAccessExpression,
                                                                          Children: ([]phrase.AstNode) (len=3) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) QualifiedName,
                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*lexer.Token)(Name 2718 4)
                                                                                  }
                                                                                })
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(ColonColon 2722 2),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) ScopedMemberName,
                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                (*lexer.Token)(VariableName 2724 13)
                                                                              }
                                                                            })
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(OpenBracket 2737 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(VariableName 2738 4)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(CloseBracket 2742 1)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(CloseParenthesis 2743 1)
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseParenthesis 2744 1),
                                                            (*lexer.Token)(Whitespace 2745 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) CompoundStatement,
                                                              Children: ([]phrase.AstNode) (len=5) {
                                                                (*lexer.Token)(OpenBrace 2746 1),
                                                                (*lexer.Token)(Whitespace 2747 21),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) StatementList,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ReturnStatement,
                                                                      Children: ([]phrase.AstNode) (len=4) {
                                                                        (*lexer.Token)(Return 2768 6),
                                                                        (*lexer.Token)(Whitespace 2774 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SubscriptExpression,
                                                                          Children: ([]phrase.AstNode) (len=4) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) ScopedPropertyAccessExpression,
                                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*lexer.Token)(Name 2775 4)
                                                                                      }
                                                                                    })
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(ColonColon 2779 2),
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) ScopedMemberName,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*lexer.Token)(VariableName 2781 13)
                                                                                  }
                                                                                })
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(OpenBracket 2794 1),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                (*lexer.Token)(VariableName 2795 4)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(CloseBracket 2799 1)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Semicolon 2800 1)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Whitespace 2801 17),
                                                                (*lexer.Token)(CloseBrace 2818 1)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Whitespace 2819 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ElseIfClauseList,
                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ElseIfClause,
                                                                  Children: ([]phrase.AstNode) (len=7) {
                                                                    (*lexer.Token)(ElseIf 2820 6),
                                                                    (*lexer.Token)(Whitespace 2826 1),
                                                                    (*lexer.Token)(OpenParenthesis 2827 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) LogicalExpression,
                                                                      Children: ([]phrase.AstNode) (len=5) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) EqualityExpression,
                                                                          Children: ([]phrase.AstNode) (len=5) {
                                                                            (*lexer.Token)(StringLiteral 2828 3),
                                                                            (*lexer.Token)(Whitespace 2831 1),
                                                                            (*lexer.Token)(EqualsEqualsEquals 2832 3),
                                                                            (*lexer.Token)(Whitespace 2835 1),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) SubscriptExpression,
                                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*lexer.Token)(VariableName 2836 4)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(OpenBracket 2840 1),
                                                                                (*lexer.Token)(IntegerLiteral 2841 1),
                                                                                (*lexer.Token)(CloseBracket 2842 1)
                                                                              }
                                                                            })
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Whitespace 2843 1),
                                                                        (*lexer.Token)(BarBar 2844 2),
                                                                        (*lexer.Token)(Whitespace 2846 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) EqualityExpression,
                                                                          Children: ([]phrase.AstNode) (len=5) {
                                                                            (*lexer.Token)(StringLiteral 2847 3),
                                                                            (*lexer.Token)(Whitespace 2850 1),
                                                                            (*lexer.Token)(EqualsEqualsEquals 2851 3),
                                                                            (*lexer.Token)(Whitespace 2854 1),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) SubscriptExpression,
                                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*lexer.Token)(VariableName 2855 4)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(OpenBracket 2859 1),
                                                                                (*lexer.Token)(IntegerLiteral 2860 1),
                                                                                (*lexer.Token)(CloseBracket 2861 1)
                                                                              }
                                                                            })
                                                                          }
                                                                        })
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(CloseParenthesis 2862 1),
                                                                    (*lexer.Token)(Whitespace 2863 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) CompoundStatement,
                                                                      Children: ([]phrase.AstNode) (len=5) {
                                                                        (*lexer.Token)(OpenBrace 2864 1),
                                                                        (*lexer.Token)(Whitespace 2865 21),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) StatementList,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) ReturnStatement,
                                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                                (*lexer.Token)(Return 2886 6),
                                                                                (*lexer.Token)(Whitespace 2892 1),
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) FunctionCallExpression,
                                                                                  Children: ([]phrase.AstNode) (len=4) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) QualifiedName,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) NamespaceName,
                                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                                            (*lexer.Token)(Name 2893 3)
                                                                                          }
                                                                                        })
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(OpenParenthesis 2896 1),
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) FunctionCallExpression,
                                                                                          Children: ([]phrase.AstNode) (len=4) {
                                                                                            (*phrase.Phrase)({
                                                                                              Type: (phrase.PhraseType) QualifiedName,
                                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                                (*phrase.Phrase)({
                                                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                                    (*lexer.Token)(Name 2897 6)
                                                                                                  }
                                                                                                })
                                                                                              }
                                                                                            }),
                                                                                            (*lexer.Token)(OpenParenthesis 2903 1),
                                                                                            (*phrase.Phrase)({
                                                                                              Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                                (*phrase.Phrase)({
                                                                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                                    (*lexer.Token)(VariableName 2904 4)
                                                                                                  }
                                                                                                })
                                                                                              }
                                                                                            }),
                                                                                            (*lexer.Token)(CloseParenthesis 2908 1)
                                                                                          }
                                                                                        })
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(CloseParenthesis 2909 1)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(Semicolon 2910 1)
                                                                              }
                                                                            })
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Whitespace 2911 17),
                                                                        (*lexer.Token)(CloseBrace 2928 1)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Whitespace 2929 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ElseIfClause,
                                                                  Children: ([]phrase.AstNode) (len=7) {
                                                                    (*lexer.Token)(ElseIf 2930 6),
                                                                    (*lexer.Token)(Whitespace 2936 1),
                                                                    (*lexer.Token)(OpenParenthesis 2937 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) EqualityExpression,
                                                                      Children: ([]phrase.AstNode) (len=5) {
                                                                        (*lexer.Token)(StringLiteral 2938 3),
                                                                        (*lexer.Token)(Whitespace 2941 1),
                                                                        (*lexer.Token)(EqualsEqualsEquals 2942 3),
                                                                        (*lexer.Token)(Whitespace 2945 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SubscriptExpression,
                                                                          Children: ([]phrase.AstNode) (len=4) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                (*lexer.Token)(VariableName 2946 4)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(OpenBracket 2950 1),
                                                                            (*lexer.Token)(IntegerLiteral 2951 1),
                                                                            (*lexer.Token)(CloseBracket 2952 1)
                                                                          }
                                                                        })
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(CloseParenthesis 2953 1),
                                                                    (*lexer.Token)(Whitespace 2954 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) CompoundStatement,
                                                                      Children: ([]phrase.AstNode) (len=5) {
                                                                        (*lexer.Token)(OpenBrace 2955 1),
                                                                        (*lexer.Token)(Whitespace 2956 21),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) StatementList,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) ReturnStatement,
                                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                                (*lexer.Token)(Return 2977 6),
                                                                                (*lexer.Token)(Whitespace 2983 1),
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) ScopedCallExpression,
                                                                                  Children: ([]phrase.AstNode) (len=6) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) QualifiedName,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) NamespaceName,
                                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                                            (*lexer.Token)(Name 2984 4)
                                                                                          }
                                                                                        })
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(ColonColon 2988 2),
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) ScopedMemberName,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) Identifier,
                                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                                            (*lexer.Token)(Name 2990 15)
                                                                                          }
                                                                                        })
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(OpenParenthesis 3005 1),
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) FunctionCallExpression,
                                                                                          Children: ([]phrase.AstNode) (len=4) {
                                                                                            (*phrase.Phrase)({
                                                                                              Type: (phrase.PhraseType) QualifiedName,
                                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                                (*phrase.Phrase)({
                                                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                                    (*lexer.Token)(Name 3006 6)
                                                                                                  }
                                                                                                })
                                                                                              }
                                                                                            }),
                                                                                            (*lexer.Token)(OpenParenthesis 3012 1),
                                                                                            (*phrase.Phrase)({
                                                                                              Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                                (*phrase.Phrase)({
                                                                                                  Type: (phrase.PhraseType) SubscriptExpression,
                                                                                                  Children: ([]phrase.AstNode) (len=4) {
                                                                                                    (*phrase.Phrase)({
                                                                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                                        (*lexer.Token)(VariableName 3013 8)
                                                                                                      }
                                                                                                    }),
                                                                                                    (*lexer.Token)(OpenBracket 3021 1),
                                                                                                    (*lexer.Token)(IntegerLiteral 3022 1),
                                                                                                    (*lexer.Token)(CloseBracket 3023 1)
                                                                                                  }
                                                                                                })
                                                                                              }
                                                                                            }),
                                                                                            (*lexer.Token)(CloseParenthesis 3024 1)
                                                                                          }
                                                                                        })
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(CloseParenthesis 3025 1)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(Semicolon 3026 1)
                                                                              }
                                                                            })
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Whitespace 3027 17),
                                                                        (*lexer.Token)(CloseBrace 3044 1)
                                                                      }
                                                                    })
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(Whitespace 3045 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ElseClause,
                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                (*lexer.Token)(Else 3046 4),
                                                                (*lexer.Token)(Whitespace 3050 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) CompoundStatement,
                                                                  Children: ([]phrase.AstNode) (len=5) {
                                                                    (*lexer.Token)(OpenBrace 3051 1),
                                                                    (*lexer.Token)(Whitespace 3052 21),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) StatementList,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) ReturnStatement,
                                                                          Children: ([]phrase.AstNode) (len=4) {
                                                                            (*lexer.Token)(Return 3073 6),
                                                                            (*lexer.Token)(Whitespace 3079 1),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) FunctionCallExpression,
                                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*lexer.Token)(Name 3080 3)
                                                                                      }
                                                                                    })
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(OpenParenthesis 3083 1),
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                                                                      Children: ([]phrase.AstNode) (len=4) {
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) QualifiedName,
                                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                                            (*phrase.Phrase)({
                                                                                              Type: (phrase.PhraseType) NamespaceName,
                                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                                (*lexer.Token)(Name 3084 6)
                                                                                              }
                                                                                            })
                                                                                          }
                                                                                        }),
                                                                                        (*lexer.Token)(OpenParenthesis 3090 1),
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                                            (*phrase.Phrase)({
                                                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                                (*lexer.Token)(VariableName 3091 4)
                                                                                              }
                                                                                            })
                                                                                          }
                                                                                        }),
                                                                                        (*lexer.Token)(CloseParenthesis 3095 1)
                                                                                      }
                                                                                    })
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(CloseParenthesis 3096 1)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(Semicolon 3097 1)
                                                                          }
                                                                        })
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Whitespace 3098 17),
                                                                    (*lexer.Token)(CloseBrace 3115 1)
                                                                  }
                                                                })
                                                              }
                                                            })
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 3116 13),
                                                    (*lexer.Token)(CloseBrace 3129 1)
                                                  }
                                                })
                                              }
                                            }),
                                            (*lexer.Token)(Comma 3130 1),
                                            (*lexer.Token)(Whitespace 3131 13),
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) SimpleVariable,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*lexer.Token)(VariableName 3144 4)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3148 9),
                                        (*lexer.Token)(CloseParenthesis 3157 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 3158 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 3159 5),
                            (*lexer.Token)(CloseBrace 3164 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 3165 6),
                (*lexer.Token)(DocumentComment 3171 190),
                (*lexer.Token)(Whitespace 3361 5),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=10) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Private 3366 7),
                            (*lexer.Token)(Whitespace 3373 1),
                            (*lexer.Token)(Static 3374 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 3380 1),
                        (*lexer.Token)(Function 3381 8),
                        (*lexer.Token)(Whitespace 3389 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 3390 15)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 3405 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ParameterDeclarationList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) ParameterDeclaration,
                              Children: ([]phrase.AstNode) (len=3) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) TypeDeclaration,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) QualifiedName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) NamespaceName,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(Name 3406 3)
                                          }
                                        })
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 3409 1),
                                (*lexer.Token)(VariableName 3410 4)
                              }
                            })
                          }
                        }),
                        (*lexer.Token)(CloseParenthesis 3414 1),
                        (*lexer.Token)(Whitespace 3415 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 3416 1),
                            (*lexer.Token)(Whitespace 3417 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 3418 6)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 3424 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 3425 1),
                            (*lexer.Token)(Whitespace 3426 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=9) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=7) {
                                    (*lexer.Token)(If 3435 2),
                                    (*lexer.Token)(Whitespace 3437 1),
                                    (*lexer.Token)(OpenParenthesis 3438 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) RelationalExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 3439 4)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3443 1),
                                        (*lexer.Token)(LessThanEquals 3444 2),
                                        (*lexer.Token)(Whitespace 3446 1),
                                        (*lexer.Token)(IntegerLiteral 3447 4)
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 3451 1),
                                    (*lexer.Token)(Whitespace 3452 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 3453 1),
                                        (*lexer.Token)(Whitespace 3454 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ReturnStatement,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*lexer.Token)(Return 3467 6),
                                                (*lexer.Token)(Whitespace 3473 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) FunctionCallExpression,
                                                  Children: ([]phrase.AstNode) (len=4) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) QualifiedName,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) NamespaceName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(Name 3474 3)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(OpenParenthesis 3477 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) ArgumentExpressionList,
                                                      Children: ([]phrase.AstNode) (len=1) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*lexer.Token)(VariableName 3478 4)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(CloseParenthesis 3482 1)
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 3483 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3484 9),
                                        (*lexer.Token)(CloseBrace 3493 1)
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 3494 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=7) {
                                    (*lexer.Token)(If 3503 2),
                                    (*lexer.Token)(Whitespace 3505 1),
                                    (*lexer.Token)(OpenParenthesis 3506 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) RelationalExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 3507 4)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3511 1),
                                        (*lexer.Token)(LessThanEquals 3512 2),
                                        (*lexer.Token)(Whitespace 3514 1),
                                        (*lexer.Token)(IntegerLiteral 3515 5)
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 3520 1),
                                    (*lexer.Token)(Whitespace 3521 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 3522 1),
                                        (*lexer.Token)(Whitespace 3523 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ReturnStatement,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*lexer.Token)(Return 3536 6),
                                                (*lexer.Token)(Whitespace 3542 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                                      Children: ([]phrase.AstNode) (len=4) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) QualifiedName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) NamespaceName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 3543 3)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenParenthesis 3546 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) AdditiveExpression,
                                                              Children: ([]phrase.AstNode) (len=5) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                    (*lexer.Token)(OpenParenthesis 3547 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) ShiftExpression,
                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(VariableName 3548 4)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(GreaterThanGreaterThan 3552 2),
                                                                        (*lexer.Token)(IntegerLiteral 3554 1)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(CloseParenthesis 3555 1)
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Whitespace 3556 1),
                                                                (*lexer.Token)(Plus 3557 1),
                                                                (*lexer.Token)(Whitespace 3558 1),
                                                                (*lexer.Token)(IntegerLiteral 3559 4)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseParenthesis 3563 1)
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 3564 1),
                                                    (*lexer.Token)(Dot 3565 1),
                                                    (*lexer.Token)(Whitespace 3566 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                                      Children: ([]phrase.AstNode) (len=4) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) QualifiedName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) NamespaceName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 3567 3)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenParenthesis 3570 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) AdditiveExpression,
                                                              Children: ([]phrase.AstNode) (len=5) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                    (*lexer.Token)(OpenParenthesis 3571 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) BitwiseExpression,
                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(VariableName 3572 4)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Ampersand 3576 1),
                                                                        (*lexer.Token)(IntegerLiteral 3577 4)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(CloseParenthesis 3581 1)
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Whitespace 3582 1),
                                                                (*lexer.Token)(Plus 3583 1),
                                                                (*lexer.Token)(Whitespace 3584 1),
                                                                (*lexer.Token)(IntegerLiteral 3585 4)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseParenthesis 3589 1)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 3590 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3591 9),
                                        (*lexer.Token)(CloseBrace 3600 1)
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 3601 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=7) {
                                    (*lexer.Token)(If 3610 2),
                                    (*lexer.Token)(Whitespace 3612 1),
                                    (*lexer.Token)(OpenParenthesis 3613 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) RelationalExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 3614 4)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3618 1),
                                        (*lexer.Token)(LessThanEquals 3619 2),
                                        (*lexer.Token)(Whitespace 3621 1),
                                        (*lexer.Token)(IntegerLiteral 3622 6)
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 3628 1),
                                    (*lexer.Token)(Whitespace 3629 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 3630 1),
                                        (*lexer.Token)(Whitespace 3631 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ReturnStatement,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*lexer.Token)(Return 3644 6),
                                                (*lexer.Token)(Whitespace 3650 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                      Children: ([]phrase.AstNode) (len=5) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) FunctionCallExpression,
                                                          Children: ([]phrase.AstNode) (len=4) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) QualifiedName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(Name 3651 3)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(OpenParenthesis 3654 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ArgumentExpressionList,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                                  Children: ([]phrase.AstNode) (len=5) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                        (*lexer.Token)(OpenParenthesis 3655 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) ShiftExpression,
                                                                          Children: ([]phrase.AstNode) (len=3) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) SimpleVariable,
                                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                                (*lexer.Token)(VariableName 3656 4)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(GreaterThanGreaterThan 3660 2),
                                                                            (*lexer.Token)(IntegerLiteral 3662 2)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(CloseParenthesis 3664 1)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Whitespace 3665 1),
                                                                    (*lexer.Token)(Plus 3666 1),
                                                                    (*lexer.Token)(Whitespace 3667 1),
                                                                    (*lexer.Token)(IntegerLiteral 3668 4)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseParenthesis 3672 1)
                                                          }
                                                        }),
                                                        (*lexer.Token)(Whitespace 3673 1),
                                                        (*lexer.Token)(Dot 3674 1),
                                                        (*lexer.Token)(Whitespace 3675 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) FunctionCallExpression,
                                                          Children: ([]phrase.AstNode) (len=4) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) QualifiedName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(Name 3676 3)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(OpenParenthesis 3679 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ArgumentExpressionList,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                                  Children: ([]phrase.AstNode) (len=5) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                        (*lexer.Token)(OpenParenthesis 3680 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) BitwiseExpression,
                                                                          Children: ([]phrase.AstNode) (len=3) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                                (*lexer.Token)(OpenParenthesis 3681 1),
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) ShiftExpression,
                                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*lexer.Token)(VariableName 3682 4)
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(GreaterThanGreaterThan 3686 2),
                                                                                    (*lexer.Token)(IntegerLiteral 3688 1)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(CloseParenthesis 3689 1)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(Ampersand 3690 1),
                                                                            (*lexer.Token)(IntegerLiteral 3691 4)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(CloseParenthesis 3695 1)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Whitespace 3696 1),
                                                                    (*lexer.Token)(Plus 3697 1),
                                                                    (*lexer.Token)(Whitespace 3698 1),
                                                                    (*lexer.Token)(IntegerLiteral 3699 4)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseParenthesis 3703 1)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 3704 1),
                                                    (*lexer.Token)(Dot 3705 1),
                                                    (*lexer.Token)(Whitespace 3706 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                                      Children: ([]phrase.AstNode) (len=4) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) QualifiedName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) NamespaceName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 3707 3)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenParenthesis 3710 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) AdditiveExpression,
                                                              Children: ([]phrase.AstNode) (len=5) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                    (*lexer.Token)(OpenParenthesis 3711 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) BitwiseExpression,
                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(VariableName 3712 4)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Ampersand 3716 1),
                                                                        (*lexer.Token)(IntegerLiteral 3717 4)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(CloseParenthesis 3721 1)
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Whitespace 3722 1),
                                                                (*lexer.Token)(Plus 3723 1),
                                                                (*lexer.Token)(Whitespace 3724 1),
                                                                (*lexer.Token)(IntegerLiteral 3725 4)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseParenthesis 3729 1)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 3730 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3731 9),
                                        (*lexer.Token)(CloseBrace 3740 1)
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 3741 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) IfStatement,
                                  Children: ([]phrase.AstNode) (len=7) {
                                    (*lexer.Token)(If 3750 2),
                                    (*lexer.Token)(Whitespace 3752 1),
                                    (*lexer.Token)(OpenParenthesis 3753 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) RelationalExpression,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) SimpleVariable,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(VariableName 3754 4)
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3758 1),
                                        (*lexer.Token)(LessThanEquals 3759 2),
                                        (*lexer.Token)(Whitespace 3761 1),
                                        (*lexer.Token)(IntegerLiteral 3762 8)
                                      }
                                    }),
                                    (*lexer.Token)(CloseParenthesis 3770 1),
                                    (*lexer.Token)(Whitespace 3771 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) CompoundStatement,
                                      Children: ([]phrase.AstNode) (len=5) {
                                        (*lexer.Token)(OpenBrace 3772 1),
                                        (*lexer.Token)(Whitespace 3773 13),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) StatementList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) ReturnStatement,
                                              Children: ([]phrase.AstNode) (len=4) {
                                                (*lexer.Token)(Return 3786 6),
                                                (*lexer.Token)(Whitespace 3792 1),
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                  Children: ([]phrase.AstNode) (len=5) {
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                      Children: ([]phrase.AstNode) (len=5) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) AdditiveExpression,
                                                          Children: ([]phrase.AstNode) (len=5) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) FunctionCallExpression,
                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(Name 3793 3)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(OpenParenthesis 3796 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                                      Children: ([]phrase.AstNode) (len=5) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                          Children: ([]phrase.AstNode) (len=3) {
                                                                            (*lexer.Token)(OpenParenthesis 3797 1),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) ShiftExpression,
                                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) SimpleVariable,
                                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                                    (*lexer.Token)(VariableName 3798 4)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(GreaterThanGreaterThan 3802 2),
                                                                                (*lexer.Token)(IntegerLiteral 3804 2)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(CloseParenthesis 3806 1)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Whitespace 3807 1),
                                                                        (*lexer.Token)(Plus 3808 1),
                                                                        (*lexer.Token)(Whitespace 3809 1),
                                                                        (*lexer.Token)(IntegerLiteral 3810 4)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(CloseParenthesis 3814 1)
                                                              }
                                                            }),
                                                            (*lexer.Token)(Whitespace 3815 1),
                                                            (*lexer.Token)(Dot 3816 1),
                                                            (*lexer.Token)(Whitespace 3817 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) FunctionCallExpression,
                                                              Children: ([]phrase.AstNode) (len=4) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) QualifiedName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) NamespaceName,
                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                        (*lexer.Token)(Name 3818 3)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(OpenParenthesis 3821 1),
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) ArgumentExpressionList,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) AdditiveExpression,
                                                                      Children: ([]phrase.AstNode) (len=5) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                          Children: ([]phrase.AstNode) (len=3) {
                                                                            (*lexer.Token)(OpenParenthesis 3822 1),
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) BitwiseExpression,
                                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                                    (*lexer.Token)(OpenParenthesis 3823 1),
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) ShiftExpression,
                                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                                        (*phrase.Phrase)({
                                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                                            (*lexer.Token)(VariableName 3824 4)
                                                                                          }
                                                                                        }),
                                                                                        (*lexer.Token)(GreaterThanGreaterThan 3828 2),
                                                                                        (*lexer.Token)(IntegerLiteral 3830 2)
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(CloseParenthesis 3832 1)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(Ampersand 3833 1),
                                                                                (*lexer.Token)(IntegerLiteral 3834 4)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(CloseParenthesis 3838 1)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Whitespace 3839 1),
                                                                        (*lexer.Token)(Plus 3840 1),
                                                                        (*lexer.Token)(Whitespace 3841 1),
                                                                        (*lexer.Token)(IntegerLiteral 3842 4)
                                                                      }
                                                                    })
                                                                  }
                                                                }),
                                                                (*lexer.Token)(CloseParenthesis 3846 1)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(Whitespace 3847 18),
                                                        (*lexer.Token)(Dot 3865 1),
                                                        (*lexer.Token)(Whitespace 3866 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) FunctionCallExpression,
                                                          Children: ([]phrase.AstNode) (len=4) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) QualifiedName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) NamespaceName,
                                                                  Children: ([]phrase.AstNode) (len=1) {
                                                                    (*lexer.Token)(Name 3867 3)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(OpenParenthesis 3870 1),
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) ArgumentExpressionList,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) AdditiveExpression,
                                                                  Children: ([]phrase.AstNode) (len=5) {
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                        (*lexer.Token)(OpenParenthesis 3871 1),
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) BitwiseExpression,
                                                                          Children: ([]phrase.AstNode) (len=3) {
                                                                            (*phrase.Phrase)({
                                                                              Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                              Children: ([]phrase.AstNode) (len=3) {
                                                                                (*lexer.Token)(OpenParenthesis 3872 1),
                                                                                (*phrase.Phrase)({
                                                                                  Type: (phrase.PhraseType) ShiftExpression,
                                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                                    (*phrase.Phrase)({
                                                                                      Type: (phrase.PhraseType) SimpleVariable,
                                                                                      Children: ([]phrase.AstNode) (len=1) {
                                                                                        (*lexer.Token)(VariableName 3873 4)
                                                                                      }
                                                                                    }),
                                                                                    (*lexer.Token)(GreaterThanGreaterThan 3877 2),
                                                                                    (*lexer.Token)(IntegerLiteral 3879 1)
                                                                                  }
                                                                                }),
                                                                                (*lexer.Token)(CloseParenthesis 3880 1)
                                                                              }
                                                                            }),
                                                                            (*lexer.Token)(Ampersand 3881 1),
                                                                            (*lexer.Token)(IntegerLiteral 3882 4)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(CloseParenthesis 3886 1)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(Whitespace 3887 1),
                                                                    (*lexer.Token)(Plus 3888 1),
                                                                    (*lexer.Token)(Whitespace 3889 1),
                                                                    (*lexer.Token)(IntegerLiteral 3890 4)
                                                                  }
                                                                })
                                                              }
                                                            }),
                                                            (*lexer.Token)(CloseParenthesis 3894 1)
                                                          }
                                                        })
                                                      }
                                                    }),
                                                    (*lexer.Token)(Whitespace 3895 1),
                                                    (*lexer.Token)(Dot 3896 1),
                                                    (*lexer.Token)(Whitespace 3897 1),
                                                    (*phrase.Phrase)({
                                                      Type: (phrase.PhraseType) FunctionCallExpression,
                                                      Children: ([]phrase.AstNode) (len=4) {
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) QualifiedName,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) NamespaceName,
                                                              Children: ([]phrase.AstNode) (len=1) {
                                                                (*lexer.Token)(Name 3898 3)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(OpenParenthesis 3901 1),
                                                        (*phrase.Phrase)({
                                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                                          Children: ([]phrase.AstNode) (len=1) {
                                                            (*phrase.Phrase)({
                                                              Type: (phrase.PhraseType) AdditiveExpression,
                                                              Children: ([]phrase.AstNode) (len=5) {
                                                                (*phrase.Phrase)({
                                                                  Type: (phrase.PhraseType) EncapsulatedExpression,
                                                                  Children: ([]phrase.AstNode) (len=3) {
                                                                    (*lexer.Token)(OpenParenthesis 3902 1),
                                                                    (*phrase.Phrase)({
                                                                      Type: (phrase.PhraseType) BitwiseExpression,
                                                                      Children: ([]phrase.AstNode) (len=3) {
                                                                        (*phrase.Phrase)({
                                                                          Type: (phrase.PhraseType) SimpleVariable,
                                                                          Children: ([]phrase.AstNode) (len=1) {
                                                                            (*lexer.Token)(VariableName 3903 4)
                                                                          }
                                                                        }),
                                                                        (*lexer.Token)(Ampersand 3907 1),
                                                                        (*lexer.Token)(IntegerLiteral 3908 4)
                                                                      }
                                                                    }),
                                                                    (*lexer.Token)(CloseParenthesis 3912 1)
                                                                  }
                                                                }),
                                                                (*lexer.Token)(Whitespace 3913 1),
                                                                (*lexer.Token)(Plus 3914 1),
                                                                (*lexer.Token)(Whitespace 3915 1),
                                                                (*lexer.Token)(IntegerLiteral 3916 4)
                                                              }
                                                            })
                                                          }
                                                        }),
                                                        (*lexer.Token)(CloseParenthesis 3920 1)
                                                      }
                                                    })
                                                  }
                                                }),
                                                (*lexer.Token)(Semicolon 3921 1)
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(Whitespace 3922 9),
                                        (*lexer.Token)(CloseBrace 3931 1)
                                      }
                                    })
                                  }
                                }),
                                (*lexer.Token)(Whitespace 3932 9),
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ThrowStatement,
                                  Children: ([]phrase.AstNode) (len=4) {
                                    (*lexer.Token)(Throw 3941 5),
                                    (*lexer.Token)(Whitespace 3946 1),
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) ObjectCreationExpression,
                                      Children: ([]phrase.AstNode) (len=6) {
                                        (*lexer.Token)(New 3947 3),
                                        (*lexer.Token)(Whitespace 3950 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ClassTypeDesignator,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*phrase.Phrase)({
                                              Type: (phrase.PhraseType) QualifiedName,
                                              Children: ([]phrase.AstNode) (len=1) {
                                                (*phrase.Phrase)({
                                                  Type: (phrase.PhraseType) NamespaceName,
                                                  Children: ([]phrase.AstNode) (len=1) {
                                                    (*lexer.Token)(Name 3951 5)
                                                  }
                                                })
                                              }
                                            })
                                          }
                                        }),
                                        (*lexer.Token)(OpenParenthesis 3956 1),
                                        (*phrase.Phrase)({
                                          Type: (phrase.PhraseType) ArgumentExpressionList,
                                          Children: ([]phrase.AstNode) (len=1) {
                                            (*lexer.Token)(StringLiteral 3957 62)
                                          }
                                        }),
                                        (*lexer.Token)(CloseParenthesis 4019 1)
                                      }
                                    }),
                                    (*lexer.Token)(Semicolon 4020 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 4021 5),
                            (*lexer.Token)(CloseBrace 4026 1)
                          }
                        })
                      }
                    })
                  }
                }),
                (*lexer.Token)(Whitespace 4027 10),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) MethodDeclaration,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationHeader,
                      Children: ([]phrase.AstNode) (len=9) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) MemberModifierList,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Public 4037 6)
                          }
                        }),
                        (*lexer.Token)(Whitespace 4043 1),
                        (*lexer.Token)(Function 4044 8),
                        (*lexer.Token)(Whitespace 4052 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) Identifier,
                          Children: ([]phrase.AstNode) (len=1) {
                            (*lexer.Token)(Name 4053 7)
                          }
                        }),
                        (*lexer.Token)(OpenParenthesis 4060 1),
                        (*lexer.Token)(CloseParenthesis 4061 1),
                        (*lexer.Token)(Whitespace 4062 1),
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) ReturnType,
                          Children: ([]phrase.AstNode) (len=3) {
                            (*lexer.Token)(Colon 4063 1),
                            (*lexer.Token)(Whitespace 4064 1),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) TypeDeclaration,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) QualifiedName,
                                  Children: ([]phrase.AstNode) (len=1) {
                                    (*phrase.Phrase)({
                                      Type: (phrase.PhraseType) NamespaceName,
                                      Children: ([]phrase.AstNode) (len=1) {
                                        (*lexer.Token)(Name 4065 6)
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }
                        })
                      }
                    }),
                    (*lexer.Token)(Whitespace 4071 1),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) MethodDeclarationBody,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*phrase.Phrase)({
                          Type: (phrase.PhraseType) CompoundStatement,
                          Children: ([]phrase.AstNode) (len=5) {
                            (*lexer.Token)(OpenBrace 4072 1),
                            (*lexer.Token)(Whitespace 4073 9),
                            (*phrase.Phrase)({
                              Type: (phrase.PhraseType) StatementList,
                              Children: ([]phrase.AstNode) (len=1) {
                                (*phrase.Phrase)({
                                  Type: (phrase.PhraseType) ReturnStatement,
                                  Children: ([]phrase.AstNode) (len=4) {
                                    (*lexer.Token)(Return 4082 6),
                                    (*lexer.Token)(Whitespace 4088 1),
                                    (*lexer.Token)(StringLiteral 4089 15),
                                    (*lexer.Token)(Semicolon 4104 1)
                                  }
                                })
                              }
                            }),
                            (*lexer.Token)(Whitespace 4105 5),
                            (*lexer.Token)(CloseBrace 4110 1)
                          }
                        })
                      }
                    })
                  }
                })
              }
            }),
            (*lexer.Token)(Whitespace 4111 1),
            (*lexer.Token)(CloseBrace 4112 1)
          }
        })
      }
    }),
    (*lexer.Token)(Whitespace 4113 1)
  }
})
