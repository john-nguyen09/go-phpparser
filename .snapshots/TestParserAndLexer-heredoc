([]struct { Type lexer.TokenType; Offset int; Length int }) (len=13) {
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 6
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 6,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 10,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Equals,
    Offset: (int) 11,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 12,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) StartHeredoc,
    Offset: (int) 13,
    Length: (int) 7
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EncapsulatedAndWhitespace,
    Offset: (int) 20,
    Length: (int) 6
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) VariableName,
    Offset: (int) 26,
    Length: (int) 6
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EncapsulatedAndWhitespace,
    Offset: (int) 32,
    Length: (int) 0
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EndHeredoc,
    Offset: (int) 32,
    Length: (int) 4
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Semicolon,
    Offset: (int) 36,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) Whitespace,
    Offset: (int) 37,
    Length: (int) 1
  },
  (struct { Type lexer.TokenType; Offset int; Length int }) {
    Type: (lexer.TokenType) EndOfFile,
    Offset: (int) 38,
    Length: (int) 0
  }
}
(*phrase.Phrase)({
  Type: (phrase.PhraseType) StatementList,
  Children: ([]phrase.AstNode) (len=3) {
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) InlineText,
      Children: ([]phrase.AstNode) (len=1) {
        (*lexer.Token)(OpenTag 0 6)
      }
    }),
    (*phrase.Phrase)({
      Type: (phrase.PhraseType) ExpressionStatement,
      Children: ([]phrase.AstNode) (len=2) {
        (*phrase.Phrase)({
          Type: (phrase.PhraseType) SimpleAssignmentExpression,
          Children: ([]phrase.AstNode) (len=5) {
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) SimpleVariable,
              Children: ([]phrase.AstNode) (len=1) {
                (*lexer.Token)(VariableName 6 4)
              }
            }),
            (*lexer.Token)(Whitespace 10 1),
            (*lexer.Token)(Equals 11 1),
            (*lexer.Token)(Whitespace 12 1),
            (*phrase.Phrase)({
              Type: (phrase.PhraseType) HeredocStringLiteral,
              Children: ([]phrase.AstNode) (len=3) {
                (*lexer.Token)(StartHeredoc 13 7),
                (*phrase.Phrase)({
                  Type: (phrase.PhraseType) EncapsulatedVariableList,
                  Children: ([]phrase.AstNode) (len=3) {
                    (*lexer.Token)(EncapsulatedAndWhitespace 20 6),
                    (*phrase.Phrase)({
                      Type: (phrase.PhraseType) SimpleVariable,
                      Children: ([]phrase.AstNode) (len=1) {
                        (*lexer.Token)(VariableName 26 6)
                      }
                    }),
                    (*lexer.Token)(EncapsulatedAndWhitespace 32 0)
                  }
                }),
                (*lexer.Token)(EndHeredoc 32 4)
              }
            })
          }
        }),
        (*lexer.Token)(Semicolon 36 1)
      }
    }),
    (*lexer.Token)(Whitespace 37 1)
  }
})
