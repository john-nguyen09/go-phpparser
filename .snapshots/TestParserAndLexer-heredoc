([]struct { Type parser.TokenType; Offset int; Length int }) (len=13) {
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) OpenTag,
    Offset: (int) 0,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) VariableName,
    Offset: (int) 6,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 10,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Equals,
    Offset: (int) 11,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 12,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) StartHeredoc,
    Offset: (int) 13,
    Length: (int) 7
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) EncapsulatedAndWhitespace,
    Offset: (int) 20,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) VariableName,
    Offset: (int) 26,
    Length: (int) 6
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) EncapsulatedAndWhitespace,
    Offset: (int) 32,
    Length: (int) 0
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) EndHeredoc,
    Offset: (int) 32,
    Length: (int) 4
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Semicolon,
    Offset: (int) 36,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) Whitespace,
    Offset: (int) 37,
    Length: (int) 1
  },
  (struct { Type parser.TokenType; Offset int; Length int }) {
    Type: (parser.TokenType) EndOfFile,
    Offset: (int) 38,
    Length: (int) 0
  }
}
(*parser.Phrase)({
  Type: (parser.PhraseType) StatementList,
  Children: ([]parser.AstNode) (len=3) {
    (*parser.Phrase)({
      Type: (parser.PhraseType) InlineText,
      Children: ([]parser.AstNode) (len=1) {
        (*parser.Token)(OpenTag 0 6 ModeInitial)
      }
    }),
    (*parser.Phrase)({
      Type: (parser.PhraseType) ExpressionStatement,
      Children: ([]parser.AstNode) (len=2) {
        (*parser.Phrase)({
          Type: (parser.PhraseType) SimpleAssignmentExpression,
          Children: ([]parser.AstNode) (len=5) {
            (*parser.Phrase)({
              Type: (parser.PhraseType) SimpleVariable,
              Children: ([]parser.AstNode) (len=1) {
                (*parser.Token)(VariableName 6 4 ModeScripting)
              }
            }),
            (*parser.Token)(Whitespace 10 1 ModeScripting),
            (*parser.Token)(Equals 11 1 ModeScripting),
            (*parser.Token)(Whitespace 12 1 ModeScripting),
            (*parser.Phrase)({
              Type: (parser.PhraseType) HeredocStringLiteral,
              Children: ([]parser.AstNode) (len=3) {
                (*parser.Token)(StartHeredoc 13 7 ModeScripting),
                (*parser.Phrase)({
                  Type: (parser.PhraseType) EncapsulatedVariableList,
                  Children: ([]parser.AstNode) (len=3) {
                    (*parser.Token)(EncapsulatedAndWhitespace 20 6 ModeHereDoc),
                    (*parser.Phrase)({
                      Type: (parser.PhraseType) SimpleVariable,
                      Children: ([]parser.AstNode) (len=1) {
                        (*parser.Token)(VariableName 26 6 ModeHereDoc)
                      }
                    }),
                    (*parser.Token)(EncapsulatedAndWhitespace 32 0 ModeHereDoc)
                  }
                }),
                (*parser.Token)(EndHeredoc 32 4 ModeEndHereDoc)
              }
            })
          }
        }),
        (*parser.Token)(Semicolon 36 1 ModeScripting)
      }
    }),
    (*parser.Token)(Whitespace 37 1 ModeScripting)
  }
})
