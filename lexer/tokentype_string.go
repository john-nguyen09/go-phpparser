// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Undefined-0]
	_ = x[Unknown-1]
	_ = x[EndOfFile-2]
	_ = x[Abstract-3]
	_ = x[Array-4]
	_ = x[As-5]
	_ = x[Break-6]
	_ = x[Callable-7]
	_ = x[Case-8]
	_ = x[Catch-9]
	_ = x[Class-10]
	_ = x[ClassConstant-11]
	_ = x[Clone-12]
	_ = x[Const-13]
	_ = x[Continue-14]
	_ = x[Declare-15]
	_ = x[Default-16]
	_ = x[Do-17]
	_ = x[Echo-18]
	_ = x[Else-19]
	_ = x[ElseIf-20]
	_ = x[Empty-21]
	_ = x[EndDeclare-22]
	_ = x[EndFor-23]
	_ = x[EndForeach-24]
	_ = x[EndIf-25]
	_ = x[EndSwitch-26]
	_ = x[EndWhile-27]
	_ = x[EndHeredoc-28]
	_ = x[Eval-29]
	_ = x[Exit-30]
	_ = x[Extends-31]
	_ = x[Final-32]
	_ = x[Finally-33]
	_ = x[For-34]
	_ = x[ForEach-35]
	_ = x[Function-36]
	_ = x[Fn-37]
	_ = x[Global-38]
	_ = x[Goto-39]
	_ = x[HaltCompiler-40]
	_ = x[If-41]
	_ = x[Implements-42]
	_ = x[Include-43]
	_ = x[IncludeOnce-44]
	_ = x[InstanceOf-45]
	_ = x[InsteadOf-46]
	_ = x[Interface-47]
	_ = x[Isset-48]
	_ = x[List-49]
	_ = x[And-50]
	_ = x[Or-51]
	_ = x[Xor-52]
	_ = x[Namespace-53]
	_ = x[New-54]
	_ = x[Print-55]
	_ = x[Private-56]
	_ = x[Public-57]
	_ = x[Protected-58]
	_ = x[Require-59]
	_ = x[RequireOnce-60]
	_ = x[Return-61]
	_ = x[Static-62]
	_ = x[Switch-63]
	_ = x[Throw-64]
	_ = x[Trait-65]
	_ = x[Try-66]
	_ = x[Unset-67]
	_ = x[Use-68]
	_ = x[Var-69]
	_ = x[While-70]
	_ = x[Yield-71]
	_ = x[YieldFrom-72]
	_ = x[DirectoryConstant-73]
	_ = x[FileConstant-74]
	_ = x[LineConstant-75]
	_ = x[FunctionConstant-76]
	_ = x[MethodConstant-77]
	_ = x[NamespaceConstant-78]
	_ = x[TraitConstant-79]
	_ = x[StringLiteral-80]
	_ = x[FloatingLiteral-81]
	_ = x[EncapsulatedAndWhitespace-82]
	_ = x[Text-83]
	_ = x[IntegerLiteral-84]
	_ = x[Name-85]
	_ = x[VariableName-86]
	_ = x[Equals-87]
	_ = x[Tilde-88]
	_ = x[Colon-89]
	_ = x[Semicolon-90]
	_ = x[Exclamation-91]
	_ = x[Dollar-92]
	_ = x[ForwardSlash-93]
	_ = x[Percent-94]
	_ = x[Comma-95]
	_ = x[AtSymbol-96]
	_ = x[Backtick-97]
	_ = x[Question-98]
	_ = x[DoubleQuote-99]
	_ = x[SingleQuote-100]
	_ = x[LessThan-101]
	_ = x[GreaterThan-102]
	_ = x[Asterisk-103]
	_ = x[AmpersandAmpersand-104]
	_ = x[Ampersand-105]
	_ = x[AmpersandEquals-106]
	_ = x[CaretEquals-107]
	_ = x[LessThanLessThan-108]
	_ = x[LessThanLessThanEquals-109]
	_ = x[GreaterThanGreaterThan-110]
	_ = x[GreaterThanGreaterThanEquals-111]
	_ = x[BarEquals-112]
	_ = x[Plus-113]
	_ = x[PlusEquals-114]
	_ = x[AsteriskAsterisk-115]
	_ = x[AsteriskAsteriskEquals-116]
	_ = x[Arrow-117]
	_ = x[OpenBrace-118]
	_ = x[OpenBracket-119]
	_ = x[OpenParenthesis-120]
	_ = x[CloseBrace-121]
	_ = x[CloseBracket-122]
	_ = x[CloseParenthesis-123]
	_ = x[QuestionQuestion-124]
	_ = x[Bar-125]
	_ = x[BarBar-126]
	_ = x[Caret-127]
	_ = x[Dot-128]
	_ = x[DotEquals-129]
	_ = x[CurlyOpen-130]
	_ = x[MinusMinus-131]
	_ = x[ForwardslashEquals-132]
	_ = x[DollarCurlyOpen-133]
	_ = x[FatArrow-134]
	_ = x[ColonColon-135]
	_ = x[Ellipsis-136]
	_ = x[PlusPlus-137]
	_ = x[EqualsEquals-138]
	_ = x[GreaterThanEquals-139]
	_ = x[EqualsEqualsEquals-140]
	_ = x[ExclamationEquals-141]
	_ = x[ExclamationEqualsEquals-142]
	_ = x[LessThanEquals-143]
	_ = x[Spaceship-144]
	_ = x[Minus-145]
	_ = x[MinusEquals-146]
	_ = x[PercentEquals-147]
	_ = x[AsteriskEquals-148]
	_ = x[Backslash-149]
	_ = x[BooleanCast-150]
	_ = x[UnsetCast-151]
	_ = x[StringCast-152]
	_ = x[ObjectCast-153]
	_ = x[IntegerCast-154]
	_ = x[FloatCast-155]
	_ = x[StartHeredoc-156]
	_ = x[ArrayCast-157]
	_ = x[OpenTag-158]
	_ = x[OpenTagEcho-159]
	_ = x[CloseTag-160]
	_ = x[DocumentCommentStart-161]
	_ = x[DocumentCommentVersion-162]
	_ = x[DocumentCommentText-163]
	_ = x[DocumentCommentUnknown-164]
	_ = x[DocumentCommentStartline-165]
	_ = x[DocumentCommentEndline-166]
	_ = x[DocumentCommentTagName-167]
	_ = x[DocumentCommentTagNameAnchorStart-168]
	_ = x[AtAuthor-169]
	_ = x[AtDeprecated-170]
	_ = x[AtGlobal-171]
	_ = x[AtLicense-172]
	_ = x[AtLink-173]
	_ = x[AtMethod-174]
	_ = x[AtParam-175]
	_ = x[AtProperty-176]
	_ = x[AtPropertyRead-177]
	_ = x[AtPropertyWrite-178]
	_ = x[AtReturn-179]
	_ = x[AtSince-180]
	_ = x[AtThrows-181]
	_ = x[AtVar-182]
	_ = x[DocumentCommentTagNameAnchorEnd-183]
	_ = x[DocumentCommentEnd-184]
	_ = x[Comment-185]
	_ = x[Whitespace-186]
}

const _TokenType_name = "UndefinedUnknownEndOfFileAbstractArrayAsBreakCallableCaseCatchClassClassConstantCloneConstContinueDeclareDefaultDoEchoElseElseIfEmptyEndDeclareEndForEndForeachEndIfEndSwitchEndWhileEndHeredocEvalExitExtendsFinalFinallyForForEachFunctionFnGlobalGotoHaltCompilerIfImplementsIncludeIncludeOnceInstanceOfInsteadOfInterfaceIssetListAndOrXorNamespaceNewPrintPrivatePublicProtectedRequireRequireOnceReturnStaticSwitchThrowTraitTryUnsetUseVarWhileYieldYieldFromDirectoryConstantFileConstantLineConstantFunctionConstantMethodConstantNamespaceConstantTraitConstantStringLiteralFloatingLiteralEncapsulatedAndWhitespaceTextIntegerLiteralNameVariableNameEqualsTildeColonSemicolonExclamationDollarForwardSlashPercentCommaAtSymbolBacktickQuestionDoubleQuoteSingleQuoteLessThanGreaterThanAsteriskAmpersandAmpersandAmpersandAmpersandEqualsCaretEqualsLessThanLessThanLessThanLessThanEqualsGreaterThanGreaterThanGreaterThanGreaterThanEqualsBarEqualsPlusPlusEqualsAsteriskAsteriskAsteriskAsteriskEqualsArrowOpenBraceOpenBracketOpenParenthesisCloseBraceCloseBracketCloseParenthesisQuestionQuestionBarBarBarCaretDotDotEqualsCurlyOpenMinusMinusForwardslashEqualsDollarCurlyOpenFatArrowColonColonEllipsisPlusPlusEqualsEqualsGreaterThanEqualsEqualsEqualsEqualsExclamationEqualsExclamationEqualsEqualsLessThanEqualsSpaceshipMinusMinusEqualsPercentEqualsAsteriskEqualsBackslashBooleanCastUnsetCastStringCastObjectCastIntegerCastFloatCastStartHeredocArrayCastOpenTagOpenTagEchoCloseTagDocumentCommentStartDocumentCommentVersionDocumentCommentTextDocumentCommentUnknownDocumentCommentStartlineDocumentCommentEndlineDocumentCommentTagNameDocumentCommentTagNameAnchorStartAtAuthorAtDeprecatedAtGlobalAtLicenseAtLinkAtMethodAtParamAtPropertyAtPropertyReadAtPropertyWriteAtReturnAtSinceAtThrowsAtVarDocumentCommentTagNameAnchorEndDocumentCommentEndCommentWhitespace"

var _TokenType_index = [...]uint16{0, 9, 16, 25, 33, 38, 40, 45, 53, 57, 62, 67, 80, 85, 90, 98, 105, 112, 114, 118, 122, 128, 133, 143, 149, 159, 164, 173, 181, 191, 195, 199, 206, 211, 218, 221, 228, 236, 238, 244, 248, 260, 262, 272, 279, 290, 300, 309, 318, 323, 327, 330, 332, 335, 344, 347, 352, 359, 365, 374, 381, 392, 398, 404, 410, 415, 420, 423, 428, 431, 434, 439, 444, 453, 470, 482, 494, 510, 524, 541, 554, 567, 582, 607, 611, 625, 629, 641, 647, 652, 657, 666, 677, 683, 695, 702, 707, 715, 723, 731, 742, 753, 761, 772, 780, 798, 807, 822, 833, 849, 871, 893, 921, 930, 934, 944, 960, 982, 987, 996, 1007, 1022, 1032, 1044, 1060, 1076, 1079, 1085, 1090, 1093, 1102, 1111, 1121, 1139, 1154, 1162, 1172, 1180, 1188, 1200, 1217, 1235, 1252, 1275, 1289, 1298, 1303, 1314, 1327, 1341, 1350, 1361, 1370, 1380, 1390, 1401, 1410, 1422, 1431, 1438, 1449, 1457, 1477, 1499, 1518, 1540, 1564, 1586, 1608, 1641, 1649, 1661, 1669, 1678, 1684, 1692, 1699, 1709, 1723, 1738, 1746, 1753, 1761, 1766, 1797, 1815, 1822, 1832}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
