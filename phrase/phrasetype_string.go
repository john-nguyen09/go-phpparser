// Code generated by "stringer -type=PhraseType"; DO NOT EDIT.

package phrase

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[AdditiveExpression-1]
	_ = x[AnonymousClassDeclaration-2]
	_ = x[AnonymousClassDeclarationHeader-3]
	_ = x[AnonymousFunctionCreationExpression-4]
	_ = x[AnonymousFunctionHeader-5]
	_ = x[AnonymousFunctionUseClause-6]
	_ = x[AnonymousFunctionUseVariable-7]
	_ = x[ArrowFunctionCreationExpression-8]
	_ = x[ArrowFunctionHeader-9]
	_ = x[ArrowFunctionUseClause-10]
	_ = x[ArrowFunctionUseVariable-11]
	_ = x[ArgumentExpressionList-12]
	_ = x[ArrayCreationExpression-13]
	_ = x[ArrayElement-14]
	_ = x[ArrayInitialiserList-15]
	_ = x[ArrayKey-16]
	_ = x[ArrayValue-17]
	_ = x[BitwiseExpression-18]
	_ = x[BreakStatement-19]
	_ = x[ByRefAssignmentExpression-20]
	_ = x[CaseStatement-21]
	_ = x[CaseStatementList-22]
	_ = x[CastExpression-23]
	_ = x[CatchClause-24]
	_ = x[CatchClauseList-25]
	_ = x[CatchNameList-26]
	_ = x[ClassBaseClause-27]
	_ = x[ClassConstantAccessExpression-28]
	_ = x[ClassConstDeclaration-29]
	_ = x[ClassConstElement-30]
	_ = x[ClassConstElementList-31]
	_ = x[ClassDeclaration-32]
	_ = x[ClassDeclarationBody-33]
	_ = x[ClassDeclarationHeader-34]
	_ = x[ClassInterfaceClause-35]
	_ = x[ClassMemberDeclarationList-36]
	_ = x[ClassModifiers-37]
	_ = x[ClassTypeDesignator-38]
	_ = x[CloneExpression-39]
	_ = x[ClosureUseList-40]
	_ = x[CoalesceExpression-41]
	_ = x[CompoundAssignmentExpression-42]
	_ = x[CompoundStatement-43]
	_ = x[TernaryExpression-44]
	_ = x[ConstantAccessExpression-45]
	_ = x[ConstDeclaration-46]
	_ = x[ConstElement-47]
	_ = x[ConstElementList-48]
	_ = x[ContinueStatement-49]
	_ = x[DeclareDirective-50]
	_ = x[DeclareStatement-51]
	_ = x[DefaultStatement-52]
	_ = x[DoStatement-53]
	_ = x[DoubleQuotedStringLiteral-54]
	_ = x[EchoIntrinsic-55]
	_ = x[ElseClause-56]
	_ = x[ElseIfClause-57]
	_ = x[ElseIfClauseList-58]
	_ = x[EmptyIntrinsic-59]
	_ = x[EncapsulatedExpression-60]
	_ = x[EncapsulatedVariable-61]
	_ = x[EncapsulatedVariableList-62]
	_ = x[EqualityExpression-63]
	_ = x[Error-64]
	_ = x[ErrorClassMemberDeclaration-65]
	_ = x[ErrorClassTypeDesignatorAtom-66]
	_ = x[ErrorControlExpression-67]
	_ = x[ErrorExpression-68]
	_ = x[ErrorScopedAccessExpression-69]
	_ = x[ErrorTraitAdaptation-70]
	_ = x[ErrorVariable-71]
	_ = x[ErrorVariableAtom-72]
	_ = x[EvalIntrinsic-73]
	_ = x[ExitIntrinsic-74]
	_ = x[ExponentiationExpression-75]
	_ = x[ExpressionList-76]
	_ = x[ExpressionStatement-77]
	_ = x[FinallyClause-78]
	_ = x[ForControl-79]
	_ = x[ForeachCollection-80]
	_ = x[ForeachKey-81]
	_ = x[ForeachStatement-82]
	_ = x[ForeachValue-83]
	_ = x[ForEndOfLoop-84]
	_ = x[ForExpressionGroup-85]
	_ = x[ForInitialiser-86]
	_ = x[ForStatement-87]
	_ = x[FullyQualifiedName-88]
	_ = x[FunctionCallExpression-89]
	_ = x[FunctionDeclaration-90]
	_ = x[FunctionDeclarationBody-91]
	_ = x[FunctionDeclarationHeader-92]
	_ = x[FunctionStaticDeclaration-93]
	_ = x[FunctionStaticInitialiser-94]
	_ = x[GlobalDeclaration-95]
	_ = x[GotoStatement-96]
	_ = x[HaltCompilerStatement-97]
	_ = x[HeredocStringLiteral-98]
	_ = x[Identifier-99]
	_ = x[IfStatement-100]
	_ = x[IncludeExpression-101]
	_ = x[IncludeOnceExpression-102]
	_ = x[InlineText-103]
	_ = x[InstanceOfExpression-104]
	_ = x[InstanceofTypeDesignator-105]
	_ = x[InterfaceBaseClause-106]
	_ = x[InterfaceDeclaration-107]
	_ = x[InterfaceDeclarationBody-108]
	_ = x[InterfaceDeclarationHeader-109]
	_ = x[InterfaceMemberDeclarationList-110]
	_ = x[IssetIntrinsic-111]
	_ = x[ListIntrinsic-112]
	_ = x[LogicalExpression-113]
	_ = x[MemberModifierList-114]
	_ = x[MemberName-115]
	_ = x[MethodCallExpression-116]
	_ = x[MethodDeclaration-117]
	_ = x[MethodDeclarationBody-118]
	_ = x[MethodDeclarationHeader-119]
	_ = x[MethodReference-120]
	_ = x[MultiplicativeExpression-121]
	_ = x[NamedLabelStatement-122]
	_ = x[NamespaceAliasingClause-123]
	_ = x[NamespaceDefinition-124]
	_ = x[NamespaceName-125]
	_ = x[NamespaceUseClause-126]
	_ = x[NamespaceUseClauseList-127]
	_ = x[NamespaceUseDeclaration-128]
	_ = x[NamespaceUseGroupClause-129]
	_ = x[NamespaceUseGroupClauseList-130]
	_ = x[NullStatement-131]
	_ = x[ObjectCreationExpression-132]
	_ = x[ParameterDeclaration-133]
	_ = x[ParameterDeclarationList-134]
	_ = x[PostfixDecrementExpression-135]
	_ = x[PostfixIncrementExpression-136]
	_ = x[PrefixDecrementExpression-137]
	_ = x[PrefixIncrementExpression-138]
	_ = x[PrintIntrinsic-139]
	_ = x[PropertyAccessExpression-140]
	_ = x[PropertyDeclaration-141]
	_ = x[PropertyElement-142]
	_ = x[PropertyElementList-143]
	_ = x[PropertyInitialiser-144]
	_ = x[QualifiedName-145]
	_ = x[QualifiedNameList-146]
	_ = x[RelationalExpression-147]
	_ = x[RelativeQualifiedName-148]
	_ = x[RelativeScope-149]
	_ = x[RequireExpression-150]
	_ = x[RequireOnceExpression-151]
	_ = x[ReturnStatement-152]
	_ = x[ReturnType-153]
	_ = x[ScopedCallExpression-154]
	_ = x[ScopedMemberName-155]
	_ = x[ScopedPropertyAccessExpression-156]
	_ = x[ShellCommandExpression-157]
	_ = x[ShiftExpression-158]
	_ = x[SimpleAssignmentExpression-159]
	_ = x[SimpleVariable-160]
	_ = x[StatementList-161]
	_ = x[StaticVariableDeclaration-162]
	_ = x[StaticVariableDeclarationList-163]
	_ = x[SubscriptExpression-164]
	_ = x[SwitchStatement-165]
	_ = x[ThrowStatement-166]
	_ = x[TraitAdaptationList-167]
	_ = x[TraitAlias-168]
	_ = x[TraitDeclaration-169]
	_ = x[TraitDeclarationBody-170]
	_ = x[TraitDeclarationHeader-171]
	_ = x[TraitMemberDeclarationList-172]
	_ = x[TraitPrecedence-173]
	_ = x[TraitUseClause-174]
	_ = x[TraitUseSpecification-175]
	_ = x[TryStatement-176]
	_ = x[TypeDeclaration-177]
	_ = x[UnaryOpExpression-178]
	_ = x[UnsetIntrinsic-179]
	_ = x[VariableList-180]
	_ = x[VariableNameList-181]
	_ = x[VariadicUnpacking-182]
	_ = x[WhileStatement-183]
	_ = x[YieldExpression-184]
	_ = x[YieldFromExpression-185]
	_ = x[DocumentComment-186]
	_ = x[DocumentCommentDescription-187]
	_ = x[DocumentCommentAuthor-188]
	_ = x[DocumentCommentEmail-189]
	_ = x[DocumentCommentTagAnchorStart-190]
	_ = x[DocumentCommentTag-191]
	_ = x[DocumentCommentAuthorTag-192]
	_ = x[DocumentCommentDeprecatedTag-193]
	_ = x[DocumentCommentGlobalTag-194]
	_ = x[DocumentCommentMethodTag-195]
	_ = x[DocumentCommentParamTag-196]
	_ = x[DocumentCommentPropertyTag-197]
	_ = x[DocumentCommentReturnTag-198]
	_ = x[DocumentCommentThrowsTag-199]
	_ = x[DocumentCommentVarTag-200]
	_ = x[DocumentCommentTagAnchorEnd-201]
	_ = x[TypeUnion-202]
	_ = x[ParameterValue-203]
}

const _PhraseType_name = "UnknownAdditiveExpressionAnonymousClassDeclarationAnonymousClassDeclarationHeaderAnonymousFunctionCreationExpressionAnonymousFunctionHeaderAnonymousFunctionUseClauseAnonymousFunctionUseVariableArrowFunctionCreationExpressionArrowFunctionHeaderArrowFunctionUseClauseArrowFunctionUseVariableArgumentExpressionListArrayCreationExpressionArrayElementArrayInitialiserListArrayKeyArrayValueBitwiseExpressionBreakStatementByRefAssignmentExpressionCaseStatementCaseStatementListCastExpressionCatchClauseCatchClauseListCatchNameListClassBaseClauseClassConstantAccessExpressionClassConstDeclarationClassConstElementClassConstElementListClassDeclarationClassDeclarationBodyClassDeclarationHeaderClassInterfaceClauseClassMemberDeclarationListClassModifiersClassTypeDesignatorCloneExpressionClosureUseListCoalesceExpressionCompoundAssignmentExpressionCompoundStatementTernaryExpressionConstantAccessExpressionConstDeclarationConstElementConstElementListContinueStatementDeclareDirectiveDeclareStatementDefaultStatementDoStatementDoubleQuotedStringLiteralEchoIntrinsicElseClauseElseIfClauseElseIfClauseListEmptyIntrinsicEncapsulatedExpressionEncapsulatedVariableEncapsulatedVariableListEqualityExpressionErrorErrorClassMemberDeclarationErrorClassTypeDesignatorAtomErrorControlExpressionErrorExpressionErrorScopedAccessExpressionErrorTraitAdaptationErrorVariableErrorVariableAtomEvalIntrinsicExitIntrinsicExponentiationExpressionExpressionListExpressionStatementFinallyClauseForControlForeachCollectionForeachKeyForeachStatementForeachValueForEndOfLoopForExpressionGroupForInitialiserForStatementFullyQualifiedNameFunctionCallExpressionFunctionDeclarationFunctionDeclarationBodyFunctionDeclarationHeaderFunctionStaticDeclarationFunctionStaticInitialiserGlobalDeclarationGotoStatementHaltCompilerStatementHeredocStringLiteralIdentifierIfStatementIncludeExpressionIncludeOnceExpressionInlineTextInstanceOfExpressionInstanceofTypeDesignatorInterfaceBaseClauseInterfaceDeclarationInterfaceDeclarationBodyInterfaceDeclarationHeaderInterfaceMemberDeclarationListIssetIntrinsicListIntrinsicLogicalExpressionMemberModifierListMemberNameMethodCallExpressionMethodDeclarationMethodDeclarationBodyMethodDeclarationHeaderMethodReferenceMultiplicativeExpressionNamedLabelStatementNamespaceAliasingClauseNamespaceDefinitionNamespaceNameNamespaceUseClauseNamespaceUseClauseListNamespaceUseDeclarationNamespaceUseGroupClauseNamespaceUseGroupClauseListNullStatementObjectCreationExpressionParameterDeclarationParameterDeclarationListPostfixDecrementExpressionPostfixIncrementExpressionPrefixDecrementExpressionPrefixIncrementExpressionPrintIntrinsicPropertyAccessExpressionPropertyDeclarationPropertyElementPropertyElementListPropertyInitialiserQualifiedNameQualifiedNameListRelationalExpressionRelativeQualifiedNameRelativeScopeRequireExpressionRequireOnceExpressionReturnStatementReturnTypeScopedCallExpressionScopedMemberNameScopedPropertyAccessExpressionShellCommandExpressionShiftExpressionSimpleAssignmentExpressionSimpleVariableStatementListStaticVariableDeclarationStaticVariableDeclarationListSubscriptExpressionSwitchStatementThrowStatementTraitAdaptationListTraitAliasTraitDeclarationTraitDeclarationBodyTraitDeclarationHeaderTraitMemberDeclarationListTraitPrecedenceTraitUseClauseTraitUseSpecificationTryStatementTypeDeclarationUnaryOpExpressionUnsetIntrinsicVariableListVariableNameListVariadicUnpackingWhileStatementYieldExpressionYieldFromExpressionDocumentCommentDocumentCommentDescriptionDocumentCommentAuthorDocumentCommentEmailDocumentCommentTagAnchorStartDocumentCommentTagDocumentCommentAuthorTagDocumentCommentDeprecatedTagDocumentCommentGlobalTagDocumentCommentMethodTagDocumentCommentParamTagDocumentCommentPropertyTagDocumentCommentReturnTagDocumentCommentThrowsTagDocumentCommentVarTagDocumentCommentTagAnchorEndTypeUnionParameterValue"

var _PhraseType_index = [...]uint16{0, 7, 25, 50, 81, 116, 139, 165, 193, 224, 243, 265, 289, 311, 334, 346, 366, 374, 384, 401, 415, 440, 453, 470, 484, 495, 510, 523, 538, 567, 588, 605, 626, 642, 662, 684, 704, 730, 744, 763, 778, 792, 810, 838, 855, 872, 896, 912, 924, 940, 957, 973, 989, 1005, 1016, 1041, 1054, 1064, 1076, 1092, 1106, 1128, 1148, 1172, 1190, 1195, 1222, 1250, 1272, 1287, 1314, 1334, 1347, 1364, 1377, 1390, 1414, 1428, 1447, 1460, 1470, 1487, 1497, 1513, 1525, 1537, 1555, 1569, 1581, 1599, 1621, 1640, 1663, 1688, 1713, 1738, 1755, 1768, 1789, 1809, 1819, 1830, 1847, 1868, 1878, 1898, 1922, 1941, 1961, 1985, 2011, 2041, 2055, 2068, 2085, 2103, 2113, 2133, 2150, 2171, 2194, 2209, 2233, 2252, 2275, 2294, 2307, 2325, 2347, 2370, 2393, 2420, 2433, 2457, 2477, 2501, 2527, 2553, 2578, 2603, 2617, 2641, 2660, 2675, 2694, 2713, 2726, 2743, 2763, 2784, 2797, 2814, 2835, 2850, 2860, 2880, 2896, 2926, 2948, 2963, 2989, 3003, 3016, 3041, 3070, 3089, 3104, 3118, 3137, 3147, 3163, 3183, 3205, 3231, 3246, 3260, 3281, 3293, 3308, 3325, 3339, 3351, 3367, 3384, 3398, 3413, 3432, 3447, 3473, 3494, 3514, 3543, 3561, 3585, 3613, 3637, 3661, 3684, 3710, 3734, 3758, 3779, 3806, 3815, 3829}

func (i PhraseType) String() string {
	if i >= PhraseType(len(_PhraseType_index)-1) {
		return "PhraseType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PhraseType_name[_PhraseType_index[i]:_PhraseType_index[i+1]]
}
